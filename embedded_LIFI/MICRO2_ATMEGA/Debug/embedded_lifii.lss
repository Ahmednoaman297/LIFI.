
embedded_lifii.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003b32  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000044  00800060  00003b32  00003bc6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  008000a4  008000a4  00003c0a  2**0
                  ALLOC
  3 .stab         00002df0  00000000  00000000  00003c0c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000c75  00000000  00000000  000069fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00007671  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000077b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00007921  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000956a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a455  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000b204  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000b364  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000b5f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000bdbf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e3       	ldi	r30, 0x32	; 50
      68:	fb e3       	ldi	r31, 0x3B	; 59
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 3a       	cpi	r26, 0xA4	; 164
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a4 ea       	ldi	r26, 0xA4	; 164
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 3a       	cpi	r26, 0xA8	; 168
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 24 09 	call	0x1248	; 0x1248 <main>
      8a:	0c 94 97 1d 	jmp	0x3b2e	; 0x3b2e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 1b 1d 	jmp	0x3a36	; 0x3a36 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ac e9       	ldi	r26, 0x9C	; 156
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 37 1d 	jmp	0x3a6e	; 0x3a6e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 27 1d 	jmp	0x3a4e	; 0x3a4e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 43 1d 	jmp	0x3a86	; 0x3a86 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 27 1d 	jmp	0x3a4e	; 0x3a4e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 43 1d 	jmp	0x3a86	; 0x3a86 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 1b 1d 	jmp	0x3a36	; 0x3a36 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8c e9       	ldi	r24, 0x9C	; 156
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 37 1d 	jmp	0x3a6e	; 0x3a6e <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 27 1d 	jmp	0x3a4e	; 0x3a4e <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 43 1d 	jmp	0x3a86	; 0x3a86 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 27 1d 	jmp	0x3a4e	; 0x3a4e <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 43 1d 	jmp	0x3a86	; 0x3a86 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 27 1d 	jmp	0x3a4e	; 0x3a4e <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 43 1d 	jmp	0x3a86	; 0x3a86 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 2b 1d 	jmp	0x3a56	; 0x3a56 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 47 1d 	jmp	0x3a8e	; 0x3a8e <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <Buzzer_init>:
 *      Author: Ahmedmohamed
 */
#include"Buzzer.h"
#include "std_types.h"
void Buzzer_init()
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(buzzer_PORT_ID,buzzer_PIN_ID,PIN_OUTPUT);
     b4e:	82 e0       	ldi	r24, 0x02	; 2
     b50:	65 e0       	ldi	r22, 0x05	; 5
     b52:	41 e0       	ldi	r20, 0x01	; 1
     b54:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <GPIO_setupPinDirection>
	GPIO_writePin( buzzer_PORT_ID, buzzer_PIN_ID , LOGIC_LOW);
     b58:	82 e0       	ldi	r24, 0x02	; 2
     b5a:	65 e0       	ldi	r22, 0x05	; 5
     b5c:	40 e0       	ldi	r20, 0x00	; 0
     b5e:	0e 94 46 10 	call	0x208c	; 0x208c <GPIO_writePin>

}
     b62:	cf 91       	pop	r28
     b64:	df 91       	pop	r29
     b66:	08 95       	ret

00000b68 <Buzzer_on>:
void Buzzer_on(void)
{
     b68:	df 93       	push	r29
     b6a:	cf 93       	push	r28
     b6c:	cd b7       	in	r28, 0x3d	; 61
     b6e:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin( buzzer_PORT_ID, buzzer_PIN_ID , LOGIC_HIGH);
     b70:	82 e0       	ldi	r24, 0x02	; 2
     b72:	65 e0       	ldi	r22, 0x05	; 5
     b74:	41 e0       	ldi	r20, 0x01	; 1
     b76:	0e 94 46 10 	call	0x208c	; 0x208c <GPIO_writePin>

}
     b7a:	cf 91       	pop	r28
     b7c:	df 91       	pop	r29
     b7e:	08 95       	ret

00000b80 <Buzzer_off>:
void Buzzer_off(void)
{
     b80:	df 93       	push	r29
     b82:	cf 93       	push	r28
     b84:	cd b7       	in	r28, 0x3d	; 61
     b86:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin( buzzer_PORT_ID, buzzer_PIN_ID , LOGIC_LOW);
     b88:	82 e0       	ldi	r24, 0x02	; 2
     b8a:	65 e0       	ldi	r22, 0x05	; 5
     b8c:	40 e0       	ldi	r20, 0x00	; 0
     b8e:	0e 94 46 10 	call	0x208c	; 0x208c <GPIO_writePin>

}
     b92:	cf 91       	pop	r28
     b94:	df 91       	pop	r29
     b96:	08 95       	ret

00000b98 <LDR_ON>:
uint8 morth_counter=0;
uint8 data_counter=0;
uint8 flag=0;
uint8 data[3];

void LDR_ON(void) {
     b98:	df 93       	push	r29
     b9a:	cf 93       	push	r28
     b9c:	cd b7       	in	r28, 0x3d	; 61
     b9e:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(LDR_PORT_ID, LDR_PIN_ID, PIN_INPUT);
     ba0:	81 e0       	ldi	r24, 0x01	; 1
     ba2:	60 e0       	ldi	r22, 0x00	; 0
     ba4:	40 e0       	ldi	r20, 0x00	; 0
     ba6:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <GPIO_setupPinDirection>
}
     baa:	cf 91       	pop	r28
     bac:	df 91       	pop	r29
     bae:	08 95       	ret

00000bb0 <LDR_RECIVE>:

uint8 LDR_RECIVE(void) {
     bb0:	0f 93       	push	r16
     bb2:	1f 93       	push	r17
     bb4:	df 93       	push	r29
     bb6:	cf 93       	push	r28
     bb8:	cd b7       	in	r28, 0x3d	; 61
     bba:	de b7       	in	r29, 0x3e	; 62
     bbc:	cb 54       	subi	r28, 0x4B	; 75
     bbe:	d0 40       	sbci	r29, 0x00	; 0
     bc0:	0f b6       	in	r0, 0x3f	; 63
     bc2:	f8 94       	cli
     bc4:	de bf       	out	0x3e, r29	; 62
     bc6:	0f be       	out	0x3f, r0	; 63
     bc8:	cd bf       	out	0x3d, r28	; 61
	morth_counter = 0;
     bca:	10 92 a4 00 	sts	0x00A4, r1
	flag = 0;
     bce:	10 92 a6 00 	sts	0x00A6, r1
//	LCD_clearScreen();
	uint8 temp = 0;
     bd2:	fe 01       	movw	r30, r28
     bd4:	e5 5b       	subi	r30, 0xB5	; 181
     bd6:	ff 4f       	sbci	r31, 0xFF	; 255
     bd8:	10 82       	st	Z, r1
	LCD_moveCursor(0, 0);
     bda:	80 e0       	ldi	r24, 0x00	; 0
     bdc:	60 e0       	ldi	r22, 0x00	; 0
     bde:	0e 94 6a 1c 	call	0x38d4	; 0x38d4 <LCD_moveCursor>
	LCD_displayString("bd2na");
     be2:	80 e6       	ldi	r24, 0x60	; 96
     be4:	90 e0       	ldi	r25, 0x00	; 0
     be6:	0e 94 41 1c 	call	0x3882	; 0x3882 <LCD_displayString>
	Buzzer_off();
     bea:	0e 94 c0 05 	call	0xb80	; 0xb80 <Buzzer_off>
	for (int i = 10; i > 0; i--) {
     bee:	fe 01       	movw	r30, r28
     bf0:	e7 5b       	subi	r30, 0xB7	; 183
     bf2:	ff 4f       	sbci	r31, 0xFF	; 255
     bf4:	8a e0       	ldi	r24, 0x0A	; 10
     bf6:	90 e0       	ldi	r25, 0x00	; 0
     bf8:	91 83       	std	Z+1, r25	; 0x01
     bfa:	80 83       	st	Z, r24
     bfc:	9c c0       	rjmp	.+312    	; 0xd36 <LDR_RECIVE+0x186>
		LCD_moveCursor(0, 8);
     bfe:	80 e0       	ldi	r24, 0x00	; 0
     c00:	68 e0       	ldi	r22, 0x08	; 8
     c02:	0e 94 6a 1c 	call	0x38d4	; 0x38d4 <LCD_moveCursor>

		LCD_intgerToString(i);
     c06:	fe 01       	movw	r30, r28
     c08:	e7 5b       	subi	r30, 0xB7	; 183
     c0a:	ff 4f       	sbci	r31, 0xFF	; 255
     c0c:	80 81       	ld	r24, Z
     c0e:	91 81       	ldd	r25, Z+1	; 0x01
     c10:	0e 94 c5 1c 	call	0x398a	; 0x398a <LCD_intgerToString>
     c14:	fe 01       	movw	r30, r28
     c16:	ed 5b       	subi	r30, 0xBD	; 189
     c18:	ff 4f       	sbci	r31, 0xFF	; 255
     c1a:	80 e0       	ldi	r24, 0x00	; 0
     c1c:	90 e0       	ldi	r25, 0x00	; 0
     c1e:	aa ef       	ldi	r26, 0xFA	; 250
     c20:	b3 e4       	ldi	r27, 0x43	; 67
     c22:	80 83       	st	Z, r24
     c24:	91 83       	std	Z+1, r25	; 0x01
     c26:	a2 83       	std	Z+2, r26	; 0x02
     c28:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c2a:	8e 01       	movw	r16, r28
     c2c:	01 5c       	subi	r16, 0xC1	; 193
     c2e:	1f 4f       	sbci	r17, 0xFF	; 255
     c30:	fe 01       	movw	r30, r28
     c32:	ed 5b       	subi	r30, 0xBD	; 189
     c34:	ff 4f       	sbci	r31, 0xFF	; 255
     c36:	60 81       	ld	r22, Z
     c38:	71 81       	ldd	r23, Z+1	; 0x01
     c3a:	82 81       	ldd	r24, Z+2	; 0x02
     c3c:	93 81       	ldd	r25, Z+3	; 0x03
     c3e:	20 e0       	ldi	r18, 0x00	; 0
     c40:	30 e0       	ldi	r19, 0x00	; 0
     c42:	4a e7       	ldi	r20, 0x7A	; 122
     c44:	55 e4       	ldi	r21, 0x45	; 69
     c46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c4a:	dc 01       	movw	r26, r24
     c4c:	cb 01       	movw	r24, r22
     c4e:	f8 01       	movw	r30, r16
     c50:	80 83       	st	Z, r24
     c52:	91 83       	std	Z+1, r25	; 0x01
     c54:	a2 83       	std	Z+2, r26	; 0x02
     c56:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     c58:	fe 01       	movw	r30, r28
     c5a:	ff 96       	adiw	r30, 0x3f	; 63
     c5c:	60 81       	ld	r22, Z
     c5e:	71 81       	ldd	r23, Z+1	; 0x01
     c60:	82 81       	ldd	r24, Z+2	; 0x02
     c62:	93 81       	ldd	r25, Z+3	; 0x03
     c64:	20 e0       	ldi	r18, 0x00	; 0
     c66:	30 e0       	ldi	r19, 0x00	; 0
     c68:	40 e8       	ldi	r20, 0x80	; 128
     c6a:	5f e3       	ldi	r21, 0x3F	; 63
     c6c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     c70:	88 23       	and	r24, r24
     c72:	2c f4       	brge	.+10     	; 0xc7e <LDR_RECIVE+0xce>
		__ticks = 1;
     c74:	81 e0       	ldi	r24, 0x01	; 1
     c76:	90 e0       	ldi	r25, 0x00	; 0
     c78:	9e af       	std	Y+62, r25	; 0x3e
     c7a:	8d af       	std	Y+61, r24	; 0x3d
     c7c:	46 c0       	rjmp	.+140    	; 0xd0a <LDR_RECIVE+0x15a>
	else if (__tmp > 65535)
     c7e:	fe 01       	movw	r30, r28
     c80:	ff 96       	adiw	r30, 0x3f	; 63
     c82:	60 81       	ld	r22, Z
     c84:	71 81       	ldd	r23, Z+1	; 0x01
     c86:	82 81       	ldd	r24, Z+2	; 0x02
     c88:	93 81       	ldd	r25, Z+3	; 0x03
     c8a:	20 e0       	ldi	r18, 0x00	; 0
     c8c:	3f ef       	ldi	r19, 0xFF	; 255
     c8e:	4f e7       	ldi	r20, 0x7F	; 127
     c90:	57 e4       	ldi	r21, 0x47	; 71
     c92:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     c96:	18 16       	cp	r1, r24
     c98:	64 f5       	brge	.+88     	; 0xcf2 <LDR_RECIVE+0x142>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c9a:	fe 01       	movw	r30, r28
     c9c:	ed 5b       	subi	r30, 0xBD	; 189
     c9e:	ff 4f       	sbci	r31, 0xFF	; 255
     ca0:	60 81       	ld	r22, Z
     ca2:	71 81       	ldd	r23, Z+1	; 0x01
     ca4:	82 81       	ldd	r24, Z+2	; 0x02
     ca6:	93 81       	ldd	r25, Z+3	; 0x03
     ca8:	20 e0       	ldi	r18, 0x00	; 0
     caa:	30 e0       	ldi	r19, 0x00	; 0
     cac:	40 e2       	ldi	r20, 0x20	; 32
     cae:	51 e4       	ldi	r21, 0x41	; 65
     cb0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     cb4:	dc 01       	movw	r26, r24
     cb6:	cb 01       	movw	r24, r22
     cb8:	bc 01       	movw	r22, r24
     cba:	cd 01       	movw	r24, r26
     cbc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     cc0:	dc 01       	movw	r26, r24
     cc2:	cb 01       	movw	r24, r22
     cc4:	9e af       	std	Y+62, r25	; 0x3e
     cc6:	8d af       	std	Y+61, r24	; 0x3d
     cc8:	0f c0       	rjmp	.+30     	; 0xce8 <LDR_RECIVE+0x138>
     cca:	80 e9       	ldi	r24, 0x90	; 144
     ccc:	91 e0       	ldi	r25, 0x01	; 1
     cce:	9c af       	std	Y+60, r25	; 0x3c
     cd0:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     cd2:	8b ad       	ldd	r24, Y+59	; 0x3b
     cd4:	9c ad       	ldd	r25, Y+60	; 0x3c
     cd6:	01 97       	sbiw	r24, 0x01	; 1
     cd8:	f1 f7       	brne	.-4      	; 0xcd6 <LDR_RECIVE+0x126>
     cda:	9c af       	std	Y+60, r25	; 0x3c
     cdc:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     cde:	8d ad       	ldd	r24, Y+61	; 0x3d
     ce0:	9e ad       	ldd	r25, Y+62	; 0x3e
     ce2:	01 97       	sbiw	r24, 0x01	; 1
     ce4:	9e af       	std	Y+62, r25	; 0x3e
     ce6:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ce8:	8d ad       	ldd	r24, Y+61	; 0x3d
     cea:	9e ad       	ldd	r25, Y+62	; 0x3e
     cec:	00 97       	sbiw	r24, 0x00	; 0
     cee:	69 f7       	brne	.-38     	; 0xcca <LDR_RECIVE+0x11a>
     cf0:	16 c0       	rjmp	.+44     	; 0xd1e <LDR_RECIVE+0x16e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     cf2:	fe 01       	movw	r30, r28
     cf4:	ff 96       	adiw	r30, 0x3f	; 63
     cf6:	60 81       	ld	r22, Z
     cf8:	71 81       	ldd	r23, Z+1	; 0x01
     cfa:	82 81       	ldd	r24, Z+2	; 0x02
     cfc:	93 81       	ldd	r25, Z+3	; 0x03
     cfe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d02:	dc 01       	movw	r26, r24
     d04:	cb 01       	movw	r24, r22
     d06:	9e af       	std	Y+62, r25	; 0x3e
     d08:	8d af       	std	Y+61, r24	; 0x3d
     d0a:	8d ad       	ldd	r24, Y+61	; 0x3d
     d0c:	9e ad       	ldd	r25, Y+62	; 0x3e
     d0e:	9a af       	std	Y+58, r25	; 0x3a
     d10:	89 af       	std	Y+57, r24	; 0x39
     d12:	89 ad       	ldd	r24, Y+57	; 0x39
     d14:	9a ad       	ldd	r25, Y+58	; 0x3a
     d16:	01 97       	sbiw	r24, 0x01	; 1
     d18:	f1 f7       	brne	.-4      	; 0xd16 <LDR_RECIVE+0x166>
     d1a:	9a af       	std	Y+58, r25	; 0x3a
     d1c:	89 af       	std	Y+57, r24	; 0x39
//	LCD_clearScreen();
	uint8 temp = 0;
	LCD_moveCursor(0, 0);
	LCD_displayString("bd2na");
	Buzzer_off();
	for (int i = 10; i > 0; i--) {
     d1e:	de 01       	movw	r26, r28
     d20:	a7 5b       	subi	r26, 0xB7	; 183
     d22:	bf 4f       	sbci	r27, 0xFF	; 255
     d24:	fe 01       	movw	r30, r28
     d26:	e7 5b       	subi	r30, 0xB7	; 183
     d28:	ff 4f       	sbci	r31, 0xFF	; 255
     d2a:	80 81       	ld	r24, Z
     d2c:	91 81       	ldd	r25, Z+1	; 0x01
     d2e:	01 97       	sbiw	r24, 0x01	; 1
     d30:	11 96       	adiw	r26, 0x01	; 1
     d32:	9c 93       	st	X, r25
     d34:	8e 93       	st	-X, r24
     d36:	fe 01       	movw	r30, r28
     d38:	e7 5b       	subi	r30, 0xB7	; 183
     d3a:	ff 4f       	sbci	r31, 0xFF	; 255
     d3c:	80 81       	ld	r24, Z
     d3e:	91 81       	ldd	r25, Z+1	; 0x01
     d40:	18 16       	cp	r1, r24
     d42:	19 06       	cpc	r1, r25
     d44:	0c f4       	brge	.+2      	; 0xd48 <LDR_RECIVE+0x198>
     d46:	5b cf       	rjmp	.-330    	; 0xbfe <LDR_RECIVE+0x4e>
     d48:	7e c0       	rjmp	.+252    	; 0xe46 <LDR_RECIVE+0x296>
		_delay_ms(500);

	}
	while (morth_counter != 1) {

		if (GPIO_readPin(LDR_PORT_ID, LDR_PIN_ID) == LOGIC_LOW) {
     d4a:	81 e0       	ldi	r24, 0x01	; 1
     d4c:	60 e0       	ldi	r22, 0x00	; 0
     d4e:	0e 94 31 11 	call	0x2262	; 0x2262 <GPIO_readPin>
     d52:	88 23       	and	r24, r24
     d54:	09 f0       	breq	.+2      	; 0xd58 <LDR_RECIVE+0x1a8>
     d56:	77 c0       	rjmp	.+238    	; 0xe46 <LDR_RECIVE+0x296>
			morth_counter++;
     d58:	80 91 a4 00 	lds	r24, 0x00A4
     d5c:	8f 5f       	subi	r24, 0xFF	; 255
     d5e:	80 93 a4 00 	sts	0x00A4, r24
     d62:	80 e0       	ldi	r24, 0x00	; 0
     d64:	90 e0       	ldi	r25, 0x00	; 0
     d66:	aa e7       	ldi	r26, 0x7A	; 122
     d68:	b4 e4       	ldi	r27, 0x44	; 68
     d6a:	8d ab       	std	Y+53, r24	; 0x35
     d6c:	9e ab       	std	Y+54, r25	; 0x36
     d6e:	af ab       	std	Y+55, r26	; 0x37
     d70:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d72:	6d a9       	ldd	r22, Y+53	; 0x35
     d74:	7e a9       	ldd	r23, Y+54	; 0x36
     d76:	8f a9       	ldd	r24, Y+55	; 0x37
     d78:	98 ad       	ldd	r25, Y+56	; 0x38
     d7a:	20 e0       	ldi	r18, 0x00	; 0
     d7c:	30 e0       	ldi	r19, 0x00	; 0
     d7e:	4a e7       	ldi	r20, 0x7A	; 122
     d80:	55 e4       	ldi	r21, 0x45	; 69
     d82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d86:	dc 01       	movw	r26, r24
     d88:	cb 01       	movw	r24, r22
     d8a:	89 ab       	std	Y+49, r24	; 0x31
     d8c:	9a ab       	std	Y+50, r25	; 0x32
     d8e:	ab ab       	std	Y+51, r26	; 0x33
     d90:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     d92:	69 a9       	ldd	r22, Y+49	; 0x31
     d94:	7a a9       	ldd	r23, Y+50	; 0x32
     d96:	8b a9       	ldd	r24, Y+51	; 0x33
     d98:	9c a9       	ldd	r25, Y+52	; 0x34
     d9a:	20 e0       	ldi	r18, 0x00	; 0
     d9c:	30 e0       	ldi	r19, 0x00	; 0
     d9e:	40 e8       	ldi	r20, 0x80	; 128
     da0:	5f e3       	ldi	r21, 0x3F	; 63
     da2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     da6:	88 23       	and	r24, r24
     da8:	2c f4       	brge	.+10     	; 0xdb4 <LDR_RECIVE+0x204>
		__ticks = 1;
     daa:	81 e0       	ldi	r24, 0x01	; 1
     dac:	90 e0       	ldi	r25, 0x00	; 0
     dae:	98 ab       	std	Y+48, r25	; 0x30
     db0:	8f a7       	std	Y+47, r24	; 0x2f
     db2:	3f c0       	rjmp	.+126    	; 0xe32 <LDR_RECIVE+0x282>
	else if (__tmp > 65535)
     db4:	69 a9       	ldd	r22, Y+49	; 0x31
     db6:	7a a9       	ldd	r23, Y+50	; 0x32
     db8:	8b a9       	ldd	r24, Y+51	; 0x33
     dba:	9c a9       	ldd	r25, Y+52	; 0x34
     dbc:	20 e0       	ldi	r18, 0x00	; 0
     dbe:	3f ef       	ldi	r19, 0xFF	; 255
     dc0:	4f e7       	ldi	r20, 0x7F	; 127
     dc2:	57 e4       	ldi	r21, 0x47	; 71
     dc4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     dc8:	18 16       	cp	r1, r24
     dca:	4c f5       	brge	.+82     	; 0xe1e <LDR_RECIVE+0x26e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     dcc:	6d a9       	ldd	r22, Y+53	; 0x35
     dce:	7e a9       	ldd	r23, Y+54	; 0x36
     dd0:	8f a9       	ldd	r24, Y+55	; 0x37
     dd2:	98 ad       	ldd	r25, Y+56	; 0x38
     dd4:	20 e0       	ldi	r18, 0x00	; 0
     dd6:	30 e0       	ldi	r19, 0x00	; 0
     dd8:	40 e2       	ldi	r20, 0x20	; 32
     dda:	51 e4       	ldi	r21, 0x41	; 65
     ddc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     de0:	dc 01       	movw	r26, r24
     de2:	cb 01       	movw	r24, r22
     de4:	bc 01       	movw	r22, r24
     de6:	cd 01       	movw	r24, r26
     de8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     dec:	dc 01       	movw	r26, r24
     dee:	cb 01       	movw	r24, r22
     df0:	98 ab       	std	Y+48, r25	; 0x30
     df2:	8f a7       	std	Y+47, r24	; 0x2f
     df4:	0f c0       	rjmp	.+30     	; 0xe14 <LDR_RECIVE+0x264>
     df6:	80 e9       	ldi	r24, 0x90	; 144
     df8:	91 e0       	ldi	r25, 0x01	; 1
     dfa:	9e a7       	std	Y+46, r25	; 0x2e
     dfc:	8d a7       	std	Y+45, r24	; 0x2d
     dfe:	8d a5       	ldd	r24, Y+45	; 0x2d
     e00:	9e a5       	ldd	r25, Y+46	; 0x2e
     e02:	01 97       	sbiw	r24, 0x01	; 1
     e04:	f1 f7       	brne	.-4      	; 0xe02 <LDR_RECIVE+0x252>
     e06:	9e a7       	std	Y+46, r25	; 0x2e
     e08:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e0a:	8f a5       	ldd	r24, Y+47	; 0x2f
     e0c:	98 a9       	ldd	r25, Y+48	; 0x30
     e0e:	01 97       	sbiw	r24, 0x01	; 1
     e10:	98 ab       	std	Y+48, r25	; 0x30
     e12:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e14:	8f a5       	ldd	r24, Y+47	; 0x2f
     e16:	98 a9       	ldd	r25, Y+48	; 0x30
     e18:	00 97       	sbiw	r24, 0x00	; 0
     e1a:	69 f7       	brne	.-38     	; 0xdf6 <LDR_RECIVE+0x246>
     e1c:	14 c0       	rjmp	.+40     	; 0xe46 <LDR_RECIVE+0x296>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e1e:	69 a9       	ldd	r22, Y+49	; 0x31
     e20:	7a a9       	ldd	r23, Y+50	; 0x32
     e22:	8b a9       	ldd	r24, Y+51	; 0x33
     e24:	9c a9       	ldd	r25, Y+52	; 0x34
     e26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e2a:	dc 01       	movw	r26, r24
     e2c:	cb 01       	movw	r24, r22
     e2e:	98 ab       	std	Y+48, r25	; 0x30
     e30:	8f a7       	std	Y+47, r24	; 0x2f
     e32:	8f a5       	ldd	r24, Y+47	; 0x2f
     e34:	98 a9       	ldd	r25, Y+48	; 0x30
     e36:	9c a7       	std	Y+44, r25	; 0x2c
     e38:	8b a7       	std	Y+43, r24	; 0x2b
     e3a:	8b a5       	ldd	r24, Y+43	; 0x2b
     e3c:	9c a5       	ldd	r25, Y+44	; 0x2c
     e3e:	01 97       	sbiw	r24, 0x01	; 1
     e40:	f1 f7       	brne	.-4      	; 0xe3e <LDR_RECIVE+0x28e>
     e42:	9c a7       	std	Y+44, r25	; 0x2c
     e44:	8b a7       	std	Y+43, r24	; 0x2b

		LCD_intgerToString(i);
		_delay_ms(500);

	}
	while (morth_counter != 1) {
     e46:	80 91 a4 00 	lds	r24, 0x00A4
     e4a:	81 30       	cpi	r24, 0x01	; 1
     e4c:	09 f0       	breq	.+2      	; 0xe50 <LDR_RECIVE+0x2a0>
     e4e:	7d cf       	rjmp	.-262    	; 0xd4a <LDR_RECIVE+0x19a>

		}

	}

	LCD_clearScreen();
     e50:	0e 94 e8 1c 	call	0x39d0	; 0x39d0 <LCD_clearScreen>
     e54:	94 c0       	rjmp	.+296    	; 0xf7e <LDR_RECIVE+0x3ce>
	while (data_counter != 2) {
		morth_counter++;
     e56:	80 91 a4 00 	lds	r24, 0x00A4
     e5a:	8f 5f       	subi	r24, 0xFF	; 255
     e5c:	80 93 a4 00 	sts	0x00A4, r24
		if (GPIO_readPin(LDR_PORT_ID, LDR_PIN_ID) == LOGIC_LOW) {
     e60:	81 e0       	ldi	r24, 0x01	; 1
     e62:	60 e0       	ldi	r22, 0x00	; 0
     e64:	0e 94 31 11 	call	0x2262	; 0x2262 <GPIO_readPin>
     e68:	88 23       	and	r24, r24
     e6a:	51 f4       	brne	.+20     	; 0xe80 <LDR_RECIVE+0x2d0>
			data[data_counter] = 1;
     e6c:	80 91 a5 00 	lds	r24, 0x00A5
     e70:	88 2f       	mov	r24, r24
     e72:	90 e0       	ldi	r25, 0x00	; 0
     e74:	fc 01       	movw	r30, r24
     e76:	e9 55       	subi	r30, 0x59	; 89
     e78:	ff 4f       	sbci	r31, 0xFF	; 255
     e7a:	81 e0       	ldi	r24, 0x01	; 1
     e7c:	80 83       	st	Z, r24
     e7e:	08 c0       	rjmp	.+16     	; 0xe90 <LDR_RECIVE+0x2e0>
		} else {
			data[data_counter] = 0;
     e80:	80 91 a5 00 	lds	r24, 0x00A5
     e84:	88 2f       	mov	r24, r24
     e86:	90 e0       	ldi	r25, 0x00	; 0
     e88:	fc 01       	movw	r30, r24
     e8a:	e9 55       	subi	r30, 0x59	; 89
     e8c:	ff 4f       	sbci	r31, 0xFF	; 255
     e8e:	10 82       	st	Z, r1
		}
		data_counter++;
     e90:	80 91 a5 00 	lds	r24, 0x00A5
     e94:	8f 5f       	subi	r24, 0xFF	; 255
     e96:	80 93 a5 00 	sts	0x00A5, r24
     e9a:	80 e0       	ldi	r24, 0x00	; 0
     e9c:	90 e0       	ldi	r25, 0x00	; 0
     e9e:	aa e7       	ldi	r26, 0x7A	; 122
     ea0:	b4 e4       	ldi	r27, 0x44	; 68
     ea2:	8f a3       	std	Y+39, r24	; 0x27
     ea4:	98 a7       	std	Y+40, r25	; 0x28
     ea6:	a9 a7       	std	Y+41, r26	; 0x29
     ea8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     eaa:	6f a1       	ldd	r22, Y+39	; 0x27
     eac:	78 a5       	ldd	r23, Y+40	; 0x28
     eae:	89 a5       	ldd	r24, Y+41	; 0x29
     eb0:	9a a5       	ldd	r25, Y+42	; 0x2a
     eb2:	20 e0       	ldi	r18, 0x00	; 0
     eb4:	30 e0       	ldi	r19, 0x00	; 0
     eb6:	4a e7       	ldi	r20, 0x7A	; 122
     eb8:	55 e4       	ldi	r21, 0x45	; 69
     eba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ebe:	dc 01       	movw	r26, r24
     ec0:	cb 01       	movw	r24, r22
     ec2:	8b a3       	std	Y+35, r24	; 0x23
     ec4:	9c a3       	std	Y+36, r25	; 0x24
     ec6:	ad a3       	std	Y+37, r26	; 0x25
     ec8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     eca:	6b a1       	ldd	r22, Y+35	; 0x23
     ecc:	7c a1       	ldd	r23, Y+36	; 0x24
     ece:	8d a1       	ldd	r24, Y+37	; 0x25
     ed0:	9e a1       	ldd	r25, Y+38	; 0x26
     ed2:	20 e0       	ldi	r18, 0x00	; 0
     ed4:	30 e0       	ldi	r19, 0x00	; 0
     ed6:	40 e8       	ldi	r20, 0x80	; 128
     ed8:	5f e3       	ldi	r21, 0x3F	; 63
     eda:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     ede:	88 23       	and	r24, r24
     ee0:	2c f4       	brge	.+10     	; 0xeec <LDR_RECIVE+0x33c>
		__ticks = 1;
     ee2:	81 e0       	ldi	r24, 0x01	; 1
     ee4:	90 e0       	ldi	r25, 0x00	; 0
     ee6:	9a a3       	std	Y+34, r25	; 0x22
     ee8:	89 a3       	std	Y+33, r24	; 0x21
     eea:	3f c0       	rjmp	.+126    	; 0xf6a <LDR_RECIVE+0x3ba>
	else if (__tmp > 65535)
     eec:	6b a1       	ldd	r22, Y+35	; 0x23
     eee:	7c a1       	ldd	r23, Y+36	; 0x24
     ef0:	8d a1       	ldd	r24, Y+37	; 0x25
     ef2:	9e a1       	ldd	r25, Y+38	; 0x26
     ef4:	20 e0       	ldi	r18, 0x00	; 0
     ef6:	3f ef       	ldi	r19, 0xFF	; 255
     ef8:	4f e7       	ldi	r20, 0x7F	; 127
     efa:	57 e4       	ldi	r21, 0x47	; 71
     efc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f00:	18 16       	cp	r1, r24
     f02:	4c f5       	brge	.+82     	; 0xf56 <LDR_RECIVE+0x3a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f04:	6f a1       	ldd	r22, Y+39	; 0x27
     f06:	78 a5       	ldd	r23, Y+40	; 0x28
     f08:	89 a5       	ldd	r24, Y+41	; 0x29
     f0a:	9a a5       	ldd	r25, Y+42	; 0x2a
     f0c:	20 e0       	ldi	r18, 0x00	; 0
     f0e:	30 e0       	ldi	r19, 0x00	; 0
     f10:	40 e2       	ldi	r20, 0x20	; 32
     f12:	51 e4       	ldi	r21, 0x41	; 65
     f14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f18:	dc 01       	movw	r26, r24
     f1a:	cb 01       	movw	r24, r22
     f1c:	bc 01       	movw	r22, r24
     f1e:	cd 01       	movw	r24, r26
     f20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f24:	dc 01       	movw	r26, r24
     f26:	cb 01       	movw	r24, r22
     f28:	9a a3       	std	Y+34, r25	; 0x22
     f2a:	89 a3       	std	Y+33, r24	; 0x21
     f2c:	0f c0       	rjmp	.+30     	; 0xf4c <LDR_RECIVE+0x39c>
     f2e:	80 e9       	ldi	r24, 0x90	; 144
     f30:	91 e0       	ldi	r25, 0x01	; 1
     f32:	98 a3       	std	Y+32, r25	; 0x20
     f34:	8f 8f       	std	Y+31, r24	; 0x1f
     f36:	8f 8d       	ldd	r24, Y+31	; 0x1f
     f38:	98 a1       	ldd	r25, Y+32	; 0x20
     f3a:	01 97       	sbiw	r24, 0x01	; 1
     f3c:	f1 f7       	brne	.-4      	; 0xf3a <LDR_RECIVE+0x38a>
     f3e:	98 a3       	std	Y+32, r25	; 0x20
     f40:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f42:	89 a1       	ldd	r24, Y+33	; 0x21
     f44:	9a a1       	ldd	r25, Y+34	; 0x22
     f46:	01 97       	sbiw	r24, 0x01	; 1
     f48:	9a a3       	std	Y+34, r25	; 0x22
     f4a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f4c:	89 a1       	ldd	r24, Y+33	; 0x21
     f4e:	9a a1       	ldd	r25, Y+34	; 0x22
     f50:	00 97       	sbiw	r24, 0x00	; 0
     f52:	69 f7       	brne	.-38     	; 0xf2e <LDR_RECIVE+0x37e>
     f54:	14 c0       	rjmp	.+40     	; 0xf7e <LDR_RECIVE+0x3ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f56:	6b a1       	ldd	r22, Y+35	; 0x23
     f58:	7c a1       	ldd	r23, Y+36	; 0x24
     f5a:	8d a1       	ldd	r24, Y+37	; 0x25
     f5c:	9e a1       	ldd	r25, Y+38	; 0x26
     f5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f62:	dc 01       	movw	r26, r24
     f64:	cb 01       	movw	r24, r22
     f66:	9a a3       	std	Y+34, r25	; 0x22
     f68:	89 a3       	std	Y+33, r24	; 0x21
     f6a:	89 a1       	ldd	r24, Y+33	; 0x21
     f6c:	9a a1       	ldd	r25, Y+34	; 0x22
     f6e:	9e 8f       	std	Y+30, r25	; 0x1e
     f70:	8d 8f       	std	Y+29, r24	; 0x1d
     f72:	8d 8d       	ldd	r24, Y+29	; 0x1d
     f74:	9e 8d       	ldd	r25, Y+30	; 0x1e
     f76:	01 97       	sbiw	r24, 0x01	; 1
     f78:	f1 f7       	brne	.-4      	; 0xf76 <LDR_RECIVE+0x3c6>
     f7a:	9e 8f       	std	Y+30, r25	; 0x1e
     f7c:	8d 8f       	std	Y+29, r24	; 0x1d
		}

	}

	LCD_clearScreen();
	while (data_counter != 2) {
     f7e:	80 91 a5 00 	lds	r24, 0x00A5
     f82:	82 30       	cpi	r24, 0x02	; 2
     f84:	09 f0       	breq	.+2      	; 0xf88 <LDR_RECIVE+0x3d8>
     f86:	67 cf       	rjmp	.-306    	; 0xe56 <LDR_RECIVE+0x2a6>
     f88:	7e c0       	rjmp	.+252    	; 0x1086 <LDR_RECIVE+0x4d6>
		data_counter++;
		_delay_ms(1000);

	}
	while (morth_counter < 3) {
		if (GPIO_readPin(LDR_PORT_ID, LDR_PIN_ID) == LOGIC_LOW)
     f8a:	81 e0       	ldi	r24, 0x01	; 1
     f8c:	60 e0       	ldi	r22, 0x00	; 0
     f8e:	0e 94 31 11 	call	0x2262	; 0x2262 <GPIO_readPin>
     f92:	88 23       	and	r24, r24
     f94:	09 f0       	breq	.+2      	; 0xf98 <LDR_RECIVE+0x3e8>
     f96:	77 c0       	rjmp	.+238    	; 0x1086 <LDR_RECIVE+0x4d6>
     f98:	80 e0       	ldi	r24, 0x00	; 0
     f9a:	90 e0       	ldi	r25, 0x00	; 0
     f9c:	aa e7       	ldi	r26, 0x7A	; 122
     f9e:	b4 e4       	ldi	r27, 0x44	; 68
     fa0:	89 8f       	std	Y+25, r24	; 0x19
     fa2:	9a 8f       	std	Y+26, r25	; 0x1a
     fa4:	ab 8f       	std	Y+27, r26	; 0x1b
     fa6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fa8:	69 8d       	ldd	r22, Y+25	; 0x19
     faa:	7a 8d       	ldd	r23, Y+26	; 0x1a
     fac:	8b 8d       	ldd	r24, Y+27	; 0x1b
     fae:	9c 8d       	ldd	r25, Y+28	; 0x1c
     fb0:	20 e0       	ldi	r18, 0x00	; 0
     fb2:	30 e0       	ldi	r19, 0x00	; 0
     fb4:	4a e7       	ldi	r20, 0x7A	; 122
     fb6:	55 e4       	ldi	r21, 0x45	; 69
     fb8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fbc:	dc 01       	movw	r26, r24
     fbe:	cb 01       	movw	r24, r22
     fc0:	8d 8b       	std	Y+21, r24	; 0x15
     fc2:	9e 8b       	std	Y+22, r25	; 0x16
     fc4:	af 8b       	std	Y+23, r26	; 0x17
     fc6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     fc8:	6d 89       	ldd	r22, Y+21	; 0x15
     fca:	7e 89       	ldd	r23, Y+22	; 0x16
     fcc:	8f 89       	ldd	r24, Y+23	; 0x17
     fce:	98 8d       	ldd	r25, Y+24	; 0x18
     fd0:	20 e0       	ldi	r18, 0x00	; 0
     fd2:	30 e0       	ldi	r19, 0x00	; 0
     fd4:	40 e8       	ldi	r20, 0x80	; 128
     fd6:	5f e3       	ldi	r21, 0x3F	; 63
     fd8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     fdc:	88 23       	and	r24, r24
     fde:	2c f4       	brge	.+10     	; 0xfea <LDR_RECIVE+0x43a>
		__ticks = 1;
     fe0:	81 e0       	ldi	r24, 0x01	; 1
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	9c 8b       	std	Y+20, r25	; 0x14
     fe6:	8b 8b       	std	Y+19, r24	; 0x13
     fe8:	3f c0       	rjmp	.+126    	; 0x1068 <LDR_RECIVE+0x4b8>
	else if (__tmp > 65535)
     fea:	6d 89       	ldd	r22, Y+21	; 0x15
     fec:	7e 89       	ldd	r23, Y+22	; 0x16
     fee:	8f 89       	ldd	r24, Y+23	; 0x17
     ff0:	98 8d       	ldd	r25, Y+24	; 0x18
     ff2:	20 e0       	ldi	r18, 0x00	; 0
     ff4:	3f ef       	ldi	r19, 0xFF	; 255
     ff6:	4f e7       	ldi	r20, 0x7F	; 127
     ff8:	57 e4       	ldi	r21, 0x47	; 71
     ffa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     ffe:	18 16       	cp	r1, r24
    1000:	4c f5       	brge	.+82     	; 0x1054 <LDR_RECIVE+0x4a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1002:	69 8d       	ldd	r22, Y+25	; 0x19
    1004:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1006:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1008:	9c 8d       	ldd	r25, Y+28	; 0x1c
    100a:	20 e0       	ldi	r18, 0x00	; 0
    100c:	30 e0       	ldi	r19, 0x00	; 0
    100e:	40 e2       	ldi	r20, 0x20	; 32
    1010:	51 e4       	ldi	r21, 0x41	; 65
    1012:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1016:	dc 01       	movw	r26, r24
    1018:	cb 01       	movw	r24, r22
    101a:	bc 01       	movw	r22, r24
    101c:	cd 01       	movw	r24, r26
    101e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1022:	dc 01       	movw	r26, r24
    1024:	cb 01       	movw	r24, r22
    1026:	9c 8b       	std	Y+20, r25	; 0x14
    1028:	8b 8b       	std	Y+19, r24	; 0x13
    102a:	0f c0       	rjmp	.+30     	; 0x104a <LDR_RECIVE+0x49a>
    102c:	80 e9       	ldi	r24, 0x90	; 144
    102e:	91 e0       	ldi	r25, 0x01	; 1
    1030:	9a 8b       	std	Y+18, r25	; 0x12
    1032:	89 8b       	std	Y+17, r24	; 0x11
    1034:	89 89       	ldd	r24, Y+17	; 0x11
    1036:	9a 89       	ldd	r25, Y+18	; 0x12
    1038:	01 97       	sbiw	r24, 0x01	; 1
    103a:	f1 f7       	brne	.-4      	; 0x1038 <LDR_RECIVE+0x488>
    103c:	9a 8b       	std	Y+18, r25	; 0x12
    103e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1040:	8b 89       	ldd	r24, Y+19	; 0x13
    1042:	9c 89       	ldd	r25, Y+20	; 0x14
    1044:	01 97       	sbiw	r24, 0x01	; 1
    1046:	9c 8b       	std	Y+20, r25	; 0x14
    1048:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    104a:	8b 89       	ldd	r24, Y+19	; 0x13
    104c:	9c 89       	ldd	r25, Y+20	; 0x14
    104e:	00 97       	sbiw	r24, 0x00	; 0
    1050:	69 f7       	brne	.-38     	; 0x102c <LDR_RECIVE+0x47c>
    1052:	14 c0       	rjmp	.+40     	; 0x107c <LDR_RECIVE+0x4cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1054:	6d 89       	ldd	r22, Y+21	; 0x15
    1056:	7e 89       	ldd	r23, Y+22	; 0x16
    1058:	8f 89       	ldd	r24, Y+23	; 0x17
    105a:	98 8d       	ldd	r25, Y+24	; 0x18
    105c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1060:	dc 01       	movw	r26, r24
    1062:	cb 01       	movw	r24, r22
    1064:	9c 8b       	std	Y+20, r25	; 0x14
    1066:	8b 8b       	std	Y+19, r24	; 0x13
    1068:	8b 89       	ldd	r24, Y+19	; 0x13
    106a:	9c 89       	ldd	r25, Y+20	; 0x14
    106c:	98 8b       	std	Y+16, r25	; 0x10
    106e:	8f 87       	std	Y+15, r24	; 0x0f
    1070:	8f 85       	ldd	r24, Y+15	; 0x0f
    1072:	98 89       	ldd	r25, Y+16	; 0x10
    1074:	01 97       	sbiw	r24, 0x01	; 1
    1076:	f1 f7       	brne	.-4      	; 0x1074 <LDR_RECIVE+0x4c4>
    1078:	98 8b       	std	Y+16, r25	; 0x10
    107a:	8f 87       	std	Y+15, r24	; 0x0f
		{
			_delay_ms(1000);
			morth_counter++;
    107c:	80 91 a4 00 	lds	r24, 0x00A4
    1080:	8f 5f       	subi	r24, 0xFF	; 255
    1082:	80 93 a4 00 	sts	0x00A4, r24
		}
		data_counter++;
		_delay_ms(1000);

	}
	while (morth_counter < 3) {
    1086:	80 91 a4 00 	lds	r24, 0x00A4
    108a:	83 30       	cpi	r24, 0x03	; 3
    108c:	08 f4       	brcc	.+2      	; 0x1090 <LDR_RECIVE+0x4e0>
    108e:	7d cf       	rjmp	.-262    	; 0xf8a <LDR_RECIVE+0x3da>
			_delay_ms(1000);
			morth_counter++;
		}

	}
	for (char i = 0; i < 2; i++) {
    1090:	fe 01       	movw	r30, r28
    1092:	e8 5b       	subi	r30, 0xB8	; 184
    1094:	ff 4f       	sbci	r31, 0xFF	; 255
    1096:	10 82       	st	Z, r1
    1098:	89 c0       	rjmp	.+274    	; 0x11ac <LDR_RECIVE+0x5fc>
		LCD_intgerToString(data[i]);
    109a:	fe 01       	movw	r30, r28
    109c:	e8 5b       	subi	r30, 0xB8	; 184
    109e:	ff 4f       	sbci	r31, 0xFF	; 255
    10a0:	80 81       	ld	r24, Z
    10a2:	88 2f       	mov	r24, r24
    10a4:	90 e0       	ldi	r25, 0x00	; 0
    10a6:	fc 01       	movw	r30, r24
    10a8:	e9 55       	subi	r30, 0x59	; 89
    10aa:	ff 4f       	sbci	r31, 0xFF	; 255
    10ac:	80 81       	ld	r24, Z
    10ae:	88 2f       	mov	r24, r24
    10b0:	90 e0       	ldi	r25, 0x00	; 0
    10b2:	0e 94 c5 1c 	call	0x398a	; 0x398a <LCD_intgerToString>
    10b6:	80 e0       	ldi	r24, 0x00	; 0
    10b8:	90 e0       	ldi	r25, 0x00	; 0
    10ba:	aa e7       	ldi	r26, 0x7A	; 122
    10bc:	b4 e4       	ldi	r27, 0x44	; 68
    10be:	8b 87       	std	Y+11, r24	; 0x0b
    10c0:	9c 87       	std	Y+12, r25	; 0x0c
    10c2:	ad 87       	std	Y+13, r26	; 0x0d
    10c4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10c6:	6b 85       	ldd	r22, Y+11	; 0x0b
    10c8:	7c 85       	ldd	r23, Y+12	; 0x0c
    10ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    10cc:	9e 85       	ldd	r25, Y+14	; 0x0e
    10ce:	20 e0       	ldi	r18, 0x00	; 0
    10d0:	30 e0       	ldi	r19, 0x00	; 0
    10d2:	4a e7       	ldi	r20, 0x7A	; 122
    10d4:	55 e4       	ldi	r21, 0x45	; 69
    10d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10da:	dc 01       	movw	r26, r24
    10dc:	cb 01       	movw	r24, r22
    10de:	8f 83       	std	Y+7, r24	; 0x07
    10e0:	98 87       	std	Y+8, r25	; 0x08
    10e2:	a9 87       	std	Y+9, r26	; 0x09
    10e4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    10e6:	6f 81       	ldd	r22, Y+7	; 0x07
    10e8:	78 85       	ldd	r23, Y+8	; 0x08
    10ea:	89 85       	ldd	r24, Y+9	; 0x09
    10ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    10ee:	20 e0       	ldi	r18, 0x00	; 0
    10f0:	30 e0       	ldi	r19, 0x00	; 0
    10f2:	40 e8       	ldi	r20, 0x80	; 128
    10f4:	5f e3       	ldi	r21, 0x3F	; 63
    10f6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    10fa:	88 23       	and	r24, r24
    10fc:	2c f4       	brge	.+10     	; 0x1108 <LDR_RECIVE+0x558>
		__ticks = 1;
    10fe:	81 e0       	ldi	r24, 0x01	; 1
    1100:	90 e0       	ldi	r25, 0x00	; 0
    1102:	9e 83       	std	Y+6, r25	; 0x06
    1104:	8d 83       	std	Y+5, r24	; 0x05
    1106:	3f c0       	rjmp	.+126    	; 0x1186 <LDR_RECIVE+0x5d6>
	else if (__tmp > 65535)
    1108:	6f 81       	ldd	r22, Y+7	; 0x07
    110a:	78 85       	ldd	r23, Y+8	; 0x08
    110c:	89 85       	ldd	r24, Y+9	; 0x09
    110e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1110:	20 e0       	ldi	r18, 0x00	; 0
    1112:	3f ef       	ldi	r19, 0xFF	; 255
    1114:	4f e7       	ldi	r20, 0x7F	; 127
    1116:	57 e4       	ldi	r21, 0x47	; 71
    1118:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    111c:	18 16       	cp	r1, r24
    111e:	4c f5       	brge	.+82     	; 0x1172 <LDR_RECIVE+0x5c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1120:	6b 85       	ldd	r22, Y+11	; 0x0b
    1122:	7c 85       	ldd	r23, Y+12	; 0x0c
    1124:	8d 85       	ldd	r24, Y+13	; 0x0d
    1126:	9e 85       	ldd	r25, Y+14	; 0x0e
    1128:	20 e0       	ldi	r18, 0x00	; 0
    112a:	30 e0       	ldi	r19, 0x00	; 0
    112c:	40 e2       	ldi	r20, 0x20	; 32
    112e:	51 e4       	ldi	r21, 0x41	; 65
    1130:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1134:	dc 01       	movw	r26, r24
    1136:	cb 01       	movw	r24, r22
    1138:	bc 01       	movw	r22, r24
    113a:	cd 01       	movw	r24, r26
    113c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1140:	dc 01       	movw	r26, r24
    1142:	cb 01       	movw	r24, r22
    1144:	9e 83       	std	Y+6, r25	; 0x06
    1146:	8d 83       	std	Y+5, r24	; 0x05
    1148:	0f c0       	rjmp	.+30     	; 0x1168 <LDR_RECIVE+0x5b8>
    114a:	80 e9       	ldi	r24, 0x90	; 144
    114c:	91 e0       	ldi	r25, 0x01	; 1
    114e:	9c 83       	std	Y+4, r25	; 0x04
    1150:	8b 83       	std	Y+3, r24	; 0x03
    1152:	8b 81       	ldd	r24, Y+3	; 0x03
    1154:	9c 81       	ldd	r25, Y+4	; 0x04
    1156:	01 97       	sbiw	r24, 0x01	; 1
    1158:	f1 f7       	brne	.-4      	; 0x1156 <LDR_RECIVE+0x5a6>
    115a:	9c 83       	std	Y+4, r25	; 0x04
    115c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    115e:	8d 81       	ldd	r24, Y+5	; 0x05
    1160:	9e 81       	ldd	r25, Y+6	; 0x06
    1162:	01 97       	sbiw	r24, 0x01	; 1
    1164:	9e 83       	std	Y+6, r25	; 0x06
    1166:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1168:	8d 81       	ldd	r24, Y+5	; 0x05
    116a:	9e 81       	ldd	r25, Y+6	; 0x06
    116c:	00 97       	sbiw	r24, 0x00	; 0
    116e:	69 f7       	brne	.-38     	; 0x114a <LDR_RECIVE+0x59a>
    1170:	14 c0       	rjmp	.+40     	; 0x119a <LDR_RECIVE+0x5ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1172:	6f 81       	ldd	r22, Y+7	; 0x07
    1174:	78 85       	ldd	r23, Y+8	; 0x08
    1176:	89 85       	ldd	r24, Y+9	; 0x09
    1178:	9a 85       	ldd	r25, Y+10	; 0x0a
    117a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    117e:	dc 01       	movw	r26, r24
    1180:	cb 01       	movw	r24, r22
    1182:	9e 83       	std	Y+6, r25	; 0x06
    1184:	8d 83       	std	Y+5, r24	; 0x05
    1186:	8d 81       	ldd	r24, Y+5	; 0x05
    1188:	9e 81       	ldd	r25, Y+6	; 0x06
    118a:	9a 83       	std	Y+2, r25	; 0x02
    118c:	89 83       	std	Y+1, r24	; 0x01
    118e:	89 81       	ldd	r24, Y+1	; 0x01
    1190:	9a 81       	ldd	r25, Y+2	; 0x02
    1192:	01 97       	sbiw	r24, 0x01	; 1
    1194:	f1 f7       	brne	.-4      	; 0x1192 <LDR_RECIVE+0x5e2>
    1196:	9a 83       	std	Y+2, r25	; 0x02
    1198:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(1000);
			morth_counter++;
		}

	}
	for (char i = 0; i < 2; i++) {
    119a:	de 01       	movw	r26, r28
    119c:	a8 5b       	subi	r26, 0xB8	; 184
    119e:	bf 4f       	sbci	r27, 0xFF	; 255
    11a0:	fe 01       	movw	r30, r28
    11a2:	e8 5b       	subi	r30, 0xB8	; 184
    11a4:	ff 4f       	sbci	r31, 0xFF	; 255
    11a6:	80 81       	ld	r24, Z
    11a8:	8f 5f       	subi	r24, 0xFF	; 255
    11aa:	8c 93       	st	X, r24
    11ac:	fe 01       	movw	r30, r28
    11ae:	e8 5b       	subi	r30, 0xB8	; 184
    11b0:	ff 4f       	sbci	r31, 0xFF	; 255
    11b2:	80 81       	ld	r24, Z
    11b4:	82 30       	cpi	r24, 0x02	; 2
    11b6:	08 f4       	brcc	.+2      	; 0x11ba <LDR_RECIVE+0x60a>
    11b8:	70 cf       	rjmp	.-288    	; 0x109a <LDR_RECIVE+0x4ea>
		LCD_intgerToString(data[i]);
		_delay_ms(1000);
	}
	for (uint8 i = 0; i < 3; i++) {
    11ba:	fe 01       	movw	r30, r28
    11bc:	e9 5b       	subi	r30, 0xB9	; 185
    11be:	ff 4f       	sbci	r31, 0xFF	; 255
    11c0:	10 82       	st	Z, r1
    11c2:	2c c0       	rjmp	.+88     	; 0x121c <LDR_RECIVE+0x66c>
		temp = temp | (data[i] << i);
    11c4:	fe 01       	movw	r30, r28
    11c6:	e9 5b       	subi	r30, 0xB9	; 185
    11c8:	ff 4f       	sbci	r31, 0xFF	; 255
    11ca:	80 81       	ld	r24, Z
    11cc:	88 2f       	mov	r24, r24
    11ce:	90 e0       	ldi	r25, 0x00	; 0
    11d0:	fc 01       	movw	r30, r24
    11d2:	e9 55       	subi	r30, 0x59	; 89
    11d4:	ff 4f       	sbci	r31, 0xFF	; 255
    11d6:	80 81       	ld	r24, Z
    11d8:	28 2f       	mov	r18, r24
    11da:	30 e0       	ldi	r19, 0x00	; 0
    11dc:	fe 01       	movw	r30, r28
    11de:	e9 5b       	subi	r30, 0xB9	; 185
    11e0:	ff 4f       	sbci	r31, 0xFF	; 255
    11e2:	80 81       	ld	r24, Z
    11e4:	88 2f       	mov	r24, r24
    11e6:	90 e0       	ldi	r25, 0x00	; 0
    11e8:	a9 01       	movw	r20, r18
    11ea:	02 c0       	rjmp	.+4      	; 0x11f0 <LDR_RECIVE+0x640>
    11ec:	44 0f       	add	r20, r20
    11ee:	55 1f       	adc	r21, r21
    11f0:	8a 95       	dec	r24
    11f2:	e2 f7       	brpl	.-8      	; 0x11ec <LDR_RECIVE+0x63c>
    11f4:	ca 01       	movw	r24, r20
    11f6:	98 2f       	mov	r25, r24
    11f8:	fe 01       	movw	r30, r28
    11fa:	e5 5b       	subi	r30, 0xB5	; 181
    11fc:	ff 4f       	sbci	r31, 0xFF	; 255
    11fe:	80 81       	ld	r24, Z
    1200:	89 2b       	or	r24, r25
    1202:	fe 01       	movw	r30, r28
    1204:	e5 5b       	subi	r30, 0xB5	; 181
    1206:	ff 4f       	sbci	r31, 0xFF	; 255
    1208:	80 83       	st	Z, r24
	}
	for (char i = 0; i < 2; i++) {
		LCD_intgerToString(data[i]);
		_delay_ms(1000);
	}
	for (uint8 i = 0; i < 3; i++) {
    120a:	de 01       	movw	r26, r28
    120c:	a9 5b       	subi	r26, 0xB9	; 185
    120e:	bf 4f       	sbci	r27, 0xFF	; 255
    1210:	fe 01       	movw	r30, r28
    1212:	e9 5b       	subi	r30, 0xB9	; 185
    1214:	ff 4f       	sbci	r31, 0xFF	; 255
    1216:	80 81       	ld	r24, Z
    1218:	8f 5f       	subi	r24, 0xFF	; 255
    121a:	8c 93       	st	X, r24
    121c:	fe 01       	movw	r30, r28
    121e:	e9 5b       	subi	r30, 0xB9	; 185
    1220:	ff 4f       	sbci	r31, 0xFF	; 255
    1222:	80 81       	ld	r24, Z
    1224:	83 30       	cpi	r24, 0x03	; 3
    1226:	70 f2       	brcs	.-100    	; 0x11c4 <LDR_RECIVE+0x614>
		temp = temp | (data[i] << i);
	}
	return temp;
    1228:	fe 01       	movw	r30, r28
    122a:	e5 5b       	subi	r30, 0xB5	; 181
    122c:	ff 4f       	sbci	r31, 0xFF	; 255
    122e:	80 81       	ld	r24, Z
}
    1230:	c5 5b       	subi	r28, 0xB5	; 181
    1232:	df 4f       	sbci	r29, 0xFF	; 255
    1234:	0f b6       	in	r0, 0x3f	; 63
    1236:	f8 94       	cli
    1238:	de bf       	out	0x3e, r29	; 62
    123a:	0f be       	out	0x3f, r0	; 63
    123c:	cd bf       	out	0x3d, r28	; 61
    123e:	cf 91       	pop	r28
    1240:	df 91       	pop	r29
    1242:	1f 91       	pop	r17
    1244:	0f 91       	pop	r16
    1246:	08 95       	ret

00001248 <main>:
 uint8 flag=0;

 */
uint8 data = 0;

int main(void) {
    1248:	0f 93       	push	r16
    124a:	1f 93       	push	r17
    124c:	df 93       	push	r29
    124e:	cf 93       	push	r28
    1250:	cd b7       	in	r28, 0x3d	; 61
    1252:	de b7       	in	r29, 0x3e	; 62
    1254:	ca 58       	subi	r28, 0x8A	; 138
    1256:	d0 40       	sbci	r29, 0x00	; 0
    1258:	0f b6       	in	r0, 0x3f	; 63
    125a:	f8 94       	cli
    125c:	de bf       	out	0x3e, r29	; 62
    125e:	0f be       	out	0x3f, r0	; 63
    1260:	cd bf       	out	0x3d, r28	; 61
	Buzzer_init();
    1262:	0e 94 a3 05 	call	0xb46	; 0xb46 <Buzzer_init>
	Led_init();
    1266:	0e 94 f2 1c 	call	0x39e4	; 0x39e4 <Led_init>
	LCD_init();
    126a:	0e 94 99 12 	call	0x2532	; 0x2532 <LCD_init>
	LDR_ON();
    126e:	0e 94 cc 05 	call	0xb98	; 0xb98 <LDR_ON>
	//Buzzer_on();
	while (1) {
		LCD_clearScreen();
    1272:	0e 94 e8 1c 	call	0x39d0	; 0x39d0 <LCD_clearScreen>
		data = 0;
    1276:	10 92 a7 00 	sts	0x00A7, r1
		 Buzzer_off();
		 Led_off();
		 break;
		 }
		 */
		for (int i = 0; i < 5; i++) {
    127a:	fe 01       	movw	r30, r28
    127c:	e7 57       	subi	r30, 0x77	; 119
    127e:	ff 4f       	sbci	r31, 0xFF	; 255
    1280:	11 82       	std	Z+1, r1	; 0x01
    1282:	10 82       	st	Z, r1
    1284:	bf c0       	rjmp	.+382    	; 0x1404 <main+0x1bc>
    1286:	fe 01       	movw	r30, r28
    1288:	e5 58       	subi	r30, 0x85	; 133
    128a:	ff 4f       	sbci	r31, 0xFF	; 255
    128c:	80 e0       	ldi	r24, 0x00	; 0
    128e:	90 e0       	ldi	r25, 0x00	; 0
    1290:	aa ef       	ldi	r26, 0xFA	; 250
    1292:	b4 e4       	ldi	r27, 0x44	; 68
    1294:	80 83       	st	Z, r24
    1296:	91 83       	std	Z+1, r25	; 0x01
    1298:	a2 83       	std	Z+2, r26	; 0x02
    129a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    129c:	8e 01       	movw	r16, r28
    129e:	09 58       	subi	r16, 0x89	; 137
    12a0:	1f 4f       	sbci	r17, 0xFF	; 255
    12a2:	fe 01       	movw	r30, r28
    12a4:	e5 58       	subi	r30, 0x85	; 133
    12a6:	ff 4f       	sbci	r31, 0xFF	; 255
    12a8:	60 81       	ld	r22, Z
    12aa:	71 81       	ldd	r23, Z+1	; 0x01
    12ac:	82 81       	ldd	r24, Z+2	; 0x02
    12ae:	93 81       	ldd	r25, Z+3	; 0x03
    12b0:	20 e0       	ldi	r18, 0x00	; 0
    12b2:	30 e0       	ldi	r19, 0x00	; 0
    12b4:	4a e7       	ldi	r20, 0x7A	; 122
    12b6:	55 e4       	ldi	r21, 0x45	; 69
    12b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12bc:	dc 01       	movw	r26, r24
    12be:	cb 01       	movw	r24, r22
    12c0:	f8 01       	movw	r30, r16
    12c2:	80 83       	st	Z, r24
    12c4:	91 83       	std	Z+1, r25	; 0x01
    12c6:	a2 83       	std	Z+2, r26	; 0x02
    12c8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    12ca:	fe 01       	movw	r30, r28
    12cc:	e9 58       	subi	r30, 0x89	; 137
    12ce:	ff 4f       	sbci	r31, 0xFF	; 255
    12d0:	60 81       	ld	r22, Z
    12d2:	71 81       	ldd	r23, Z+1	; 0x01
    12d4:	82 81       	ldd	r24, Z+2	; 0x02
    12d6:	93 81       	ldd	r25, Z+3	; 0x03
    12d8:	20 e0       	ldi	r18, 0x00	; 0
    12da:	30 e0       	ldi	r19, 0x00	; 0
    12dc:	40 e8       	ldi	r20, 0x80	; 128
    12de:	5f e3       	ldi	r21, 0x3F	; 63
    12e0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    12e4:	88 23       	and	r24, r24
    12e6:	44 f4       	brge	.+16     	; 0x12f8 <main+0xb0>
		__ticks = 1;
    12e8:	fe 01       	movw	r30, r28
    12ea:	eb 58       	subi	r30, 0x8B	; 139
    12ec:	ff 4f       	sbci	r31, 0xFF	; 255
    12ee:	81 e0       	ldi	r24, 0x01	; 1
    12f0:	90 e0       	ldi	r25, 0x00	; 0
    12f2:	91 83       	std	Z+1, r25	; 0x01
    12f4:	80 83       	st	Z, r24
    12f6:	64 c0       	rjmp	.+200    	; 0x13c0 <main+0x178>
	else if (__tmp > 65535)
    12f8:	fe 01       	movw	r30, r28
    12fa:	e9 58       	subi	r30, 0x89	; 137
    12fc:	ff 4f       	sbci	r31, 0xFF	; 255
    12fe:	60 81       	ld	r22, Z
    1300:	71 81       	ldd	r23, Z+1	; 0x01
    1302:	82 81       	ldd	r24, Z+2	; 0x02
    1304:	93 81       	ldd	r25, Z+3	; 0x03
    1306:	20 e0       	ldi	r18, 0x00	; 0
    1308:	3f ef       	ldi	r19, 0xFF	; 255
    130a:	4f e7       	ldi	r20, 0x7F	; 127
    130c:	57 e4       	ldi	r21, 0x47	; 71
    130e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1312:	18 16       	cp	r1, r24
    1314:	0c f0       	brlt	.+2      	; 0x1318 <main+0xd0>
    1316:	43 c0       	rjmp	.+134    	; 0x139e <main+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1318:	fe 01       	movw	r30, r28
    131a:	e5 58       	subi	r30, 0x85	; 133
    131c:	ff 4f       	sbci	r31, 0xFF	; 255
    131e:	60 81       	ld	r22, Z
    1320:	71 81       	ldd	r23, Z+1	; 0x01
    1322:	82 81       	ldd	r24, Z+2	; 0x02
    1324:	93 81       	ldd	r25, Z+3	; 0x03
    1326:	20 e0       	ldi	r18, 0x00	; 0
    1328:	30 e0       	ldi	r19, 0x00	; 0
    132a:	40 e2       	ldi	r20, 0x20	; 32
    132c:	51 e4       	ldi	r21, 0x41	; 65
    132e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1332:	dc 01       	movw	r26, r24
    1334:	cb 01       	movw	r24, r22
    1336:	8e 01       	movw	r16, r28
    1338:	0b 58       	subi	r16, 0x8B	; 139
    133a:	1f 4f       	sbci	r17, 0xFF	; 255
    133c:	bc 01       	movw	r22, r24
    133e:	cd 01       	movw	r24, r26
    1340:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1344:	dc 01       	movw	r26, r24
    1346:	cb 01       	movw	r24, r22
    1348:	f8 01       	movw	r30, r16
    134a:	91 83       	std	Z+1, r25	; 0x01
    134c:	80 83       	st	Z, r24
    134e:	1f c0       	rjmp	.+62     	; 0x138e <main+0x146>
    1350:	fe 01       	movw	r30, r28
    1352:	ed 58       	subi	r30, 0x8D	; 141
    1354:	ff 4f       	sbci	r31, 0xFF	; 255
    1356:	80 e9       	ldi	r24, 0x90	; 144
    1358:	91 e0       	ldi	r25, 0x01	; 1
    135a:	91 83       	std	Z+1, r25	; 0x01
    135c:	80 83       	st	Z, r24
    135e:	fe 01       	movw	r30, r28
    1360:	ed 58       	subi	r30, 0x8D	; 141
    1362:	ff 4f       	sbci	r31, 0xFF	; 255
    1364:	80 81       	ld	r24, Z
    1366:	91 81       	ldd	r25, Z+1	; 0x01
    1368:	01 97       	sbiw	r24, 0x01	; 1
    136a:	f1 f7       	brne	.-4      	; 0x1368 <main+0x120>
    136c:	fe 01       	movw	r30, r28
    136e:	ed 58       	subi	r30, 0x8D	; 141
    1370:	ff 4f       	sbci	r31, 0xFF	; 255
    1372:	91 83       	std	Z+1, r25	; 0x01
    1374:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1376:	de 01       	movw	r26, r28
    1378:	ab 58       	subi	r26, 0x8B	; 139
    137a:	bf 4f       	sbci	r27, 0xFF	; 255
    137c:	fe 01       	movw	r30, r28
    137e:	eb 58       	subi	r30, 0x8B	; 139
    1380:	ff 4f       	sbci	r31, 0xFF	; 255
    1382:	80 81       	ld	r24, Z
    1384:	91 81       	ldd	r25, Z+1	; 0x01
    1386:	01 97       	sbiw	r24, 0x01	; 1
    1388:	11 96       	adiw	r26, 0x01	; 1
    138a:	9c 93       	st	X, r25
    138c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    138e:	fe 01       	movw	r30, r28
    1390:	eb 58       	subi	r30, 0x8B	; 139
    1392:	ff 4f       	sbci	r31, 0xFF	; 255
    1394:	80 81       	ld	r24, Z
    1396:	91 81       	ldd	r25, Z+1	; 0x01
    1398:	00 97       	sbiw	r24, 0x00	; 0
    139a:	d1 f6       	brne	.-76     	; 0x1350 <main+0x108>
    139c:	27 c0       	rjmp	.+78     	; 0x13ec <main+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    139e:	8e 01       	movw	r16, r28
    13a0:	0b 58       	subi	r16, 0x8B	; 139
    13a2:	1f 4f       	sbci	r17, 0xFF	; 255
    13a4:	fe 01       	movw	r30, r28
    13a6:	e9 58       	subi	r30, 0x89	; 137
    13a8:	ff 4f       	sbci	r31, 0xFF	; 255
    13aa:	60 81       	ld	r22, Z
    13ac:	71 81       	ldd	r23, Z+1	; 0x01
    13ae:	82 81       	ldd	r24, Z+2	; 0x02
    13b0:	93 81       	ldd	r25, Z+3	; 0x03
    13b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13b6:	dc 01       	movw	r26, r24
    13b8:	cb 01       	movw	r24, r22
    13ba:	f8 01       	movw	r30, r16
    13bc:	91 83       	std	Z+1, r25	; 0x01
    13be:	80 83       	st	Z, r24
    13c0:	de 01       	movw	r26, r28
    13c2:	af 58       	subi	r26, 0x8F	; 143
    13c4:	bf 4f       	sbci	r27, 0xFF	; 255
    13c6:	fe 01       	movw	r30, r28
    13c8:	eb 58       	subi	r30, 0x8B	; 139
    13ca:	ff 4f       	sbci	r31, 0xFF	; 255
    13cc:	80 81       	ld	r24, Z
    13ce:	91 81       	ldd	r25, Z+1	; 0x01
    13d0:	8d 93       	st	X+, r24
    13d2:	9c 93       	st	X, r25
    13d4:	fe 01       	movw	r30, r28
    13d6:	ef 58       	subi	r30, 0x8F	; 143
    13d8:	ff 4f       	sbci	r31, 0xFF	; 255
    13da:	80 81       	ld	r24, Z
    13dc:	91 81       	ldd	r25, Z+1	; 0x01
    13de:	01 97       	sbiw	r24, 0x01	; 1
    13e0:	f1 f7       	brne	.-4      	; 0x13de <main+0x196>
    13e2:	fe 01       	movw	r30, r28
    13e4:	ef 58       	subi	r30, 0x8F	; 143
    13e6:	ff 4f       	sbci	r31, 0xFF	; 255
    13e8:	91 83       	std	Z+1, r25	; 0x01
    13ea:	80 83       	st	Z, r24
    13ec:	de 01       	movw	r26, r28
    13ee:	a7 57       	subi	r26, 0x77	; 119
    13f0:	bf 4f       	sbci	r27, 0xFF	; 255
    13f2:	fe 01       	movw	r30, r28
    13f4:	e7 57       	subi	r30, 0x77	; 119
    13f6:	ff 4f       	sbci	r31, 0xFF	; 255
    13f8:	80 81       	ld	r24, Z
    13fa:	91 81       	ldd	r25, Z+1	; 0x01
    13fc:	01 96       	adiw	r24, 0x01	; 1
    13fe:	11 96       	adiw	r26, 0x01	; 1
    1400:	9c 93       	st	X, r25
    1402:	8e 93       	st	-X, r24
    1404:	fe 01       	movw	r30, r28
    1406:	e7 57       	subi	r30, 0x77	; 119
    1408:	ff 4f       	sbci	r31, 0xFF	; 255
    140a:	80 81       	ld	r24, Z
    140c:	91 81       	ldd	r25, Z+1	; 0x01
    140e:	85 30       	cpi	r24, 0x05	; 5
    1410:	91 05       	cpc	r25, r1
    1412:	0c f4       	brge	.+2      	; 0x1416 <main+0x1ce>
    1414:	38 cf       	rjmp	.-400    	; 0x1286 <main+0x3e>
			_delay_ms(2000);
		}
		LCD_moveCursor(1, 0);
    1416:	81 e0       	ldi	r24, 0x01	; 1
    1418:	60 e0       	ldi	r22, 0x00	; 0
    141a:	0e 94 6a 1c 	call	0x38d4	; 0x38d4 <LCD_moveCursor>
		LCD_displayString("fire detected");\
    141e:	86 e6       	ldi	r24, 0x66	; 102
    1420:	90 e0       	ldi	r25, 0x00	; 0
    1422:	0e 94 41 1c 	call	0x3882	; 0x3882 <LCD_displayString>
		Buzzer_on();
    1426:	0e 94 b4 05 	call	0xb68	; 0xb68 <Buzzer_on>
		for (int i = 0; i < 5; i++) {
    142a:	fe 01       	movw	r30, r28
    142c:	e9 57       	subi	r30, 0x79	; 121
    142e:	ff 4f       	sbci	r31, 0xFF	; 255
    1430:	11 82       	std	Z+1, r1	; 0x01
    1432:	10 82       	st	Z, r1
    1434:	c7 c0       	rjmp	.+398    	; 0x15c4 <main+0x37c>
    1436:	fe 01       	movw	r30, r28
    1438:	e3 59       	subi	r30, 0x93	; 147
    143a:	ff 4f       	sbci	r31, 0xFF	; 255
    143c:	80 e0       	ldi	r24, 0x00	; 0
    143e:	90 e0       	ldi	r25, 0x00	; 0
    1440:	aa e7       	ldi	r26, 0x7A	; 122
    1442:	b4 e4       	ldi	r27, 0x44	; 68
    1444:	80 83       	st	Z, r24
    1446:	91 83       	std	Z+1, r25	; 0x01
    1448:	a2 83       	std	Z+2, r26	; 0x02
    144a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    144c:	8e 01       	movw	r16, r28
    144e:	07 59       	subi	r16, 0x97	; 151
    1450:	1f 4f       	sbci	r17, 0xFF	; 255
    1452:	fe 01       	movw	r30, r28
    1454:	e3 59       	subi	r30, 0x93	; 147
    1456:	ff 4f       	sbci	r31, 0xFF	; 255
    1458:	60 81       	ld	r22, Z
    145a:	71 81       	ldd	r23, Z+1	; 0x01
    145c:	82 81       	ldd	r24, Z+2	; 0x02
    145e:	93 81       	ldd	r25, Z+3	; 0x03
    1460:	20 e0       	ldi	r18, 0x00	; 0
    1462:	30 e0       	ldi	r19, 0x00	; 0
    1464:	4a e7       	ldi	r20, 0x7A	; 122
    1466:	55 e4       	ldi	r21, 0x45	; 69
    1468:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    146c:	dc 01       	movw	r26, r24
    146e:	cb 01       	movw	r24, r22
    1470:	f8 01       	movw	r30, r16
    1472:	80 83       	st	Z, r24
    1474:	91 83       	std	Z+1, r25	; 0x01
    1476:	a2 83       	std	Z+2, r26	; 0x02
    1478:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    147a:	fe 01       	movw	r30, r28
    147c:	e7 59       	subi	r30, 0x97	; 151
    147e:	ff 4f       	sbci	r31, 0xFF	; 255
    1480:	60 81       	ld	r22, Z
    1482:	71 81       	ldd	r23, Z+1	; 0x01
    1484:	82 81       	ldd	r24, Z+2	; 0x02
    1486:	93 81       	ldd	r25, Z+3	; 0x03
    1488:	20 e0       	ldi	r18, 0x00	; 0
    148a:	30 e0       	ldi	r19, 0x00	; 0
    148c:	40 e8       	ldi	r20, 0x80	; 128
    148e:	5f e3       	ldi	r21, 0x3F	; 63
    1490:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1494:	88 23       	and	r24, r24
    1496:	44 f4       	brge	.+16     	; 0x14a8 <main+0x260>
		__ticks = 1;
    1498:	fe 01       	movw	r30, r28
    149a:	e9 59       	subi	r30, 0x99	; 153
    149c:	ff 4f       	sbci	r31, 0xFF	; 255
    149e:	81 e0       	ldi	r24, 0x01	; 1
    14a0:	90 e0       	ldi	r25, 0x00	; 0
    14a2:	91 83       	std	Z+1, r25	; 0x01
    14a4:	80 83       	st	Z, r24
    14a6:	64 c0       	rjmp	.+200    	; 0x1570 <main+0x328>
	else if (__tmp > 65535)
    14a8:	fe 01       	movw	r30, r28
    14aa:	e7 59       	subi	r30, 0x97	; 151
    14ac:	ff 4f       	sbci	r31, 0xFF	; 255
    14ae:	60 81       	ld	r22, Z
    14b0:	71 81       	ldd	r23, Z+1	; 0x01
    14b2:	82 81       	ldd	r24, Z+2	; 0x02
    14b4:	93 81       	ldd	r25, Z+3	; 0x03
    14b6:	20 e0       	ldi	r18, 0x00	; 0
    14b8:	3f ef       	ldi	r19, 0xFF	; 255
    14ba:	4f e7       	ldi	r20, 0x7F	; 127
    14bc:	57 e4       	ldi	r21, 0x47	; 71
    14be:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    14c2:	18 16       	cp	r1, r24
    14c4:	0c f0       	brlt	.+2      	; 0x14c8 <main+0x280>
    14c6:	43 c0       	rjmp	.+134    	; 0x154e <main+0x306>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14c8:	fe 01       	movw	r30, r28
    14ca:	e3 59       	subi	r30, 0x93	; 147
    14cc:	ff 4f       	sbci	r31, 0xFF	; 255
    14ce:	60 81       	ld	r22, Z
    14d0:	71 81       	ldd	r23, Z+1	; 0x01
    14d2:	82 81       	ldd	r24, Z+2	; 0x02
    14d4:	93 81       	ldd	r25, Z+3	; 0x03
    14d6:	20 e0       	ldi	r18, 0x00	; 0
    14d8:	30 e0       	ldi	r19, 0x00	; 0
    14da:	40 e2       	ldi	r20, 0x20	; 32
    14dc:	51 e4       	ldi	r21, 0x41	; 65
    14de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14e2:	dc 01       	movw	r26, r24
    14e4:	cb 01       	movw	r24, r22
    14e6:	8e 01       	movw	r16, r28
    14e8:	09 59       	subi	r16, 0x99	; 153
    14ea:	1f 4f       	sbci	r17, 0xFF	; 255
    14ec:	bc 01       	movw	r22, r24
    14ee:	cd 01       	movw	r24, r26
    14f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14f4:	dc 01       	movw	r26, r24
    14f6:	cb 01       	movw	r24, r22
    14f8:	f8 01       	movw	r30, r16
    14fa:	91 83       	std	Z+1, r25	; 0x01
    14fc:	80 83       	st	Z, r24
    14fe:	1f c0       	rjmp	.+62     	; 0x153e <main+0x2f6>
    1500:	fe 01       	movw	r30, r28
    1502:	eb 59       	subi	r30, 0x9B	; 155
    1504:	ff 4f       	sbci	r31, 0xFF	; 255
    1506:	80 e9       	ldi	r24, 0x90	; 144
    1508:	91 e0       	ldi	r25, 0x01	; 1
    150a:	91 83       	std	Z+1, r25	; 0x01
    150c:	80 83       	st	Z, r24
    150e:	fe 01       	movw	r30, r28
    1510:	eb 59       	subi	r30, 0x9B	; 155
    1512:	ff 4f       	sbci	r31, 0xFF	; 255
    1514:	80 81       	ld	r24, Z
    1516:	91 81       	ldd	r25, Z+1	; 0x01
    1518:	01 97       	sbiw	r24, 0x01	; 1
    151a:	f1 f7       	brne	.-4      	; 0x1518 <main+0x2d0>
    151c:	fe 01       	movw	r30, r28
    151e:	eb 59       	subi	r30, 0x9B	; 155
    1520:	ff 4f       	sbci	r31, 0xFF	; 255
    1522:	91 83       	std	Z+1, r25	; 0x01
    1524:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1526:	de 01       	movw	r26, r28
    1528:	a9 59       	subi	r26, 0x99	; 153
    152a:	bf 4f       	sbci	r27, 0xFF	; 255
    152c:	fe 01       	movw	r30, r28
    152e:	e9 59       	subi	r30, 0x99	; 153
    1530:	ff 4f       	sbci	r31, 0xFF	; 255
    1532:	80 81       	ld	r24, Z
    1534:	91 81       	ldd	r25, Z+1	; 0x01
    1536:	01 97       	sbiw	r24, 0x01	; 1
    1538:	11 96       	adiw	r26, 0x01	; 1
    153a:	9c 93       	st	X, r25
    153c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    153e:	fe 01       	movw	r30, r28
    1540:	e9 59       	subi	r30, 0x99	; 153
    1542:	ff 4f       	sbci	r31, 0xFF	; 255
    1544:	80 81       	ld	r24, Z
    1546:	91 81       	ldd	r25, Z+1	; 0x01
    1548:	00 97       	sbiw	r24, 0x00	; 0
    154a:	d1 f6       	brne	.-76     	; 0x1500 <main+0x2b8>
    154c:	27 c0       	rjmp	.+78     	; 0x159c <main+0x354>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    154e:	8e 01       	movw	r16, r28
    1550:	09 59       	subi	r16, 0x99	; 153
    1552:	1f 4f       	sbci	r17, 0xFF	; 255
    1554:	fe 01       	movw	r30, r28
    1556:	e7 59       	subi	r30, 0x97	; 151
    1558:	ff 4f       	sbci	r31, 0xFF	; 255
    155a:	60 81       	ld	r22, Z
    155c:	71 81       	ldd	r23, Z+1	; 0x01
    155e:	82 81       	ldd	r24, Z+2	; 0x02
    1560:	93 81       	ldd	r25, Z+3	; 0x03
    1562:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1566:	dc 01       	movw	r26, r24
    1568:	cb 01       	movw	r24, r22
    156a:	f8 01       	movw	r30, r16
    156c:	91 83       	std	Z+1, r25	; 0x01
    156e:	80 83       	st	Z, r24
    1570:	de 01       	movw	r26, r28
    1572:	ad 59       	subi	r26, 0x9D	; 157
    1574:	bf 4f       	sbci	r27, 0xFF	; 255
    1576:	fe 01       	movw	r30, r28
    1578:	e9 59       	subi	r30, 0x99	; 153
    157a:	ff 4f       	sbci	r31, 0xFF	; 255
    157c:	80 81       	ld	r24, Z
    157e:	91 81       	ldd	r25, Z+1	; 0x01
    1580:	8d 93       	st	X+, r24
    1582:	9c 93       	st	X, r25
    1584:	fe 01       	movw	r30, r28
    1586:	ed 59       	subi	r30, 0x9D	; 157
    1588:	ff 4f       	sbci	r31, 0xFF	; 255
    158a:	80 81       	ld	r24, Z
    158c:	91 81       	ldd	r25, Z+1	; 0x01
    158e:	01 97       	sbiw	r24, 0x01	; 1
    1590:	f1 f7       	brne	.-4      	; 0x158e <main+0x346>
    1592:	fe 01       	movw	r30, r28
    1594:	ed 59       	subi	r30, 0x9D	; 157
    1596:	ff 4f       	sbci	r31, 0xFF	; 255
    1598:	91 83       	std	Z+1, r25	; 0x01
    159a:	80 83       	st	Z, r24
			_delay_ms(1000);
			TOGGLE_BIT(PORTC, 0);
    159c:	a5 e3       	ldi	r26, 0x35	; 53
    159e:	b0 e0       	ldi	r27, 0x00	; 0
    15a0:	e5 e3       	ldi	r30, 0x35	; 53
    15a2:	f0 e0       	ldi	r31, 0x00	; 0
    15a4:	90 81       	ld	r25, Z
    15a6:	81 e0       	ldi	r24, 0x01	; 1
    15a8:	89 27       	eor	r24, r25
    15aa:	8c 93       	st	X, r24
			_delay_ms(2000);
		}
		LCD_moveCursor(1, 0);
		LCD_displayString("fire detected");\
		Buzzer_on();
		for (int i = 0; i < 5; i++) {
    15ac:	de 01       	movw	r26, r28
    15ae:	a9 57       	subi	r26, 0x79	; 121
    15b0:	bf 4f       	sbci	r27, 0xFF	; 255
    15b2:	fe 01       	movw	r30, r28
    15b4:	e9 57       	subi	r30, 0x79	; 121
    15b6:	ff 4f       	sbci	r31, 0xFF	; 255
    15b8:	80 81       	ld	r24, Z
    15ba:	91 81       	ldd	r25, Z+1	; 0x01
    15bc:	01 96       	adiw	r24, 0x01	; 1
    15be:	11 96       	adiw	r26, 0x01	; 1
    15c0:	9c 93       	st	X, r25
    15c2:	8e 93       	st	-X, r24
    15c4:	fe 01       	movw	r30, r28
    15c6:	e9 57       	subi	r30, 0x79	; 121
    15c8:	ff 4f       	sbci	r31, 0xFF	; 255
    15ca:	80 81       	ld	r24, Z
    15cc:	91 81       	ldd	r25, Z+1	; 0x01
    15ce:	85 30       	cpi	r24, 0x05	; 5
    15d0:	91 05       	cpc	r25, r1
    15d2:	0c f4       	brge	.+2      	; 0x15d6 <main+0x38e>
    15d4:	30 cf       	rjmp	.-416    	; 0x1436 <main+0x1ee>
			_delay_ms(1000);
			TOGGLE_BIT(PORTC, 0);
		}

		Buzzer_off();
    15d6:	0e 94 c0 05 	call	0xb80	; 0xb80 <Buzzer_off>
		LCD_clearScreen();
    15da:	0e 94 e8 1c 	call	0x39d0	; 0x39d0 <LCD_clearScreen>
		LCD_moveCursor(0, 0);
    15de:	80 e0       	ldi	r24, 0x00	; 0
    15e0:	60 e0       	ldi	r22, 0x00	; 0
    15e2:	0e 94 6a 1c 	call	0x38d4	; 0x38d4 <LCD_moveCursor>
		LCD_displayString("buzzer off");
    15e6:	84 e7       	ldi	r24, 0x74	; 116
    15e8:	90 e0       	ldi	r25, 0x00	; 0
    15ea:	0e 94 41 1c 	call	0x3882	; 0x3882 <LCD_displayString>
    15ee:	fe 01       	movw	r30, r28
    15f0:	e1 5a       	subi	r30, 0xA1	; 161
    15f2:	ff 4f       	sbci	r31, 0xFF	; 255
    15f4:	80 e0       	ldi	r24, 0x00	; 0
    15f6:	90 e4       	ldi	r25, 0x40	; 64
    15f8:	ac e9       	ldi	r26, 0x9C	; 156
    15fa:	b5 e4       	ldi	r27, 0x45	; 69
    15fc:	80 83       	st	Z, r24
    15fe:	91 83       	std	Z+1, r25	; 0x01
    1600:	a2 83       	std	Z+2, r26	; 0x02
    1602:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1604:	8e 01       	movw	r16, r28
    1606:	05 5a       	subi	r16, 0xA5	; 165
    1608:	1f 4f       	sbci	r17, 0xFF	; 255
    160a:	fe 01       	movw	r30, r28
    160c:	e1 5a       	subi	r30, 0xA1	; 161
    160e:	ff 4f       	sbci	r31, 0xFF	; 255
    1610:	60 81       	ld	r22, Z
    1612:	71 81       	ldd	r23, Z+1	; 0x01
    1614:	82 81       	ldd	r24, Z+2	; 0x02
    1616:	93 81       	ldd	r25, Z+3	; 0x03
    1618:	20 e0       	ldi	r18, 0x00	; 0
    161a:	30 e0       	ldi	r19, 0x00	; 0
    161c:	4a e7       	ldi	r20, 0x7A	; 122
    161e:	55 e4       	ldi	r21, 0x45	; 69
    1620:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1624:	dc 01       	movw	r26, r24
    1626:	cb 01       	movw	r24, r22
    1628:	f8 01       	movw	r30, r16
    162a:	80 83       	st	Z, r24
    162c:	91 83       	std	Z+1, r25	; 0x01
    162e:	a2 83       	std	Z+2, r26	; 0x02
    1630:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1632:	fe 01       	movw	r30, r28
    1634:	e5 5a       	subi	r30, 0xA5	; 165
    1636:	ff 4f       	sbci	r31, 0xFF	; 255
    1638:	60 81       	ld	r22, Z
    163a:	71 81       	ldd	r23, Z+1	; 0x01
    163c:	82 81       	ldd	r24, Z+2	; 0x02
    163e:	93 81       	ldd	r25, Z+3	; 0x03
    1640:	20 e0       	ldi	r18, 0x00	; 0
    1642:	30 e0       	ldi	r19, 0x00	; 0
    1644:	40 e8       	ldi	r20, 0x80	; 128
    1646:	5f e3       	ldi	r21, 0x3F	; 63
    1648:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    164c:	88 23       	and	r24, r24
    164e:	44 f4       	brge	.+16     	; 0x1660 <main+0x418>
		__ticks = 1;
    1650:	fe 01       	movw	r30, r28
    1652:	e7 5a       	subi	r30, 0xA7	; 167
    1654:	ff 4f       	sbci	r31, 0xFF	; 255
    1656:	81 e0       	ldi	r24, 0x01	; 1
    1658:	90 e0       	ldi	r25, 0x00	; 0
    165a:	91 83       	std	Z+1, r25	; 0x01
    165c:	80 83       	st	Z, r24
    165e:	64 c0       	rjmp	.+200    	; 0x1728 <main+0x4e0>
	else if (__tmp > 65535)
    1660:	fe 01       	movw	r30, r28
    1662:	e5 5a       	subi	r30, 0xA5	; 165
    1664:	ff 4f       	sbci	r31, 0xFF	; 255
    1666:	60 81       	ld	r22, Z
    1668:	71 81       	ldd	r23, Z+1	; 0x01
    166a:	82 81       	ldd	r24, Z+2	; 0x02
    166c:	93 81       	ldd	r25, Z+3	; 0x03
    166e:	20 e0       	ldi	r18, 0x00	; 0
    1670:	3f ef       	ldi	r19, 0xFF	; 255
    1672:	4f e7       	ldi	r20, 0x7F	; 127
    1674:	57 e4       	ldi	r21, 0x47	; 71
    1676:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    167a:	18 16       	cp	r1, r24
    167c:	0c f0       	brlt	.+2      	; 0x1680 <main+0x438>
    167e:	43 c0       	rjmp	.+134    	; 0x1706 <main+0x4be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1680:	fe 01       	movw	r30, r28
    1682:	e1 5a       	subi	r30, 0xA1	; 161
    1684:	ff 4f       	sbci	r31, 0xFF	; 255
    1686:	60 81       	ld	r22, Z
    1688:	71 81       	ldd	r23, Z+1	; 0x01
    168a:	82 81       	ldd	r24, Z+2	; 0x02
    168c:	93 81       	ldd	r25, Z+3	; 0x03
    168e:	20 e0       	ldi	r18, 0x00	; 0
    1690:	30 e0       	ldi	r19, 0x00	; 0
    1692:	40 e2       	ldi	r20, 0x20	; 32
    1694:	51 e4       	ldi	r21, 0x41	; 65
    1696:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    169a:	dc 01       	movw	r26, r24
    169c:	cb 01       	movw	r24, r22
    169e:	8e 01       	movw	r16, r28
    16a0:	07 5a       	subi	r16, 0xA7	; 167
    16a2:	1f 4f       	sbci	r17, 0xFF	; 255
    16a4:	bc 01       	movw	r22, r24
    16a6:	cd 01       	movw	r24, r26
    16a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16ac:	dc 01       	movw	r26, r24
    16ae:	cb 01       	movw	r24, r22
    16b0:	f8 01       	movw	r30, r16
    16b2:	91 83       	std	Z+1, r25	; 0x01
    16b4:	80 83       	st	Z, r24
    16b6:	1f c0       	rjmp	.+62     	; 0x16f6 <main+0x4ae>
    16b8:	fe 01       	movw	r30, r28
    16ba:	e9 5a       	subi	r30, 0xA9	; 169
    16bc:	ff 4f       	sbci	r31, 0xFF	; 255
    16be:	80 e9       	ldi	r24, 0x90	; 144
    16c0:	91 e0       	ldi	r25, 0x01	; 1
    16c2:	91 83       	std	Z+1, r25	; 0x01
    16c4:	80 83       	st	Z, r24
    16c6:	fe 01       	movw	r30, r28
    16c8:	e9 5a       	subi	r30, 0xA9	; 169
    16ca:	ff 4f       	sbci	r31, 0xFF	; 255
    16cc:	80 81       	ld	r24, Z
    16ce:	91 81       	ldd	r25, Z+1	; 0x01
    16d0:	01 97       	sbiw	r24, 0x01	; 1
    16d2:	f1 f7       	brne	.-4      	; 0x16d0 <main+0x488>
    16d4:	fe 01       	movw	r30, r28
    16d6:	e9 5a       	subi	r30, 0xA9	; 169
    16d8:	ff 4f       	sbci	r31, 0xFF	; 255
    16da:	91 83       	std	Z+1, r25	; 0x01
    16dc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16de:	de 01       	movw	r26, r28
    16e0:	a7 5a       	subi	r26, 0xA7	; 167
    16e2:	bf 4f       	sbci	r27, 0xFF	; 255
    16e4:	fe 01       	movw	r30, r28
    16e6:	e7 5a       	subi	r30, 0xA7	; 167
    16e8:	ff 4f       	sbci	r31, 0xFF	; 255
    16ea:	80 81       	ld	r24, Z
    16ec:	91 81       	ldd	r25, Z+1	; 0x01
    16ee:	01 97       	sbiw	r24, 0x01	; 1
    16f0:	11 96       	adiw	r26, 0x01	; 1
    16f2:	9c 93       	st	X, r25
    16f4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16f6:	fe 01       	movw	r30, r28
    16f8:	e7 5a       	subi	r30, 0xA7	; 167
    16fa:	ff 4f       	sbci	r31, 0xFF	; 255
    16fc:	80 81       	ld	r24, Z
    16fe:	91 81       	ldd	r25, Z+1	; 0x01
    1700:	00 97       	sbiw	r24, 0x00	; 0
    1702:	d1 f6       	brne	.-76     	; 0x16b8 <main+0x470>
    1704:	27 c0       	rjmp	.+78     	; 0x1754 <main+0x50c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1706:	8e 01       	movw	r16, r28
    1708:	07 5a       	subi	r16, 0xA7	; 167
    170a:	1f 4f       	sbci	r17, 0xFF	; 255
    170c:	fe 01       	movw	r30, r28
    170e:	e5 5a       	subi	r30, 0xA5	; 165
    1710:	ff 4f       	sbci	r31, 0xFF	; 255
    1712:	60 81       	ld	r22, Z
    1714:	71 81       	ldd	r23, Z+1	; 0x01
    1716:	82 81       	ldd	r24, Z+2	; 0x02
    1718:	93 81       	ldd	r25, Z+3	; 0x03
    171a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    171e:	dc 01       	movw	r26, r24
    1720:	cb 01       	movw	r24, r22
    1722:	f8 01       	movw	r30, r16
    1724:	91 83       	std	Z+1, r25	; 0x01
    1726:	80 83       	st	Z, r24
    1728:	de 01       	movw	r26, r28
    172a:	ab 5a       	subi	r26, 0xAB	; 171
    172c:	bf 4f       	sbci	r27, 0xFF	; 255
    172e:	fe 01       	movw	r30, r28
    1730:	e7 5a       	subi	r30, 0xA7	; 167
    1732:	ff 4f       	sbci	r31, 0xFF	; 255
    1734:	80 81       	ld	r24, Z
    1736:	91 81       	ldd	r25, Z+1	; 0x01
    1738:	8d 93       	st	X+, r24
    173a:	9c 93       	st	X, r25
    173c:	fe 01       	movw	r30, r28
    173e:	eb 5a       	subi	r30, 0xAB	; 171
    1740:	ff 4f       	sbci	r31, 0xFF	; 255
    1742:	80 81       	ld	r24, Z
    1744:	91 81       	ldd	r25, Z+1	; 0x01
    1746:	01 97       	sbiw	r24, 0x01	; 1
    1748:	f1 f7       	brne	.-4      	; 0x1746 <main+0x4fe>
    174a:	fe 01       	movw	r30, r28
    174c:	eb 5a       	subi	r30, 0xAB	; 171
    174e:	ff 4f       	sbci	r31, 0xFF	; 255
    1750:	91 83       	std	Z+1, r25	; 0x01
    1752:	80 83       	st	Z, r24
		_delay_ms(5000);
		Led_off();
    1754:	0e 94 0f 1d 	call	0x3a1e	; 0x3a1e <Led_off>
		LCD_clearScreen();
    1758:	0e 94 e8 1c 	call	0x39d0	; 0x39d0 <LCD_clearScreen>
		for (int i = 0; i < 5; i++) {
    175c:	fe 01       	movw	r30, r28
    175e:	eb 57       	subi	r30, 0x7B	; 123
    1760:	ff 4f       	sbci	r31, 0xFF	; 255
    1762:	11 82       	std	Z+1, r1	; 0x01
    1764:	10 82       	st	Z, r1
    1766:	bf c0       	rjmp	.+382    	; 0x18e6 <main+0x69e>
    1768:	fe 01       	movw	r30, r28
    176a:	ef 5a       	subi	r30, 0xAF	; 175
    176c:	ff 4f       	sbci	r31, 0xFF	; 255
    176e:	80 e0       	ldi	r24, 0x00	; 0
    1770:	90 e0       	ldi	r25, 0x00	; 0
    1772:	aa ef       	ldi	r26, 0xFA	; 250
    1774:	b4 e4       	ldi	r27, 0x44	; 68
    1776:	80 83       	st	Z, r24
    1778:	91 83       	std	Z+1, r25	; 0x01
    177a:	a2 83       	std	Z+2, r26	; 0x02
    177c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    177e:	8e 01       	movw	r16, r28
    1780:	03 5b       	subi	r16, 0xB3	; 179
    1782:	1f 4f       	sbci	r17, 0xFF	; 255
    1784:	fe 01       	movw	r30, r28
    1786:	ef 5a       	subi	r30, 0xAF	; 175
    1788:	ff 4f       	sbci	r31, 0xFF	; 255
    178a:	60 81       	ld	r22, Z
    178c:	71 81       	ldd	r23, Z+1	; 0x01
    178e:	82 81       	ldd	r24, Z+2	; 0x02
    1790:	93 81       	ldd	r25, Z+3	; 0x03
    1792:	20 e0       	ldi	r18, 0x00	; 0
    1794:	30 e0       	ldi	r19, 0x00	; 0
    1796:	4a e7       	ldi	r20, 0x7A	; 122
    1798:	55 e4       	ldi	r21, 0x45	; 69
    179a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    179e:	dc 01       	movw	r26, r24
    17a0:	cb 01       	movw	r24, r22
    17a2:	f8 01       	movw	r30, r16
    17a4:	80 83       	st	Z, r24
    17a6:	91 83       	std	Z+1, r25	; 0x01
    17a8:	a2 83       	std	Z+2, r26	; 0x02
    17aa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    17ac:	fe 01       	movw	r30, r28
    17ae:	e3 5b       	subi	r30, 0xB3	; 179
    17b0:	ff 4f       	sbci	r31, 0xFF	; 255
    17b2:	60 81       	ld	r22, Z
    17b4:	71 81       	ldd	r23, Z+1	; 0x01
    17b6:	82 81       	ldd	r24, Z+2	; 0x02
    17b8:	93 81       	ldd	r25, Z+3	; 0x03
    17ba:	20 e0       	ldi	r18, 0x00	; 0
    17bc:	30 e0       	ldi	r19, 0x00	; 0
    17be:	40 e8       	ldi	r20, 0x80	; 128
    17c0:	5f e3       	ldi	r21, 0x3F	; 63
    17c2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17c6:	88 23       	and	r24, r24
    17c8:	44 f4       	brge	.+16     	; 0x17da <main+0x592>
		__ticks = 1;
    17ca:	fe 01       	movw	r30, r28
    17cc:	e5 5b       	subi	r30, 0xB5	; 181
    17ce:	ff 4f       	sbci	r31, 0xFF	; 255
    17d0:	81 e0       	ldi	r24, 0x01	; 1
    17d2:	90 e0       	ldi	r25, 0x00	; 0
    17d4:	91 83       	std	Z+1, r25	; 0x01
    17d6:	80 83       	st	Z, r24
    17d8:	64 c0       	rjmp	.+200    	; 0x18a2 <main+0x65a>
	else if (__tmp > 65535)
    17da:	fe 01       	movw	r30, r28
    17dc:	e3 5b       	subi	r30, 0xB3	; 179
    17de:	ff 4f       	sbci	r31, 0xFF	; 255
    17e0:	60 81       	ld	r22, Z
    17e2:	71 81       	ldd	r23, Z+1	; 0x01
    17e4:	82 81       	ldd	r24, Z+2	; 0x02
    17e6:	93 81       	ldd	r25, Z+3	; 0x03
    17e8:	20 e0       	ldi	r18, 0x00	; 0
    17ea:	3f ef       	ldi	r19, 0xFF	; 255
    17ec:	4f e7       	ldi	r20, 0x7F	; 127
    17ee:	57 e4       	ldi	r21, 0x47	; 71
    17f0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17f4:	18 16       	cp	r1, r24
    17f6:	0c f0       	brlt	.+2      	; 0x17fa <main+0x5b2>
    17f8:	43 c0       	rjmp	.+134    	; 0x1880 <main+0x638>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17fa:	fe 01       	movw	r30, r28
    17fc:	ef 5a       	subi	r30, 0xAF	; 175
    17fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1800:	60 81       	ld	r22, Z
    1802:	71 81       	ldd	r23, Z+1	; 0x01
    1804:	82 81       	ldd	r24, Z+2	; 0x02
    1806:	93 81       	ldd	r25, Z+3	; 0x03
    1808:	20 e0       	ldi	r18, 0x00	; 0
    180a:	30 e0       	ldi	r19, 0x00	; 0
    180c:	40 e2       	ldi	r20, 0x20	; 32
    180e:	51 e4       	ldi	r21, 0x41	; 65
    1810:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1814:	dc 01       	movw	r26, r24
    1816:	cb 01       	movw	r24, r22
    1818:	8e 01       	movw	r16, r28
    181a:	05 5b       	subi	r16, 0xB5	; 181
    181c:	1f 4f       	sbci	r17, 0xFF	; 255
    181e:	bc 01       	movw	r22, r24
    1820:	cd 01       	movw	r24, r26
    1822:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1826:	dc 01       	movw	r26, r24
    1828:	cb 01       	movw	r24, r22
    182a:	f8 01       	movw	r30, r16
    182c:	91 83       	std	Z+1, r25	; 0x01
    182e:	80 83       	st	Z, r24
    1830:	1f c0       	rjmp	.+62     	; 0x1870 <main+0x628>
    1832:	fe 01       	movw	r30, r28
    1834:	e7 5b       	subi	r30, 0xB7	; 183
    1836:	ff 4f       	sbci	r31, 0xFF	; 255
    1838:	80 e9       	ldi	r24, 0x90	; 144
    183a:	91 e0       	ldi	r25, 0x01	; 1
    183c:	91 83       	std	Z+1, r25	; 0x01
    183e:	80 83       	st	Z, r24
    1840:	fe 01       	movw	r30, r28
    1842:	e7 5b       	subi	r30, 0xB7	; 183
    1844:	ff 4f       	sbci	r31, 0xFF	; 255
    1846:	80 81       	ld	r24, Z
    1848:	91 81       	ldd	r25, Z+1	; 0x01
    184a:	01 97       	sbiw	r24, 0x01	; 1
    184c:	f1 f7       	brne	.-4      	; 0x184a <main+0x602>
    184e:	fe 01       	movw	r30, r28
    1850:	e7 5b       	subi	r30, 0xB7	; 183
    1852:	ff 4f       	sbci	r31, 0xFF	; 255
    1854:	91 83       	std	Z+1, r25	; 0x01
    1856:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1858:	de 01       	movw	r26, r28
    185a:	a5 5b       	subi	r26, 0xB5	; 181
    185c:	bf 4f       	sbci	r27, 0xFF	; 255
    185e:	fe 01       	movw	r30, r28
    1860:	e5 5b       	subi	r30, 0xB5	; 181
    1862:	ff 4f       	sbci	r31, 0xFF	; 255
    1864:	80 81       	ld	r24, Z
    1866:	91 81       	ldd	r25, Z+1	; 0x01
    1868:	01 97       	sbiw	r24, 0x01	; 1
    186a:	11 96       	adiw	r26, 0x01	; 1
    186c:	9c 93       	st	X, r25
    186e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1870:	fe 01       	movw	r30, r28
    1872:	e5 5b       	subi	r30, 0xB5	; 181
    1874:	ff 4f       	sbci	r31, 0xFF	; 255
    1876:	80 81       	ld	r24, Z
    1878:	91 81       	ldd	r25, Z+1	; 0x01
    187a:	00 97       	sbiw	r24, 0x00	; 0
    187c:	d1 f6       	brne	.-76     	; 0x1832 <main+0x5ea>
    187e:	27 c0       	rjmp	.+78     	; 0x18ce <main+0x686>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1880:	8e 01       	movw	r16, r28
    1882:	05 5b       	subi	r16, 0xB5	; 181
    1884:	1f 4f       	sbci	r17, 0xFF	; 255
    1886:	fe 01       	movw	r30, r28
    1888:	e3 5b       	subi	r30, 0xB3	; 179
    188a:	ff 4f       	sbci	r31, 0xFF	; 255
    188c:	60 81       	ld	r22, Z
    188e:	71 81       	ldd	r23, Z+1	; 0x01
    1890:	82 81       	ldd	r24, Z+2	; 0x02
    1892:	93 81       	ldd	r25, Z+3	; 0x03
    1894:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1898:	dc 01       	movw	r26, r24
    189a:	cb 01       	movw	r24, r22
    189c:	f8 01       	movw	r30, r16
    189e:	91 83       	std	Z+1, r25	; 0x01
    18a0:	80 83       	st	Z, r24
    18a2:	de 01       	movw	r26, r28
    18a4:	a9 5b       	subi	r26, 0xB9	; 185
    18a6:	bf 4f       	sbci	r27, 0xFF	; 255
    18a8:	fe 01       	movw	r30, r28
    18aa:	e5 5b       	subi	r30, 0xB5	; 181
    18ac:	ff 4f       	sbci	r31, 0xFF	; 255
    18ae:	80 81       	ld	r24, Z
    18b0:	91 81       	ldd	r25, Z+1	; 0x01
    18b2:	8d 93       	st	X+, r24
    18b4:	9c 93       	st	X, r25
    18b6:	fe 01       	movw	r30, r28
    18b8:	e9 5b       	subi	r30, 0xB9	; 185
    18ba:	ff 4f       	sbci	r31, 0xFF	; 255
    18bc:	80 81       	ld	r24, Z
    18be:	91 81       	ldd	r25, Z+1	; 0x01
    18c0:	01 97       	sbiw	r24, 0x01	; 1
    18c2:	f1 f7       	brne	.-4      	; 0x18c0 <main+0x678>
    18c4:	fe 01       	movw	r30, r28
    18c6:	e9 5b       	subi	r30, 0xB9	; 185
    18c8:	ff 4f       	sbci	r31, 0xFF	; 255
    18ca:	91 83       	std	Z+1, r25	; 0x01
    18cc:	80 83       	st	Z, r24
    18ce:	de 01       	movw	r26, r28
    18d0:	ab 57       	subi	r26, 0x7B	; 123
    18d2:	bf 4f       	sbci	r27, 0xFF	; 255
    18d4:	fe 01       	movw	r30, r28
    18d6:	eb 57       	subi	r30, 0x7B	; 123
    18d8:	ff 4f       	sbci	r31, 0xFF	; 255
    18da:	80 81       	ld	r24, Z
    18dc:	91 81       	ldd	r25, Z+1	; 0x01
    18de:	01 96       	adiw	r24, 0x01	; 1
    18e0:	11 96       	adiw	r26, 0x01	; 1
    18e2:	9c 93       	st	X, r25
    18e4:	8e 93       	st	-X, r24
    18e6:	fe 01       	movw	r30, r28
    18e8:	eb 57       	subi	r30, 0x7B	; 123
    18ea:	ff 4f       	sbci	r31, 0xFF	; 255
    18ec:	80 81       	ld	r24, Z
    18ee:	91 81       	ldd	r25, Z+1	; 0x01
    18f0:	85 30       	cpi	r24, 0x05	; 5
    18f2:	91 05       	cpc	r25, r1
    18f4:	0c f4       	brge	.+2      	; 0x18f8 <main+0x6b0>
    18f6:	38 cf       	rjmp	.-400    	; 0x1768 <main+0x520>
			_delay_ms(2000);
		}
		LCD_moveCursor(1, 0);
    18f8:	81 e0       	ldi	r24, 0x01	; 1
    18fa:	60 e0       	ldi	r22, 0x00	; 0
    18fc:	0e 94 6a 1c 	call	0x38d4	; 0x38d4 <LCD_moveCursor>
		LCD_displayString("DOOR OPENED");
    1900:	8f e7       	ldi	r24, 0x7F	; 127
    1902:	90 e0       	ldi	r25, 0x00	; 0
    1904:	0e 94 41 1c 	call	0x3882	; 0x3882 <LCD_displayString>
		Buzzer_on();
    1908:	0e 94 b4 05 	call	0xb68	; 0xb68 <Buzzer_on>
		Led_on();
    190c:	0e 94 03 1d 	call	0x3a06	; 0x3a06 <Led_on>
		for (int i = 0; i < 5; i++) {
    1910:	fe 01       	movw	r30, r28
    1912:	ed 57       	subi	r30, 0x7D	; 125
    1914:	ff 4f       	sbci	r31, 0xFF	; 255
    1916:	11 82       	std	Z+1, r1	; 0x01
    1918:	10 82       	st	Z, r1
    191a:	99 c0       	rjmp	.+306    	; 0x1a4e <main+0x806>
    191c:	fe 01       	movw	r30, r28
    191e:	ed 5b       	subi	r30, 0xBD	; 189
    1920:	ff 4f       	sbci	r31, 0xFF	; 255
    1922:	80 e0       	ldi	r24, 0x00	; 0
    1924:	90 e0       	ldi	r25, 0x00	; 0
    1926:	aa e7       	ldi	r26, 0x7A	; 122
    1928:	b4 e4       	ldi	r27, 0x44	; 68
    192a:	80 83       	st	Z, r24
    192c:	91 83       	std	Z+1, r25	; 0x01
    192e:	a2 83       	std	Z+2, r26	; 0x02
    1930:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1932:	8e 01       	movw	r16, r28
    1934:	01 5c       	subi	r16, 0xC1	; 193
    1936:	1f 4f       	sbci	r17, 0xFF	; 255
    1938:	fe 01       	movw	r30, r28
    193a:	ed 5b       	subi	r30, 0xBD	; 189
    193c:	ff 4f       	sbci	r31, 0xFF	; 255
    193e:	60 81       	ld	r22, Z
    1940:	71 81       	ldd	r23, Z+1	; 0x01
    1942:	82 81       	ldd	r24, Z+2	; 0x02
    1944:	93 81       	ldd	r25, Z+3	; 0x03
    1946:	20 e0       	ldi	r18, 0x00	; 0
    1948:	30 e0       	ldi	r19, 0x00	; 0
    194a:	4a e7       	ldi	r20, 0x7A	; 122
    194c:	55 e4       	ldi	r21, 0x45	; 69
    194e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1952:	dc 01       	movw	r26, r24
    1954:	cb 01       	movw	r24, r22
    1956:	f8 01       	movw	r30, r16
    1958:	80 83       	st	Z, r24
    195a:	91 83       	std	Z+1, r25	; 0x01
    195c:	a2 83       	std	Z+2, r26	; 0x02
    195e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1960:	fe 01       	movw	r30, r28
    1962:	ff 96       	adiw	r30, 0x3f	; 63
    1964:	60 81       	ld	r22, Z
    1966:	71 81       	ldd	r23, Z+1	; 0x01
    1968:	82 81       	ldd	r24, Z+2	; 0x02
    196a:	93 81       	ldd	r25, Z+3	; 0x03
    196c:	20 e0       	ldi	r18, 0x00	; 0
    196e:	30 e0       	ldi	r19, 0x00	; 0
    1970:	40 e8       	ldi	r20, 0x80	; 128
    1972:	5f e3       	ldi	r21, 0x3F	; 63
    1974:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1978:	88 23       	and	r24, r24
    197a:	2c f4       	brge	.+10     	; 0x1986 <main+0x73e>
		__ticks = 1;
    197c:	81 e0       	ldi	r24, 0x01	; 1
    197e:	90 e0       	ldi	r25, 0x00	; 0
    1980:	9e af       	std	Y+62, r25	; 0x3e
    1982:	8d af       	std	Y+61, r24	; 0x3d
    1984:	46 c0       	rjmp	.+140    	; 0x1a12 <main+0x7ca>
	else if (__tmp > 65535)
    1986:	fe 01       	movw	r30, r28
    1988:	ff 96       	adiw	r30, 0x3f	; 63
    198a:	60 81       	ld	r22, Z
    198c:	71 81       	ldd	r23, Z+1	; 0x01
    198e:	82 81       	ldd	r24, Z+2	; 0x02
    1990:	93 81       	ldd	r25, Z+3	; 0x03
    1992:	20 e0       	ldi	r18, 0x00	; 0
    1994:	3f ef       	ldi	r19, 0xFF	; 255
    1996:	4f e7       	ldi	r20, 0x7F	; 127
    1998:	57 e4       	ldi	r21, 0x47	; 71
    199a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    199e:	18 16       	cp	r1, r24
    19a0:	64 f5       	brge	.+88     	; 0x19fa <main+0x7b2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19a2:	fe 01       	movw	r30, r28
    19a4:	ed 5b       	subi	r30, 0xBD	; 189
    19a6:	ff 4f       	sbci	r31, 0xFF	; 255
    19a8:	60 81       	ld	r22, Z
    19aa:	71 81       	ldd	r23, Z+1	; 0x01
    19ac:	82 81       	ldd	r24, Z+2	; 0x02
    19ae:	93 81       	ldd	r25, Z+3	; 0x03
    19b0:	20 e0       	ldi	r18, 0x00	; 0
    19b2:	30 e0       	ldi	r19, 0x00	; 0
    19b4:	40 e2       	ldi	r20, 0x20	; 32
    19b6:	51 e4       	ldi	r21, 0x41	; 65
    19b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19bc:	dc 01       	movw	r26, r24
    19be:	cb 01       	movw	r24, r22
    19c0:	bc 01       	movw	r22, r24
    19c2:	cd 01       	movw	r24, r26
    19c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19c8:	dc 01       	movw	r26, r24
    19ca:	cb 01       	movw	r24, r22
    19cc:	9e af       	std	Y+62, r25	; 0x3e
    19ce:	8d af       	std	Y+61, r24	; 0x3d
    19d0:	0f c0       	rjmp	.+30     	; 0x19f0 <main+0x7a8>
    19d2:	80 e9       	ldi	r24, 0x90	; 144
    19d4:	91 e0       	ldi	r25, 0x01	; 1
    19d6:	9c af       	std	Y+60, r25	; 0x3c
    19d8:	8b af       	std	Y+59, r24	; 0x3b
    19da:	8b ad       	ldd	r24, Y+59	; 0x3b
    19dc:	9c ad       	ldd	r25, Y+60	; 0x3c
    19de:	01 97       	sbiw	r24, 0x01	; 1
    19e0:	f1 f7       	brne	.-4      	; 0x19de <main+0x796>
    19e2:	9c af       	std	Y+60, r25	; 0x3c
    19e4:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19e6:	8d ad       	ldd	r24, Y+61	; 0x3d
    19e8:	9e ad       	ldd	r25, Y+62	; 0x3e
    19ea:	01 97       	sbiw	r24, 0x01	; 1
    19ec:	9e af       	std	Y+62, r25	; 0x3e
    19ee:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19f0:	8d ad       	ldd	r24, Y+61	; 0x3d
    19f2:	9e ad       	ldd	r25, Y+62	; 0x3e
    19f4:	00 97       	sbiw	r24, 0x00	; 0
    19f6:	69 f7       	brne	.-38     	; 0x19d2 <main+0x78a>
    19f8:	16 c0       	rjmp	.+44     	; 0x1a26 <main+0x7de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19fa:	fe 01       	movw	r30, r28
    19fc:	ff 96       	adiw	r30, 0x3f	; 63
    19fe:	60 81       	ld	r22, Z
    1a00:	71 81       	ldd	r23, Z+1	; 0x01
    1a02:	82 81       	ldd	r24, Z+2	; 0x02
    1a04:	93 81       	ldd	r25, Z+3	; 0x03
    1a06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a0a:	dc 01       	movw	r26, r24
    1a0c:	cb 01       	movw	r24, r22
    1a0e:	9e af       	std	Y+62, r25	; 0x3e
    1a10:	8d af       	std	Y+61, r24	; 0x3d
    1a12:	8d ad       	ldd	r24, Y+61	; 0x3d
    1a14:	9e ad       	ldd	r25, Y+62	; 0x3e
    1a16:	9a af       	std	Y+58, r25	; 0x3a
    1a18:	89 af       	std	Y+57, r24	; 0x39
    1a1a:	89 ad       	ldd	r24, Y+57	; 0x39
    1a1c:	9a ad       	ldd	r25, Y+58	; 0x3a
    1a1e:	01 97       	sbiw	r24, 0x01	; 1
    1a20:	f1 f7       	brne	.-4      	; 0x1a1e <main+0x7d6>
    1a22:	9a af       	std	Y+58, r25	; 0x3a
    1a24:	89 af       	std	Y+57, r24	; 0x39
			_delay_ms(1000);
			TOGGLE_BIT(PORTC, 0);
    1a26:	a5 e3       	ldi	r26, 0x35	; 53
    1a28:	b0 e0       	ldi	r27, 0x00	; 0
    1a2a:	e5 e3       	ldi	r30, 0x35	; 53
    1a2c:	f0 e0       	ldi	r31, 0x00	; 0
    1a2e:	90 81       	ld	r25, Z
    1a30:	81 e0       	ldi	r24, 0x01	; 1
    1a32:	89 27       	eor	r24, r25
    1a34:	8c 93       	st	X, r24
		}
		LCD_moveCursor(1, 0);
		LCD_displayString("DOOR OPENED");
		Buzzer_on();
		Led_on();
		for (int i = 0; i < 5; i++) {
    1a36:	de 01       	movw	r26, r28
    1a38:	ad 57       	subi	r26, 0x7D	; 125
    1a3a:	bf 4f       	sbci	r27, 0xFF	; 255
    1a3c:	fe 01       	movw	r30, r28
    1a3e:	ed 57       	subi	r30, 0x7D	; 125
    1a40:	ff 4f       	sbci	r31, 0xFF	; 255
    1a42:	80 81       	ld	r24, Z
    1a44:	91 81       	ldd	r25, Z+1	; 0x01
    1a46:	01 96       	adiw	r24, 0x01	; 1
    1a48:	11 96       	adiw	r26, 0x01	; 1
    1a4a:	9c 93       	st	X, r25
    1a4c:	8e 93       	st	-X, r24
    1a4e:	fe 01       	movw	r30, r28
    1a50:	ed 57       	subi	r30, 0x7D	; 125
    1a52:	ff 4f       	sbci	r31, 0xFF	; 255
    1a54:	80 81       	ld	r24, Z
    1a56:	91 81       	ldd	r25, Z+1	; 0x01
    1a58:	85 30       	cpi	r24, 0x05	; 5
    1a5a:	91 05       	cpc	r25, r1
    1a5c:	0c f4       	brge	.+2      	; 0x1a60 <main+0x818>
    1a5e:	5e cf       	rjmp	.-324    	; 0x191c <main+0x6d4>
			_delay_ms(1000);
			TOGGLE_BIT(PORTC, 0);
		}

		Buzzer_off();
    1a60:	0e 94 c0 05 	call	0xb80	; 0xb80 <Buzzer_off>
		LCD_clearScreen();
    1a64:	0e 94 e8 1c 	call	0x39d0	; 0x39d0 <LCD_clearScreen>
		LCD_moveCursor(0, 0);
    1a68:	80 e0       	ldi	r24, 0x00	; 0
    1a6a:	60 e0       	ldi	r22, 0x00	; 0
    1a6c:	0e 94 6a 1c 	call	0x38d4	; 0x38d4 <LCD_moveCursor>
		LCD_displayString("buzzer off");
    1a70:	84 e7       	ldi	r24, 0x74	; 116
    1a72:	90 e0       	ldi	r25, 0x00	; 0
    1a74:	0e 94 41 1c 	call	0x3882	; 0x3882 <LCD_displayString>
    1a78:	80 e0       	ldi	r24, 0x00	; 0
    1a7a:	90 e4       	ldi	r25, 0x40	; 64
    1a7c:	ac e9       	ldi	r26, 0x9C	; 156
    1a7e:	b5 e4       	ldi	r27, 0x45	; 69
    1a80:	8d ab       	std	Y+53, r24	; 0x35
    1a82:	9e ab       	std	Y+54, r25	; 0x36
    1a84:	af ab       	std	Y+55, r26	; 0x37
    1a86:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a88:	6d a9       	ldd	r22, Y+53	; 0x35
    1a8a:	7e a9       	ldd	r23, Y+54	; 0x36
    1a8c:	8f a9       	ldd	r24, Y+55	; 0x37
    1a8e:	98 ad       	ldd	r25, Y+56	; 0x38
    1a90:	20 e0       	ldi	r18, 0x00	; 0
    1a92:	30 e0       	ldi	r19, 0x00	; 0
    1a94:	4a e7       	ldi	r20, 0x7A	; 122
    1a96:	55 e4       	ldi	r21, 0x45	; 69
    1a98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a9c:	dc 01       	movw	r26, r24
    1a9e:	cb 01       	movw	r24, r22
    1aa0:	89 ab       	std	Y+49, r24	; 0x31
    1aa2:	9a ab       	std	Y+50, r25	; 0x32
    1aa4:	ab ab       	std	Y+51, r26	; 0x33
    1aa6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1aa8:	69 a9       	ldd	r22, Y+49	; 0x31
    1aaa:	7a a9       	ldd	r23, Y+50	; 0x32
    1aac:	8b a9       	ldd	r24, Y+51	; 0x33
    1aae:	9c a9       	ldd	r25, Y+52	; 0x34
    1ab0:	20 e0       	ldi	r18, 0x00	; 0
    1ab2:	30 e0       	ldi	r19, 0x00	; 0
    1ab4:	40 e8       	ldi	r20, 0x80	; 128
    1ab6:	5f e3       	ldi	r21, 0x3F	; 63
    1ab8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1abc:	88 23       	and	r24, r24
    1abe:	2c f4       	brge	.+10     	; 0x1aca <main+0x882>
		__ticks = 1;
    1ac0:	81 e0       	ldi	r24, 0x01	; 1
    1ac2:	90 e0       	ldi	r25, 0x00	; 0
    1ac4:	98 ab       	std	Y+48, r25	; 0x30
    1ac6:	8f a7       	std	Y+47, r24	; 0x2f
    1ac8:	3f c0       	rjmp	.+126    	; 0x1b48 <main+0x900>
	else if (__tmp > 65535)
    1aca:	69 a9       	ldd	r22, Y+49	; 0x31
    1acc:	7a a9       	ldd	r23, Y+50	; 0x32
    1ace:	8b a9       	ldd	r24, Y+51	; 0x33
    1ad0:	9c a9       	ldd	r25, Y+52	; 0x34
    1ad2:	20 e0       	ldi	r18, 0x00	; 0
    1ad4:	3f ef       	ldi	r19, 0xFF	; 255
    1ad6:	4f e7       	ldi	r20, 0x7F	; 127
    1ad8:	57 e4       	ldi	r21, 0x47	; 71
    1ada:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ade:	18 16       	cp	r1, r24
    1ae0:	4c f5       	brge	.+82     	; 0x1b34 <main+0x8ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ae2:	6d a9       	ldd	r22, Y+53	; 0x35
    1ae4:	7e a9       	ldd	r23, Y+54	; 0x36
    1ae6:	8f a9       	ldd	r24, Y+55	; 0x37
    1ae8:	98 ad       	ldd	r25, Y+56	; 0x38
    1aea:	20 e0       	ldi	r18, 0x00	; 0
    1aec:	30 e0       	ldi	r19, 0x00	; 0
    1aee:	40 e2       	ldi	r20, 0x20	; 32
    1af0:	51 e4       	ldi	r21, 0x41	; 65
    1af2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1af6:	dc 01       	movw	r26, r24
    1af8:	cb 01       	movw	r24, r22
    1afa:	bc 01       	movw	r22, r24
    1afc:	cd 01       	movw	r24, r26
    1afe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b02:	dc 01       	movw	r26, r24
    1b04:	cb 01       	movw	r24, r22
    1b06:	98 ab       	std	Y+48, r25	; 0x30
    1b08:	8f a7       	std	Y+47, r24	; 0x2f
    1b0a:	0f c0       	rjmp	.+30     	; 0x1b2a <main+0x8e2>
    1b0c:	80 e9       	ldi	r24, 0x90	; 144
    1b0e:	91 e0       	ldi	r25, 0x01	; 1
    1b10:	9e a7       	std	Y+46, r25	; 0x2e
    1b12:	8d a7       	std	Y+45, r24	; 0x2d
    1b14:	8d a5       	ldd	r24, Y+45	; 0x2d
    1b16:	9e a5       	ldd	r25, Y+46	; 0x2e
    1b18:	01 97       	sbiw	r24, 0x01	; 1
    1b1a:	f1 f7       	brne	.-4      	; 0x1b18 <main+0x8d0>
    1b1c:	9e a7       	std	Y+46, r25	; 0x2e
    1b1e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b20:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b22:	98 a9       	ldd	r25, Y+48	; 0x30
    1b24:	01 97       	sbiw	r24, 0x01	; 1
    1b26:	98 ab       	std	Y+48, r25	; 0x30
    1b28:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b2a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b2c:	98 a9       	ldd	r25, Y+48	; 0x30
    1b2e:	00 97       	sbiw	r24, 0x00	; 0
    1b30:	69 f7       	brne	.-38     	; 0x1b0c <main+0x8c4>
    1b32:	14 c0       	rjmp	.+40     	; 0x1b5c <main+0x914>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b34:	69 a9       	ldd	r22, Y+49	; 0x31
    1b36:	7a a9       	ldd	r23, Y+50	; 0x32
    1b38:	8b a9       	ldd	r24, Y+51	; 0x33
    1b3a:	9c a9       	ldd	r25, Y+52	; 0x34
    1b3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b40:	dc 01       	movw	r26, r24
    1b42:	cb 01       	movw	r24, r22
    1b44:	98 ab       	std	Y+48, r25	; 0x30
    1b46:	8f a7       	std	Y+47, r24	; 0x2f
    1b48:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b4a:	98 a9       	ldd	r25, Y+48	; 0x30
    1b4c:	9c a7       	std	Y+44, r25	; 0x2c
    1b4e:	8b a7       	std	Y+43, r24	; 0x2b
    1b50:	8b a5       	ldd	r24, Y+43	; 0x2b
    1b52:	9c a5       	ldd	r25, Y+44	; 0x2c
    1b54:	01 97       	sbiw	r24, 0x01	; 1
    1b56:	f1 f7       	brne	.-4      	; 0x1b54 <main+0x90c>
    1b58:	9c a7       	std	Y+44, r25	; 0x2c
    1b5a:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(5000);
		Led_off();
    1b5c:	0e 94 0f 1d 	call	0x3a1e	; 0x3a1e <Led_off>
		LCD_clearScreen();
    1b60:	0e 94 e8 1c 	call	0x39d0	; 0x39d0 <LCD_clearScreen>
		for (int i = 0; i < 5; i++) {
    1b64:	fe 01       	movw	r30, r28
    1b66:	ef 57       	subi	r30, 0x7F	; 127
    1b68:	ff 4f       	sbci	r31, 0xFF	; 255
    1b6a:	11 82       	std	Z+1, r1	; 0x01
    1b6c:	10 82       	st	Z, r1
    1b6e:	7e c0       	rjmp	.+252    	; 0x1c6c <main+0xa24>
    1b70:	80 e0       	ldi	r24, 0x00	; 0
    1b72:	90 e0       	ldi	r25, 0x00	; 0
    1b74:	aa ef       	ldi	r26, 0xFA	; 250
    1b76:	b4 e4       	ldi	r27, 0x44	; 68
    1b78:	8f a3       	std	Y+39, r24	; 0x27
    1b7a:	98 a7       	std	Y+40, r25	; 0x28
    1b7c:	a9 a7       	std	Y+41, r26	; 0x29
    1b7e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b80:	6f a1       	ldd	r22, Y+39	; 0x27
    1b82:	78 a5       	ldd	r23, Y+40	; 0x28
    1b84:	89 a5       	ldd	r24, Y+41	; 0x29
    1b86:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b88:	20 e0       	ldi	r18, 0x00	; 0
    1b8a:	30 e0       	ldi	r19, 0x00	; 0
    1b8c:	4a e7       	ldi	r20, 0x7A	; 122
    1b8e:	55 e4       	ldi	r21, 0x45	; 69
    1b90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b94:	dc 01       	movw	r26, r24
    1b96:	cb 01       	movw	r24, r22
    1b98:	8b a3       	std	Y+35, r24	; 0x23
    1b9a:	9c a3       	std	Y+36, r25	; 0x24
    1b9c:	ad a3       	std	Y+37, r26	; 0x25
    1b9e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1ba0:	6b a1       	ldd	r22, Y+35	; 0x23
    1ba2:	7c a1       	ldd	r23, Y+36	; 0x24
    1ba4:	8d a1       	ldd	r24, Y+37	; 0x25
    1ba6:	9e a1       	ldd	r25, Y+38	; 0x26
    1ba8:	20 e0       	ldi	r18, 0x00	; 0
    1baa:	30 e0       	ldi	r19, 0x00	; 0
    1bac:	40 e8       	ldi	r20, 0x80	; 128
    1bae:	5f e3       	ldi	r21, 0x3F	; 63
    1bb0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1bb4:	88 23       	and	r24, r24
    1bb6:	2c f4       	brge	.+10     	; 0x1bc2 <main+0x97a>
		__ticks = 1;
    1bb8:	81 e0       	ldi	r24, 0x01	; 1
    1bba:	90 e0       	ldi	r25, 0x00	; 0
    1bbc:	9a a3       	std	Y+34, r25	; 0x22
    1bbe:	89 a3       	std	Y+33, r24	; 0x21
    1bc0:	3f c0       	rjmp	.+126    	; 0x1c40 <main+0x9f8>
	else if (__tmp > 65535)
    1bc2:	6b a1       	ldd	r22, Y+35	; 0x23
    1bc4:	7c a1       	ldd	r23, Y+36	; 0x24
    1bc6:	8d a1       	ldd	r24, Y+37	; 0x25
    1bc8:	9e a1       	ldd	r25, Y+38	; 0x26
    1bca:	20 e0       	ldi	r18, 0x00	; 0
    1bcc:	3f ef       	ldi	r19, 0xFF	; 255
    1bce:	4f e7       	ldi	r20, 0x7F	; 127
    1bd0:	57 e4       	ldi	r21, 0x47	; 71
    1bd2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1bd6:	18 16       	cp	r1, r24
    1bd8:	4c f5       	brge	.+82     	; 0x1c2c <main+0x9e4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bda:	6f a1       	ldd	r22, Y+39	; 0x27
    1bdc:	78 a5       	ldd	r23, Y+40	; 0x28
    1bde:	89 a5       	ldd	r24, Y+41	; 0x29
    1be0:	9a a5       	ldd	r25, Y+42	; 0x2a
    1be2:	20 e0       	ldi	r18, 0x00	; 0
    1be4:	30 e0       	ldi	r19, 0x00	; 0
    1be6:	40 e2       	ldi	r20, 0x20	; 32
    1be8:	51 e4       	ldi	r21, 0x41	; 65
    1bea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bee:	dc 01       	movw	r26, r24
    1bf0:	cb 01       	movw	r24, r22
    1bf2:	bc 01       	movw	r22, r24
    1bf4:	cd 01       	movw	r24, r26
    1bf6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bfa:	dc 01       	movw	r26, r24
    1bfc:	cb 01       	movw	r24, r22
    1bfe:	9a a3       	std	Y+34, r25	; 0x22
    1c00:	89 a3       	std	Y+33, r24	; 0x21
    1c02:	0f c0       	rjmp	.+30     	; 0x1c22 <main+0x9da>
    1c04:	80 e9       	ldi	r24, 0x90	; 144
    1c06:	91 e0       	ldi	r25, 0x01	; 1
    1c08:	98 a3       	std	Y+32, r25	; 0x20
    1c0a:	8f 8f       	std	Y+31, r24	; 0x1f
    1c0c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1c0e:	98 a1       	ldd	r25, Y+32	; 0x20
    1c10:	01 97       	sbiw	r24, 0x01	; 1
    1c12:	f1 f7       	brne	.-4      	; 0x1c10 <main+0x9c8>
    1c14:	98 a3       	std	Y+32, r25	; 0x20
    1c16:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c18:	89 a1       	ldd	r24, Y+33	; 0x21
    1c1a:	9a a1       	ldd	r25, Y+34	; 0x22
    1c1c:	01 97       	sbiw	r24, 0x01	; 1
    1c1e:	9a a3       	std	Y+34, r25	; 0x22
    1c20:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c22:	89 a1       	ldd	r24, Y+33	; 0x21
    1c24:	9a a1       	ldd	r25, Y+34	; 0x22
    1c26:	00 97       	sbiw	r24, 0x00	; 0
    1c28:	69 f7       	brne	.-38     	; 0x1c04 <main+0x9bc>
    1c2a:	14 c0       	rjmp	.+40     	; 0x1c54 <main+0xa0c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c2c:	6b a1       	ldd	r22, Y+35	; 0x23
    1c2e:	7c a1       	ldd	r23, Y+36	; 0x24
    1c30:	8d a1       	ldd	r24, Y+37	; 0x25
    1c32:	9e a1       	ldd	r25, Y+38	; 0x26
    1c34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c38:	dc 01       	movw	r26, r24
    1c3a:	cb 01       	movw	r24, r22
    1c3c:	9a a3       	std	Y+34, r25	; 0x22
    1c3e:	89 a3       	std	Y+33, r24	; 0x21
    1c40:	89 a1       	ldd	r24, Y+33	; 0x21
    1c42:	9a a1       	ldd	r25, Y+34	; 0x22
    1c44:	9e 8f       	std	Y+30, r25	; 0x1e
    1c46:	8d 8f       	std	Y+29, r24	; 0x1d
    1c48:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1c4a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1c4c:	01 97       	sbiw	r24, 0x01	; 1
    1c4e:	f1 f7       	brne	.-4      	; 0x1c4c <main+0xa04>
    1c50:	9e 8f       	std	Y+30, r25	; 0x1e
    1c52:	8d 8f       	std	Y+29, r24	; 0x1d
    1c54:	de 01       	movw	r26, r28
    1c56:	af 57       	subi	r26, 0x7F	; 127
    1c58:	bf 4f       	sbci	r27, 0xFF	; 255
    1c5a:	fe 01       	movw	r30, r28
    1c5c:	ef 57       	subi	r30, 0x7F	; 127
    1c5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c60:	80 81       	ld	r24, Z
    1c62:	91 81       	ldd	r25, Z+1	; 0x01
    1c64:	01 96       	adiw	r24, 0x01	; 1
    1c66:	11 96       	adiw	r26, 0x01	; 1
    1c68:	9c 93       	st	X, r25
    1c6a:	8e 93       	st	-X, r24
    1c6c:	fe 01       	movw	r30, r28
    1c6e:	ef 57       	subi	r30, 0x7F	; 127
    1c70:	ff 4f       	sbci	r31, 0xFF	; 255
    1c72:	80 81       	ld	r24, Z
    1c74:	91 81       	ldd	r25, Z+1	; 0x01
    1c76:	85 30       	cpi	r24, 0x05	; 5
    1c78:	91 05       	cpc	r25, r1
    1c7a:	0c f4       	brge	.+2      	; 0x1c7e <main+0xa36>
    1c7c:	79 cf       	rjmp	.-270    	; 0x1b70 <main+0x928>
			_delay_ms(2000);
		}
		LCD_moveCursor(1, 0);
    1c7e:	81 e0       	ldi	r24, 0x01	; 1
    1c80:	60 e0       	ldi	r22, 0x00	; 0
    1c82:	0e 94 6a 1c 	call	0x38d4	; 0x38d4 <LCD_moveCursor>
		LCD_displayString("us detect object");
    1c86:	8b e8       	ldi	r24, 0x8B	; 139
    1c88:	90 e0       	ldi	r25, 0x00	; 0
    1c8a:	0e 94 41 1c 	call	0x3882	; 0x3882 <LCD_displayString>
		Buzzer_on();
    1c8e:	0e 94 b4 05 	call	0xb68	; 0xb68 <Buzzer_on>
		for (int i = 0; i < 5; i++) {
    1c92:	fe 01       	movw	r30, r28
    1c94:	e1 58       	subi	r30, 0x81	; 129
    1c96:	ff 4f       	sbci	r31, 0xFF	; 255
    1c98:	11 82       	std	Z+1, r1	; 0x01
    1c9a:	10 82       	st	Z, r1
    1c9c:	86 c0       	rjmp	.+268    	; 0x1daa <main+0xb62>
    1c9e:	80 e0       	ldi	r24, 0x00	; 0
    1ca0:	90 e0       	ldi	r25, 0x00	; 0
    1ca2:	aa e7       	ldi	r26, 0x7A	; 122
    1ca4:	b4 e4       	ldi	r27, 0x44	; 68
    1ca6:	89 8f       	std	Y+25, r24	; 0x19
    1ca8:	9a 8f       	std	Y+26, r25	; 0x1a
    1caa:	ab 8f       	std	Y+27, r26	; 0x1b
    1cac:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cae:	69 8d       	ldd	r22, Y+25	; 0x19
    1cb0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1cb2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1cb4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1cb6:	20 e0       	ldi	r18, 0x00	; 0
    1cb8:	30 e0       	ldi	r19, 0x00	; 0
    1cba:	4a e7       	ldi	r20, 0x7A	; 122
    1cbc:	55 e4       	ldi	r21, 0x45	; 69
    1cbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cc2:	dc 01       	movw	r26, r24
    1cc4:	cb 01       	movw	r24, r22
    1cc6:	8d 8b       	std	Y+21, r24	; 0x15
    1cc8:	9e 8b       	std	Y+22, r25	; 0x16
    1cca:	af 8b       	std	Y+23, r26	; 0x17
    1ccc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1cce:	6d 89       	ldd	r22, Y+21	; 0x15
    1cd0:	7e 89       	ldd	r23, Y+22	; 0x16
    1cd2:	8f 89       	ldd	r24, Y+23	; 0x17
    1cd4:	98 8d       	ldd	r25, Y+24	; 0x18
    1cd6:	20 e0       	ldi	r18, 0x00	; 0
    1cd8:	30 e0       	ldi	r19, 0x00	; 0
    1cda:	40 e8       	ldi	r20, 0x80	; 128
    1cdc:	5f e3       	ldi	r21, 0x3F	; 63
    1cde:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ce2:	88 23       	and	r24, r24
    1ce4:	2c f4       	brge	.+10     	; 0x1cf0 <main+0xaa8>
		__ticks = 1;
    1ce6:	81 e0       	ldi	r24, 0x01	; 1
    1ce8:	90 e0       	ldi	r25, 0x00	; 0
    1cea:	9c 8b       	std	Y+20, r25	; 0x14
    1cec:	8b 8b       	std	Y+19, r24	; 0x13
    1cee:	3f c0       	rjmp	.+126    	; 0x1d6e <main+0xb26>
	else if (__tmp > 65535)
    1cf0:	6d 89       	ldd	r22, Y+21	; 0x15
    1cf2:	7e 89       	ldd	r23, Y+22	; 0x16
    1cf4:	8f 89       	ldd	r24, Y+23	; 0x17
    1cf6:	98 8d       	ldd	r25, Y+24	; 0x18
    1cf8:	20 e0       	ldi	r18, 0x00	; 0
    1cfa:	3f ef       	ldi	r19, 0xFF	; 255
    1cfc:	4f e7       	ldi	r20, 0x7F	; 127
    1cfe:	57 e4       	ldi	r21, 0x47	; 71
    1d00:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d04:	18 16       	cp	r1, r24
    1d06:	4c f5       	brge	.+82     	; 0x1d5a <main+0xb12>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d08:	69 8d       	ldd	r22, Y+25	; 0x19
    1d0a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d0c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d0e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d10:	20 e0       	ldi	r18, 0x00	; 0
    1d12:	30 e0       	ldi	r19, 0x00	; 0
    1d14:	40 e2       	ldi	r20, 0x20	; 32
    1d16:	51 e4       	ldi	r21, 0x41	; 65
    1d18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d1c:	dc 01       	movw	r26, r24
    1d1e:	cb 01       	movw	r24, r22
    1d20:	bc 01       	movw	r22, r24
    1d22:	cd 01       	movw	r24, r26
    1d24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d28:	dc 01       	movw	r26, r24
    1d2a:	cb 01       	movw	r24, r22
    1d2c:	9c 8b       	std	Y+20, r25	; 0x14
    1d2e:	8b 8b       	std	Y+19, r24	; 0x13
    1d30:	0f c0       	rjmp	.+30     	; 0x1d50 <main+0xb08>
    1d32:	80 e9       	ldi	r24, 0x90	; 144
    1d34:	91 e0       	ldi	r25, 0x01	; 1
    1d36:	9a 8b       	std	Y+18, r25	; 0x12
    1d38:	89 8b       	std	Y+17, r24	; 0x11
    1d3a:	89 89       	ldd	r24, Y+17	; 0x11
    1d3c:	9a 89       	ldd	r25, Y+18	; 0x12
    1d3e:	01 97       	sbiw	r24, 0x01	; 1
    1d40:	f1 f7       	brne	.-4      	; 0x1d3e <main+0xaf6>
    1d42:	9a 8b       	std	Y+18, r25	; 0x12
    1d44:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d46:	8b 89       	ldd	r24, Y+19	; 0x13
    1d48:	9c 89       	ldd	r25, Y+20	; 0x14
    1d4a:	01 97       	sbiw	r24, 0x01	; 1
    1d4c:	9c 8b       	std	Y+20, r25	; 0x14
    1d4e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d50:	8b 89       	ldd	r24, Y+19	; 0x13
    1d52:	9c 89       	ldd	r25, Y+20	; 0x14
    1d54:	00 97       	sbiw	r24, 0x00	; 0
    1d56:	69 f7       	brne	.-38     	; 0x1d32 <main+0xaea>
    1d58:	14 c0       	rjmp	.+40     	; 0x1d82 <main+0xb3a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d5a:	6d 89       	ldd	r22, Y+21	; 0x15
    1d5c:	7e 89       	ldd	r23, Y+22	; 0x16
    1d5e:	8f 89       	ldd	r24, Y+23	; 0x17
    1d60:	98 8d       	ldd	r25, Y+24	; 0x18
    1d62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d66:	dc 01       	movw	r26, r24
    1d68:	cb 01       	movw	r24, r22
    1d6a:	9c 8b       	std	Y+20, r25	; 0x14
    1d6c:	8b 8b       	std	Y+19, r24	; 0x13
    1d6e:	8b 89       	ldd	r24, Y+19	; 0x13
    1d70:	9c 89       	ldd	r25, Y+20	; 0x14
    1d72:	98 8b       	std	Y+16, r25	; 0x10
    1d74:	8f 87       	std	Y+15, r24	; 0x0f
    1d76:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d78:	98 89       	ldd	r25, Y+16	; 0x10
    1d7a:	01 97       	sbiw	r24, 0x01	; 1
    1d7c:	f1 f7       	brne	.-4      	; 0x1d7a <main+0xb32>
    1d7e:	98 8b       	std	Y+16, r25	; 0x10
    1d80:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(1000);
			TOGGLE_BIT(PORTC, 0);
    1d82:	a5 e3       	ldi	r26, 0x35	; 53
    1d84:	b0 e0       	ldi	r27, 0x00	; 0
    1d86:	e5 e3       	ldi	r30, 0x35	; 53
    1d88:	f0 e0       	ldi	r31, 0x00	; 0
    1d8a:	90 81       	ld	r25, Z
    1d8c:	81 e0       	ldi	r24, 0x01	; 1
    1d8e:	89 27       	eor	r24, r25
    1d90:	8c 93       	st	X, r24
			_delay_ms(2000);
		}
		LCD_moveCursor(1, 0);
		LCD_displayString("us detect object");
		Buzzer_on();
		for (int i = 0; i < 5; i++) {
    1d92:	de 01       	movw	r26, r28
    1d94:	a1 58       	subi	r26, 0x81	; 129
    1d96:	bf 4f       	sbci	r27, 0xFF	; 255
    1d98:	fe 01       	movw	r30, r28
    1d9a:	e1 58       	subi	r30, 0x81	; 129
    1d9c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d9e:	80 81       	ld	r24, Z
    1da0:	91 81       	ldd	r25, Z+1	; 0x01
    1da2:	01 96       	adiw	r24, 0x01	; 1
    1da4:	11 96       	adiw	r26, 0x01	; 1
    1da6:	9c 93       	st	X, r25
    1da8:	8e 93       	st	-X, r24
    1daa:	fe 01       	movw	r30, r28
    1dac:	e1 58       	subi	r30, 0x81	; 129
    1dae:	ff 4f       	sbci	r31, 0xFF	; 255
    1db0:	80 81       	ld	r24, Z
    1db2:	91 81       	ldd	r25, Z+1	; 0x01
    1db4:	85 30       	cpi	r24, 0x05	; 5
    1db6:	91 05       	cpc	r25, r1
    1db8:	0c f4       	brge	.+2      	; 0x1dbc <main+0xb74>
    1dba:	71 cf       	rjmp	.-286    	; 0x1c9e <main+0xa56>
			_delay_ms(1000);
			TOGGLE_BIT(PORTC, 0);
		}

		Buzzer_off();
    1dbc:	0e 94 c0 05 	call	0xb80	; 0xb80 <Buzzer_off>
		LCD_clearScreen();
    1dc0:	0e 94 e8 1c 	call	0x39d0	; 0x39d0 <LCD_clearScreen>
		LCD_displayString("buzzer off");
    1dc4:	84 e7       	ldi	r24, 0x74	; 116
    1dc6:	90 e0       	ldi	r25, 0x00	; 0
    1dc8:	0e 94 41 1c 	call	0x3882	; 0x3882 <LCD_displayString>
    1dcc:	80 e0       	ldi	r24, 0x00	; 0
    1dce:	90 e4       	ldi	r25, 0x40	; 64
    1dd0:	ac e9       	ldi	r26, 0x9C	; 156
    1dd2:	b5 e4       	ldi	r27, 0x45	; 69
    1dd4:	8b 87       	std	Y+11, r24	; 0x0b
    1dd6:	9c 87       	std	Y+12, r25	; 0x0c
    1dd8:	ad 87       	std	Y+13, r26	; 0x0d
    1dda:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ddc:	6b 85       	ldd	r22, Y+11	; 0x0b
    1dde:	7c 85       	ldd	r23, Y+12	; 0x0c
    1de0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1de2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1de4:	20 e0       	ldi	r18, 0x00	; 0
    1de6:	30 e0       	ldi	r19, 0x00	; 0
    1de8:	4a e7       	ldi	r20, 0x7A	; 122
    1dea:	55 e4       	ldi	r21, 0x45	; 69
    1dec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1df0:	dc 01       	movw	r26, r24
    1df2:	cb 01       	movw	r24, r22
    1df4:	8f 83       	std	Y+7, r24	; 0x07
    1df6:	98 87       	std	Y+8, r25	; 0x08
    1df8:	a9 87       	std	Y+9, r26	; 0x09
    1dfa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1dfc:	6f 81       	ldd	r22, Y+7	; 0x07
    1dfe:	78 85       	ldd	r23, Y+8	; 0x08
    1e00:	89 85       	ldd	r24, Y+9	; 0x09
    1e02:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e04:	20 e0       	ldi	r18, 0x00	; 0
    1e06:	30 e0       	ldi	r19, 0x00	; 0
    1e08:	40 e8       	ldi	r20, 0x80	; 128
    1e0a:	5f e3       	ldi	r21, 0x3F	; 63
    1e0c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e10:	88 23       	and	r24, r24
    1e12:	2c f4       	brge	.+10     	; 0x1e1e <main+0xbd6>
		__ticks = 1;
    1e14:	81 e0       	ldi	r24, 0x01	; 1
    1e16:	90 e0       	ldi	r25, 0x00	; 0
    1e18:	9e 83       	std	Y+6, r25	; 0x06
    1e1a:	8d 83       	std	Y+5, r24	; 0x05
    1e1c:	3f c0       	rjmp	.+126    	; 0x1e9c <main+0xc54>
	else if (__tmp > 65535)
    1e1e:	6f 81       	ldd	r22, Y+7	; 0x07
    1e20:	78 85       	ldd	r23, Y+8	; 0x08
    1e22:	89 85       	ldd	r24, Y+9	; 0x09
    1e24:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e26:	20 e0       	ldi	r18, 0x00	; 0
    1e28:	3f ef       	ldi	r19, 0xFF	; 255
    1e2a:	4f e7       	ldi	r20, 0x7F	; 127
    1e2c:	57 e4       	ldi	r21, 0x47	; 71
    1e2e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e32:	18 16       	cp	r1, r24
    1e34:	4c f5       	brge	.+82     	; 0x1e88 <main+0xc40>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e36:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e38:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e3a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e3c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e3e:	20 e0       	ldi	r18, 0x00	; 0
    1e40:	30 e0       	ldi	r19, 0x00	; 0
    1e42:	40 e2       	ldi	r20, 0x20	; 32
    1e44:	51 e4       	ldi	r21, 0x41	; 65
    1e46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e4a:	dc 01       	movw	r26, r24
    1e4c:	cb 01       	movw	r24, r22
    1e4e:	bc 01       	movw	r22, r24
    1e50:	cd 01       	movw	r24, r26
    1e52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e56:	dc 01       	movw	r26, r24
    1e58:	cb 01       	movw	r24, r22
    1e5a:	9e 83       	std	Y+6, r25	; 0x06
    1e5c:	8d 83       	std	Y+5, r24	; 0x05
    1e5e:	0f c0       	rjmp	.+30     	; 0x1e7e <main+0xc36>
    1e60:	80 e9       	ldi	r24, 0x90	; 144
    1e62:	91 e0       	ldi	r25, 0x01	; 1
    1e64:	9c 83       	std	Y+4, r25	; 0x04
    1e66:	8b 83       	std	Y+3, r24	; 0x03
    1e68:	8b 81       	ldd	r24, Y+3	; 0x03
    1e6a:	9c 81       	ldd	r25, Y+4	; 0x04
    1e6c:	01 97       	sbiw	r24, 0x01	; 1
    1e6e:	f1 f7       	brne	.-4      	; 0x1e6c <main+0xc24>
    1e70:	9c 83       	std	Y+4, r25	; 0x04
    1e72:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e74:	8d 81       	ldd	r24, Y+5	; 0x05
    1e76:	9e 81       	ldd	r25, Y+6	; 0x06
    1e78:	01 97       	sbiw	r24, 0x01	; 1
    1e7a:	9e 83       	std	Y+6, r25	; 0x06
    1e7c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e7e:	8d 81       	ldd	r24, Y+5	; 0x05
    1e80:	9e 81       	ldd	r25, Y+6	; 0x06
    1e82:	00 97       	sbiw	r24, 0x00	; 0
    1e84:	69 f7       	brne	.-38     	; 0x1e60 <main+0xc18>
    1e86:	14 c0       	rjmp	.+40     	; 0x1eb0 <main+0xc68>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e88:	6f 81       	ldd	r22, Y+7	; 0x07
    1e8a:	78 85       	ldd	r23, Y+8	; 0x08
    1e8c:	89 85       	ldd	r24, Y+9	; 0x09
    1e8e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e94:	dc 01       	movw	r26, r24
    1e96:	cb 01       	movw	r24, r22
    1e98:	9e 83       	std	Y+6, r25	; 0x06
    1e9a:	8d 83       	std	Y+5, r24	; 0x05
    1e9c:	8d 81       	ldd	r24, Y+5	; 0x05
    1e9e:	9e 81       	ldd	r25, Y+6	; 0x06
    1ea0:	9a 83       	std	Y+2, r25	; 0x02
    1ea2:	89 83       	std	Y+1, r24	; 0x01
    1ea4:	89 81       	ldd	r24, Y+1	; 0x01
    1ea6:	9a 81       	ldd	r25, Y+2	; 0x02
    1ea8:	01 97       	sbiw	r24, 0x01	; 1
    1eaa:	f1 f7       	brne	.-4      	; 0x1ea8 <main+0xc60>
    1eac:	9a 83       	std	Y+2, r25	; 0x02
    1eae:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(5000);
		Led_off();
    1eb0:	0e 94 0f 1d 	call	0x3a1e	; 0x3a1e <Led_off>
    1eb4:	de c9       	rjmp	.-3140   	; 0x1272 <main+0x2a>

00001eb6 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1eb6:	df 93       	push	r29
    1eb8:	cf 93       	push	r28
    1eba:	00 d0       	rcall	.+0      	; 0x1ebc <GPIO_setupPinDirection+0x6>
    1ebc:	00 d0       	rcall	.+0      	; 0x1ebe <GPIO_setupPinDirection+0x8>
    1ebe:	0f 92       	push	r0
    1ec0:	cd b7       	in	r28, 0x3d	; 61
    1ec2:	de b7       	in	r29, 0x3e	; 62
    1ec4:	89 83       	std	Y+1, r24	; 0x01
    1ec6:	6a 83       	std	Y+2, r22	; 0x02
    1ec8:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1eca:	8a 81       	ldd	r24, Y+2	; 0x02
    1ecc:	88 30       	cpi	r24, 0x08	; 8
    1ece:	08 f0       	brcs	.+2      	; 0x1ed2 <GPIO_setupPinDirection+0x1c>
    1ed0:	d5 c0       	rjmp	.+426    	; 0x207c <GPIO_setupPinDirection+0x1c6>
    1ed2:	89 81       	ldd	r24, Y+1	; 0x01
    1ed4:	84 30       	cpi	r24, 0x04	; 4
    1ed6:	08 f0       	brcs	.+2      	; 0x1eda <GPIO_setupPinDirection+0x24>
    1ed8:	d1 c0       	rjmp	.+418    	; 0x207c <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1eda:	89 81       	ldd	r24, Y+1	; 0x01
    1edc:	28 2f       	mov	r18, r24
    1ede:	30 e0       	ldi	r19, 0x00	; 0
    1ee0:	3d 83       	std	Y+5, r19	; 0x05
    1ee2:	2c 83       	std	Y+4, r18	; 0x04
    1ee4:	8c 81       	ldd	r24, Y+4	; 0x04
    1ee6:	9d 81       	ldd	r25, Y+5	; 0x05
    1ee8:	81 30       	cpi	r24, 0x01	; 1
    1eea:	91 05       	cpc	r25, r1
    1eec:	09 f4       	brne	.+2      	; 0x1ef0 <GPIO_setupPinDirection+0x3a>
    1eee:	43 c0       	rjmp	.+134    	; 0x1f76 <GPIO_setupPinDirection+0xc0>
    1ef0:	2c 81       	ldd	r18, Y+4	; 0x04
    1ef2:	3d 81       	ldd	r19, Y+5	; 0x05
    1ef4:	22 30       	cpi	r18, 0x02	; 2
    1ef6:	31 05       	cpc	r19, r1
    1ef8:	2c f4       	brge	.+10     	; 0x1f04 <GPIO_setupPinDirection+0x4e>
    1efa:	8c 81       	ldd	r24, Y+4	; 0x04
    1efc:	9d 81       	ldd	r25, Y+5	; 0x05
    1efe:	00 97       	sbiw	r24, 0x00	; 0
    1f00:	71 f0       	breq	.+28     	; 0x1f1e <GPIO_setupPinDirection+0x68>
    1f02:	bc c0       	rjmp	.+376    	; 0x207c <GPIO_setupPinDirection+0x1c6>
    1f04:	2c 81       	ldd	r18, Y+4	; 0x04
    1f06:	3d 81       	ldd	r19, Y+5	; 0x05
    1f08:	22 30       	cpi	r18, 0x02	; 2
    1f0a:	31 05       	cpc	r19, r1
    1f0c:	09 f4       	brne	.+2      	; 0x1f10 <GPIO_setupPinDirection+0x5a>
    1f0e:	5f c0       	rjmp	.+190    	; 0x1fce <GPIO_setupPinDirection+0x118>
    1f10:	8c 81       	ldd	r24, Y+4	; 0x04
    1f12:	9d 81       	ldd	r25, Y+5	; 0x05
    1f14:	83 30       	cpi	r24, 0x03	; 3
    1f16:	91 05       	cpc	r25, r1
    1f18:	09 f4       	brne	.+2      	; 0x1f1c <GPIO_setupPinDirection+0x66>
    1f1a:	85 c0       	rjmp	.+266    	; 0x2026 <GPIO_setupPinDirection+0x170>
    1f1c:	af c0       	rjmp	.+350    	; 0x207c <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1f1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f20:	81 30       	cpi	r24, 0x01	; 1
    1f22:	a1 f4       	brne	.+40     	; 0x1f4c <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1f24:	aa e3       	ldi	r26, 0x3A	; 58
    1f26:	b0 e0       	ldi	r27, 0x00	; 0
    1f28:	ea e3       	ldi	r30, 0x3A	; 58
    1f2a:	f0 e0       	ldi	r31, 0x00	; 0
    1f2c:	80 81       	ld	r24, Z
    1f2e:	48 2f       	mov	r20, r24
    1f30:	8a 81       	ldd	r24, Y+2	; 0x02
    1f32:	28 2f       	mov	r18, r24
    1f34:	30 e0       	ldi	r19, 0x00	; 0
    1f36:	81 e0       	ldi	r24, 0x01	; 1
    1f38:	90 e0       	ldi	r25, 0x00	; 0
    1f3a:	02 2e       	mov	r0, r18
    1f3c:	02 c0       	rjmp	.+4      	; 0x1f42 <GPIO_setupPinDirection+0x8c>
    1f3e:	88 0f       	add	r24, r24
    1f40:	99 1f       	adc	r25, r25
    1f42:	0a 94       	dec	r0
    1f44:	e2 f7       	brpl	.-8      	; 0x1f3e <GPIO_setupPinDirection+0x88>
    1f46:	84 2b       	or	r24, r20
    1f48:	8c 93       	st	X, r24
    1f4a:	98 c0       	rjmp	.+304    	; 0x207c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1f4c:	aa e3       	ldi	r26, 0x3A	; 58
    1f4e:	b0 e0       	ldi	r27, 0x00	; 0
    1f50:	ea e3       	ldi	r30, 0x3A	; 58
    1f52:	f0 e0       	ldi	r31, 0x00	; 0
    1f54:	80 81       	ld	r24, Z
    1f56:	48 2f       	mov	r20, r24
    1f58:	8a 81       	ldd	r24, Y+2	; 0x02
    1f5a:	28 2f       	mov	r18, r24
    1f5c:	30 e0       	ldi	r19, 0x00	; 0
    1f5e:	81 e0       	ldi	r24, 0x01	; 1
    1f60:	90 e0       	ldi	r25, 0x00	; 0
    1f62:	02 2e       	mov	r0, r18
    1f64:	02 c0       	rjmp	.+4      	; 0x1f6a <GPIO_setupPinDirection+0xb4>
    1f66:	88 0f       	add	r24, r24
    1f68:	99 1f       	adc	r25, r25
    1f6a:	0a 94       	dec	r0
    1f6c:	e2 f7       	brpl	.-8      	; 0x1f66 <GPIO_setupPinDirection+0xb0>
    1f6e:	80 95       	com	r24
    1f70:	84 23       	and	r24, r20
    1f72:	8c 93       	st	X, r24
    1f74:	83 c0       	rjmp	.+262    	; 0x207c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1f76:	8b 81       	ldd	r24, Y+3	; 0x03
    1f78:	81 30       	cpi	r24, 0x01	; 1
    1f7a:	a1 f4       	brne	.+40     	; 0x1fa4 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1f7c:	a7 e3       	ldi	r26, 0x37	; 55
    1f7e:	b0 e0       	ldi	r27, 0x00	; 0
    1f80:	e7 e3       	ldi	r30, 0x37	; 55
    1f82:	f0 e0       	ldi	r31, 0x00	; 0
    1f84:	80 81       	ld	r24, Z
    1f86:	48 2f       	mov	r20, r24
    1f88:	8a 81       	ldd	r24, Y+2	; 0x02
    1f8a:	28 2f       	mov	r18, r24
    1f8c:	30 e0       	ldi	r19, 0x00	; 0
    1f8e:	81 e0       	ldi	r24, 0x01	; 1
    1f90:	90 e0       	ldi	r25, 0x00	; 0
    1f92:	02 2e       	mov	r0, r18
    1f94:	02 c0       	rjmp	.+4      	; 0x1f9a <GPIO_setupPinDirection+0xe4>
    1f96:	88 0f       	add	r24, r24
    1f98:	99 1f       	adc	r25, r25
    1f9a:	0a 94       	dec	r0
    1f9c:	e2 f7       	brpl	.-8      	; 0x1f96 <GPIO_setupPinDirection+0xe0>
    1f9e:	84 2b       	or	r24, r20
    1fa0:	8c 93       	st	X, r24
    1fa2:	6c c0       	rjmp	.+216    	; 0x207c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1fa4:	a7 e3       	ldi	r26, 0x37	; 55
    1fa6:	b0 e0       	ldi	r27, 0x00	; 0
    1fa8:	e7 e3       	ldi	r30, 0x37	; 55
    1faa:	f0 e0       	ldi	r31, 0x00	; 0
    1fac:	80 81       	ld	r24, Z
    1fae:	48 2f       	mov	r20, r24
    1fb0:	8a 81       	ldd	r24, Y+2	; 0x02
    1fb2:	28 2f       	mov	r18, r24
    1fb4:	30 e0       	ldi	r19, 0x00	; 0
    1fb6:	81 e0       	ldi	r24, 0x01	; 1
    1fb8:	90 e0       	ldi	r25, 0x00	; 0
    1fba:	02 2e       	mov	r0, r18
    1fbc:	02 c0       	rjmp	.+4      	; 0x1fc2 <GPIO_setupPinDirection+0x10c>
    1fbe:	88 0f       	add	r24, r24
    1fc0:	99 1f       	adc	r25, r25
    1fc2:	0a 94       	dec	r0
    1fc4:	e2 f7       	brpl	.-8      	; 0x1fbe <GPIO_setupPinDirection+0x108>
    1fc6:	80 95       	com	r24
    1fc8:	84 23       	and	r24, r20
    1fca:	8c 93       	st	X, r24
    1fcc:	57 c0       	rjmp	.+174    	; 0x207c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1fce:	8b 81       	ldd	r24, Y+3	; 0x03
    1fd0:	81 30       	cpi	r24, 0x01	; 1
    1fd2:	a1 f4       	brne	.+40     	; 0x1ffc <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1fd4:	a4 e3       	ldi	r26, 0x34	; 52
    1fd6:	b0 e0       	ldi	r27, 0x00	; 0
    1fd8:	e4 e3       	ldi	r30, 0x34	; 52
    1fda:	f0 e0       	ldi	r31, 0x00	; 0
    1fdc:	80 81       	ld	r24, Z
    1fde:	48 2f       	mov	r20, r24
    1fe0:	8a 81       	ldd	r24, Y+2	; 0x02
    1fe2:	28 2f       	mov	r18, r24
    1fe4:	30 e0       	ldi	r19, 0x00	; 0
    1fe6:	81 e0       	ldi	r24, 0x01	; 1
    1fe8:	90 e0       	ldi	r25, 0x00	; 0
    1fea:	02 2e       	mov	r0, r18
    1fec:	02 c0       	rjmp	.+4      	; 0x1ff2 <GPIO_setupPinDirection+0x13c>
    1fee:	88 0f       	add	r24, r24
    1ff0:	99 1f       	adc	r25, r25
    1ff2:	0a 94       	dec	r0
    1ff4:	e2 f7       	brpl	.-8      	; 0x1fee <GPIO_setupPinDirection+0x138>
    1ff6:	84 2b       	or	r24, r20
    1ff8:	8c 93       	st	X, r24
    1ffa:	40 c0       	rjmp	.+128    	; 0x207c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1ffc:	a4 e3       	ldi	r26, 0x34	; 52
    1ffe:	b0 e0       	ldi	r27, 0x00	; 0
    2000:	e4 e3       	ldi	r30, 0x34	; 52
    2002:	f0 e0       	ldi	r31, 0x00	; 0
    2004:	80 81       	ld	r24, Z
    2006:	48 2f       	mov	r20, r24
    2008:	8a 81       	ldd	r24, Y+2	; 0x02
    200a:	28 2f       	mov	r18, r24
    200c:	30 e0       	ldi	r19, 0x00	; 0
    200e:	81 e0       	ldi	r24, 0x01	; 1
    2010:	90 e0       	ldi	r25, 0x00	; 0
    2012:	02 2e       	mov	r0, r18
    2014:	02 c0       	rjmp	.+4      	; 0x201a <GPIO_setupPinDirection+0x164>
    2016:	88 0f       	add	r24, r24
    2018:	99 1f       	adc	r25, r25
    201a:	0a 94       	dec	r0
    201c:	e2 f7       	brpl	.-8      	; 0x2016 <GPIO_setupPinDirection+0x160>
    201e:	80 95       	com	r24
    2020:	84 23       	and	r24, r20
    2022:	8c 93       	st	X, r24
    2024:	2b c0       	rjmp	.+86     	; 0x207c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    2026:	8b 81       	ldd	r24, Y+3	; 0x03
    2028:	81 30       	cpi	r24, 0x01	; 1
    202a:	a1 f4       	brne	.+40     	; 0x2054 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    202c:	a1 e3       	ldi	r26, 0x31	; 49
    202e:	b0 e0       	ldi	r27, 0x00	; 0
    2030:	e1 e3       	ldi	r30, 0x31	; 49
    2032:	f0 e0       	ldi	r31, 0x00	; 0
    2034:	80 81       	ld	r24, Z
    2036:	48 2f       	mov	r20, r24
    2038:	8a 81       	ldd	r24, Y+2	; 0x02
    203a:	28 2f       	mov	r18, r24
    203c:	30 e0       	ldi	r19, 0x00	; 0
    203e:	81 e0       	ldi	r24, 0x01	; 1
    2040:	90 e0       	ldi	r25, 0x00	; 0
    2042:	02 2e       	mov	r0, r18
    2044:	02 c0       	rjmp	.+4      	; 0x204a <GPIO_setupPinDirection+0x194>
    2046:	88 0f       	add	r24, r24
    2048:	99 1f       	adc	r25, r25
    204a:	0a 94       	dec	r0
    204c:	e2 f7       	brpl	.-8      	; 0x2046 <GPIO_setupPinDirection+0x190>
    204e:	84 2b       	or	r24, r20
    2050:	8c 93       	st	X, r24
    2052:	14 c0       	rjmp	.+40     	; 0x207c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    2054:	a1 e3       	ldi	r26, 0x31	; 49
    2056:	b0 e0       	ldi	r27, 0x00	; 0
    2058:	e1 e3       	ldi	r30, 0x31	; 49
    205a:	f0 e0       	ldi	r31, 0x00	; 0
    205c:	80 81       	ld	r24, Z
    205e:	48 2f       	mov	r20, r24
    2060:	8a 81       	ldd	r24, Y+2	; 0x02
    2062:	28 2f       	mov	r18, r24
    2064:	30 e0       	ldi	r19, 0x00	; 0
    2066:	81 e0       	ldi	r24, 0x01	; 1
    2068:	90 e0       	ldi	r25, 0x00	; 0
    206a:	02 2e       	mov	r0, r18
    206c:	02 c0       	rjmp	.+4      	; 0x2072 <GPIO_setupPinDirection+0x1bc>
    206e:	88 0f       	add	r24, r24
    2070:	99 1f       	adc	r25, r25
    2072:	0a 94       	dec	r0
    2074:	e2 f7       	brpl	.-8      	; 0x206e <GPIO_setupPinDirection+0x1b8>
    2076:	80 95       	com	r24
    2078:	84 23       	and	r24, r20
    207a:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    207c:	0f 90       	pop	r0
    207e:	0f 90       	pop	r0
    2080:	0f 90       	pop	r0
    2082:	0f 90       	pop	r0
    2084:	0f 90       	pop	r0
    2086:	cf 91       	pop	r28
    2088:	df 91       	pop	r29
    208a:	08 95       	ret

0000208c <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    208c:	df 93       	push	r29
    208e:	cf 93       	push	r28
    2090:	00 d0       	rcall	.+0      	; 0x2092 <GPIO_writePin+0x6>
    2092:	00 d0       	rcall	.+0      	; 0x2094 <GPIO_writePin+0x8>
    2094:	0f 92       	push	r0
    2096:	cd b7       	in	r28, 0x3d	; 61
    2098:	de b7       	in	r29, 0x3e	; 62
    209a:	89 83       	std	Y+1, r24	; 0x01
    209c:	6a 83       	std	Y+2, r22	; 0x02
    209e:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    20a0:	8a 81       	ldd	r24, Y+2	; 0x02
    20a2:	88 30       	cpi	r24, 0x08	; 8
    20a4:	08 f0       	brcs	.+2      	; 0x20a8 <GPIO_writePin+0x1c>
    20a6:	d5 c0       	rjmp	.+426    	; 0x2252 <GPIO_writePin+0x1c6>
    20a8:	89 81       	ldd	r24, Y+1	; 0x01
    20aa:	84 30       	cpi	r24, 0x04	; 4
    20ac:	08 f0       	brcs	.+2      	; 0x20b0 <GPIO_writePin+0x24>
    20ae:	d1 c0       	rjmp	.+418    	; 0x2252 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    20b0:	89 81       	ldd	r24, Y+1	; 0x01
    20b2:	28 2f       	mov	r18, r24
    20b4:	30 e0       	ldi	r19, 0x00	; 0
    20b6:	3d 83       	std	Y+5, r19	; 0x05
    20b8:	2c 83       	std	Y+4, r18	; 0x04
    20ba:	8c 81       	ldd	r24, Y+4	; 0x04
    20bc:	9d 81       	ldd	r25, Y+5	; 0x05
    20be:	81 30       	cpi	r24, 0x01	; 1
    20c0:	91 05       	cpc	r25, r1
    20c2:	09 f4       	brne	.+2      	; 0x20c6 <GPIO_writePin+0x3a>
    20c4:	43 c0       	rjmp	.+134    	; 0x214c <GPIO_writePin+0xc0>
    20c6:	2c 81       	ldd	r18, Y+4	; 0x04
    20c8:	3d 81       	ldd	r19, Y+5	; 0x05
    20ca:	22 30       	cpi	r18, 0x02	; 2
    20cc:	31 05       	cpc	r19, r1
    20ce:	2c f4       	brge	.+10     	; 0x20da <GPIO_writePin+0x4e>
    20d0:	8c 81       	ldd	r24, Y+4	; 0x04
    20d2:	9d 81       	ldd	r25, Y+5	; 0x05
    20d4:	00 97       	sbiw	r24, 0x00	; 0
    20d6:	71 f0       	breq	.+28     	; 0x20f4 <GPIO_writePin+0x68>
    20d8:	bc c0       	rjmp	.+376    	; 0x2252 <GPIO_writePin+0x1c6>
    20da:	2c 81       	ldd	r18, Y+4	; 0x04
    20dc:	3d 81       	ldd	r19, Y+5	; 0x05
    20de:	22 30       	cpi	r18, 0x02	; 2
    20e0:	31 05       	cpc	r19, r1
    20e2:	09 f4       	brne	.+2      	; 0x20e6 <GPIO_writePin+0x5a>
    20e4:	5f c0       	rjmp	.+190    	; 0x21a4 <GPIO_writePin+0x118>
    20e6:	8c 81       	ldd	r24, Y+4	; 0x04
    20e8:	9d 81       	ldd	r25, Y+5	; 0x05
    20ea:	83 30       	cpi	r24, 0x03	; 3
    20ec:	91 05       	cpc	r25, r1
    20ee:	09 f4       	brne	.+2      	; 0x20f2 <GPIO_writePin+0x66>
    20f0:	85 c0       	rjmp	.+266    	; 0x21fc <GPIO_writePin+0x170>
    20f2:	af c0       	rjmp	.+350    	; 0x2252 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    20f4:	8b 81       	ldd	r24, Y+3	; 0x03
    20f6:	81 30       	cpi	r24, 0x01	; 1
    20f8:	a1 f4       	brne	.+40     	; 0x2122 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    20fa:	ab e3       	ldi	r26, 0x3B	; 59
    20fc:	b0 e0       	ldi	r27, 0x00	; 0
    20fe:	eb e3       	ldi	r30, 0x3B	; 59
    2100:	f0 e0       	ldi	r31, 0x00	; 0
    2102:	80 81       	ld	r24, Z
    2104:	48 2f       	mov	r20, r24
    2106:	8a 81       	ldd	r24, Y+2	; 0x02
    2108:	28 2f       	mov	r18, r24
    210a:	30 e0       	ldi	r19, 0x00	; 0
    210c:	81 e0       	ldi	r24, 0x01	; 1
    210e:	90 e0       	ldi	r25, 0x00	; 0
    2110:	02 2e       	mov	r0, r18
    2112:	02 c0       	rjmp	.+4      	; 0x2118 <GPIO_writePin+0x8c>
    2114:	88 0f       	add	r24, r24
    2116:	99 1f       	adc	r25, r25
    2118:	0a 94       	dec	r0
    211a:	e2 f7       	brpl	.-8      	; 0x2114 <GPIO_writePin+0x88>
    211c:	84 2b       	or	r24, r20
    211e:	8c 93       	st	X, r24
    2120:	98 c0       	rjmp	.+304    	; 0x2252 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    2122:	ab e3       	ldi	r26, 0x3B	; 59
    2124:	b0 e0       	ldi	r27, 0x00	; 0
    2126:	eb e3       	ldi	r30, 0x3B	; 59
    2128:	f0 e0       	ldi	r31, 0x00	; 0
    212a:	80 81       	ld	r24, Z
    212c:	48 2f       	mov	r20, r24
    212e:	8a 81       	ldd	r24, Y+2	; 0x02
    2130:	28 2f       	mov	r18, r24
    2132:	30 e0       	ldi	r19, 0x00	; 0
    2134:	81 e0       	ldi	r24, 0x01	; 1
    2136:	90 e0       	ldi	r25, 0x00	; 0
    2138:	02 2e       	mov	r0, r18
    213a:	02 c0       	rjmp	.+4      	; 0x2140 <GPIO_writePin+0xb4>
    213c:	88 0f       	add	r24, r24
    213e:	99 1f       	adc	r25, r25
    2140:	0a 94       	dec	r0
    2142:	e2 f7       	brpl	.-8      	; 0x213c <GPIO_writePin+0xb0>
    2144:	80 95       	com	r24
    2146:	84 23       	and	r24, r20
    2148:	8c 93       	st	X, r24
    214a:	83 c0       	rjmp	.+262    	; 0x2252 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    214c:	8b 81       	ldd	r24, Y+3	; 0x03
    214e:	81 30       	cpi	r24, 0x01	; 1
    2150:	a1 f4       	brne	.+40     	; 0x217a <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    2152:	a8 e3       	ldi	r26, 0x38	; 56
    2154:	b0 e0       	ldi	r27, 0x00	; 0
    2156:	e8 e3       	ldi	r30, 0x38	; 56
    2158:	f0 e0       	ldi	r31, 0x00	; 0
    215a:	80 81       	ld	r24, Z
    215c:	48 2f       	mov	r20, r24
    215e:	8a 81       	ldd	r24, Y+2	; 0x02
    2160:	28 2f       	mov	r18, r24
    2162:	30 e0       	ldi	r19, 0x00	; 0
    2164:	81 e0       	ldi	r24, 0x01	; 1
    2166:	90 e0       	ldi	r25, 0x00	; 0
    2168:	02 2e       	mov	r0, r18
    216a:	02 c0       	rjmp	.+4      	; 0x2170 <GPIO_writePin+0xe4>
    216c:	88 0f       	add	r24, r24
    216e:	99 1f       	adc	r25, r25
    2170:	0a 94       	dec	r0
    2172:	e2 f7       	brpl	.-8      	; 0x216c <GPIO_writePin+0xe0>
    2174:	84 2b       	or	r24, r20
    2176:	8c 93       	st	X, r24
    2178:	6c c0       	rjmp	.+216    	; 0x2252 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    217a:	a8 e3       	ldi	r26, 0x38	; 56
    217c:	b0 e0       	ldi	r27, 0x00	; 0
    217e:	e8 e3       	ldi	r30, 0x38	; 56
    2180:	f0 e0       	ldi	r31, 0x00	; 0
    2182:	80 81       	ld	r24, Z
    2184:	48 2f       	mov	r20, r24
    2186:	8a 81       	ldd	r24, Y+2	; 0x02
    2188:	28 2f       	mov	r18, r24
    218a:	30 e0       	ldi	r19, 0x00	; 0
    218c:	81 e0       	ldi	r24, 0x01	; 1
    218e:	90 e0       	ldi	r25, 0x00	; 0
    2190:	02 2e       	mov	r0, r18
    2192:	02 c0       	rjmp	.+4      	; 0x2198 <GPIO_writePin+0x10c>
    2194:	88 0f       	add	r24, r24
    2196:	99 1f       	adc	r25, r25
    2198:	0a 94       	dec	r0
    219a:	e2 f7       	brpl	.-8      	; 0x2194 <GPIO_writePin+0x108>
    219c:	80 95       	com	r24
    219e:	84 23       	and	r24, r20
    21a0:	8c 93       	st	X, r24
    21a2:	57 c0       	rjmp	.+174    	; 0x2252 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    21a4:	8b 81       	ldd	r24, Y+3	; 0x03
    21a6:	81 30       	cpi	r24, 0x01	; 1
    21a8:	a1 f4       	brne	.+40     	; 0x21d2 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    21aa:	a5 e3       	ldi	r26, 0x35	; 53
    21ac:	b0 e0       	ldi	r27, 0x00	; 0
    21ae:	e5 e3       	ldi	r30, 0x35	; 53
    21b0:	f0 e0       	ldi	r31, 0x00	; 0
    21b2:	80 81       	ld	r24, Z
    21b4:	48 2f       	mov	r20, r24
    21b6:	8a 81       	ldd	r24, Y+2	; 0x02
    21b8:	28 2f       	mov	r18, r24
    21ba:	30 e0       	ldi	r19, 0x00	; 0
    21bc:	81 e0       	ldi	r24, 0x01	; 1
    21be:	90 e0       	ldi	r25, 0x00	; 0
    21c0:	02 2e       	mov	r0, r18
    21c2:	02 c0       	rjmp	.+4      	; 0x21c8 <GPIO_writePin+0x13c>
    21c4:	88 0f       	add	r24, r24
    21c6:	99 1f       	adc	r25, r25
    21c8:	0a 94       	dec	r0
    21ca:	e2 f7       	brpl	.-8      	; 0x21c4 <GPIO_writePin+0x138>
    21cc:	84 2b       	or	r24, r20
    21ce:	8c 93       	st	X, r24
    21d0:	40 c0       	rjmp	.+128    	; 0x2252 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    21d2:	a5 e3       	ldi	r26, 0x35	; 53
    21d4:	b0 e0       	ldi	r27, 0x00	; 0
    21d6:	e5 e3       	ldi	r30, 0x35	; 53
    21d8:	f0 e0       	ldi	r31, 0x00	; 0
    21da:	80 81       	ld	r24, Z
    21dc:	48 2f       	mov	r20, r24
    21de:	8a 81       	ldd	r24, Y+2	; 0x02
    21e0:	28 2f       	mov	r18, r24
    21e2:	30 e0       	ldi	r19, 0x00	; 0
    21e4:	81 e0       	ldi	r24, 0x01	; 1
    21e6:	90 e0       	ldi	r25, 0x00	; 0
    21e8:	02 2e       	mov	r0, r18
    21ea:	02 c0       	rjmp	.+4      	; 0x21f0 <GPIO_writePin+0x164>
    21ec:	88 0f       	add	r24, r24
    21ee:	99 1f       	adc	r25, r25
    21f0:	0a 94       	dec	r0
    21f2:	e2 f7       	brpl	.-8      	; 0x21ec <GPIO_writePin+0x160>
    21f4:	80 95       	com	r24
    21f6:	84 23       	and	r24, r20
    21f8:	8c 93       	st	X, r24
    21fa:	2b c0       	rjmp	.+86     	; 0x2252 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    21fc:	8b 81       	ldd	r24, Y+3	; 0x03
    21fe:	81 30       	cpi	r24, 0x01	; 1
    2200:	a1 f4       	brne	.+40     	; 0x222a <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    2202:	a2 e3       	ldi	r26, 0x32	; 50
    2204:	b0 e0       	ldi	r27, 0x00	; 0
    2206:	e2 e3       	ldi	r30, 0x32	; 50
    2208:	f0 e0       	ldi	r31, 0x00	; 0
    220a:	80 81       	ld	r24, Z
    220c:	48 2f       	mov	r20, r24
    220e:	8a 81       	ldd	r24, Y+2	; 0x02
    2210:	28 2f       	mov	r18, r24
    2212:	30 e0       	ldi	r19, 0x00	; 0
    2214:	81 e0       	ldi	r24, 0x01	; 1
    2216:	90 e0       	ldi	r25, 0x00	; 0
    2218:	02 2e       	mov	r0, r18
    221a:	02 c0       	rjmp	.+4      	; 0x2220 <GPIO_writePin+0x194>
    221c:	88 0f       	add	r24, r24
    221e:	99 1f       	adc	r25, r25
    2220:	0a 94       	dec	r0
    2222:	e2 f7       	brpl	.-8      	; 0x221c <GPIO_writePin+0x190>
    2224:	84 2b       	or	r24, r20
    2226:	8c 93       	st	X, r24
    2228:	14 c0       	rjmp	.+40     	; 0x2252 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    222a:	a2 e3       	ldi	r26, 0x32	; 50
    222c:	b0 e0       	ldi	r27, 0x00	; 0
    222e:	e2 e3       	ldi	r30, 0x32	; 50
    2230:	f0 e0       	ldi	r31, 0x00	; 0
    2232:	80 81       	ld	r24, Z
    2234:	48 2f       	mov	r20, r24
    2236:	8a 81       	ldd	r24, Y+2	; 0x02
    2238:	28 2f       	mov	r18, r24
    223a:	30 e0       	ldi	r19, 0x00	; 0
    223c:	81 e0       	ldi	r24, 0x01	; 1
    223e:	90 e0       	ldi	r25, 0x00	; 0
    2240:	02 2e       	mov	r0, r18
    2242:	02 c0       	rjmp	.+4      	; 0x2248 <GPIO_writePin+0x1bc>
    2244:	88 0f       	add	r24, r24
    2246:	99 1f       	adc	r25, r25
    2248:	0a 94       	dec	r0
    224a:	e2 f7       	brpl	.-8      	; 0x2244 <GPIO_writePin+0x1b8>
    224c:	80 95       	com	r24
    224e:	84 23       	and	r24, r20
    2250:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    2252:	0f 90       	pop	r0
    2254:	0f 90       	pop	r0
    2256:	0f 90       	pop	r0
    2258:	0f 90       	pop	r0
    225a:	0f 90       	pop	r0
    225c:	cf 91       	pop	r28
    225e:	df 91       	pop	r29
    2260:	08 95       	ret

00002262 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    2262:	df 93       	push	r29
    2264:	cf 93       	push	r28
    2266:	00 d0       	rcall	.+0      	; 0x2268 <GPIO_readPin+0x6>
    2268:	00 d0       	rcall	.+0      	; 0x226a <GPIO_readPin+0x8>
    226a:	0f 92       	push	r0
    226c:	cd b7       	in	r28, 0x3d	; 61
    226e:	de b7       	in	r29, 0x3e	; 62
    2270:	8a 83       	std	Y+2, r24	; 0x02
    2272:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    2274:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    2276:	8b 81       	ldd	r24, Y+3	; 0x03
    2278:	88 30       	cpi	r24, 0x08	; 8
    227a:	08 f0       	brcs	.+2      	; 0x227e <GPIO_readPin+0x1c>
    227c:	84 c0       	rjmp	.+264    	; 0x2386 <GPIO_readPin+0x124>
    227e:	8a 81       	ldd	r24, Y+2	; 0x02
    2280:	84 30       	cpi	r24, 0x04	; 4
    2282:	08 f0       	brcs	.+2      	; 0x2286 <GPIO_readPin+0x24>
    2284:	80 c0       	rjmp	.+256    	; 0x2386 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    2286:	8a 81       	ldd	r24, Y+2	; 0x02
    2288:	28 2f       	mov	r18, r24
    228a:	30 e0       	ldi	r19, 0x00	; 0
    228c:	3d 83       	std	Y+5, r19	; 0x05
    228e:	2c 83       	std	Y+4, r18	; 0x04
    2290:	4c 81       	ldd	r20, Y+4	; 0x04
    2292:	5d 81       	ldd	r21, Y+5	; 0x05
    2294:	41 30       	cpi	r20, 0x01	; 1
    2296:	51 05       	cpc	r21, r1
    2298:	79 f1       	breq	.+94     	; 0x22f8 <GPIO_readPin+0x96>
    229a:	8c 81       	ldd	r24, Y+4	; 0x04
    229c:	9d 81       	ldd	r25, Y+5	; 0x05
    229e:	82 30       	cpi	r24, 0x02	; 2
    22a0:	91 05       	cpc	r25, r1
    22a2:	34 f4       	brge	.+12     	; 0x22b0 <GPIO_readPin+0x4e>
    22a4:	2c 81       	ldd	r18, Y+4	; 0x04
    22a6:	3d 81       	ldd	r19, Y+5	; 0x05
    22a8:	21 15       	cp	r18, r1
    22aa:	31 05       	cpc	r19, r1
    22ac:	69 f0       	breq	.+26     	; 0x22c8 <GPIO_readPin+0x66>
    22ae:	6b c0       	rjmp	.+214    	; 0x2386 <GPIO_readPin+0x124>
    22b0:	4c 81       	ldd	r20, Y+4	; 0x04
    22b2:	5d 81       	ldd	r21, Y+5	; 0x05
    22b4:	42 30       	cpi	r20, 0x02	; 2
    22b6:	51 05       	cpc	r21, r1
    22b8:	b9 f1       	breq	.+110    	; 0x2328 <GPIO_readPin+0xc6>
    22ba:	8c 81       	ldd	r24, Y+4	; 0x04
    22bc:	9d 81       	ldd	r25, Y+5	; 0x05
    22be:	83 30       	cpi	r24, 0x03	; 3
    22c0:	91 05       	cpc	r25, r1
    22c2:	09 f4       	brne	.+2      	; 0x22c6 <GPIO_readPin+0x64>
    22c4:	49 c0       	rjmp	.+146    	; 0x2358 <GPIO_readPin+0xf6>
    22c6:	5f c0       	rjmp	.+190    	; 0x2386 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    22c8:	e9 e3       	ldi	r30, 0x39	; 57
    22ca:	f0 e0       	ldi	r31, 0x00	; 0
    22cc:	80 81       	ld	r24, Z
    22ce:	28 2f       	mov	r18, r24
    22d0:	30 e0       	ldi	r19, 0x00	; 0
    22d2:	8b 81       	ldd	r24, Y+3	; 0x03
    22d4:	88 2f       	mov	r24, r24
    22d6:	90 e0       	ldi	r25, 0x00	; 0
    22d8:	a9 01       	movw	r20, r18
    22da:	02 c0       	rjmp	.+4      	; 0x22e0 <GPIO_readPin+0x7e>
    22dc:	55 95       	asr	r21
    22de:	47 95       	ror	r20
    22e0:	8a 95       	dec	r24
    22e2:	e2 f7       	brpl	.-8      	; 0x22dc <GPIO_readPin+0x7a>
    22e4:	ca 01       	movw	r24, r20
    22e6:	81 70       	andi	r24, 0x01	; 1
    22e8:	90 70       	andi	r25, 0x00	; 0
    22ea:	88 23       	and	r24, r24
    22ec:	19 f0       	breq	.+6      	; 0x22f4 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    22ee:	81 e0       	ldi	r24, 0x01	; 1
    22f0:	89 83       	std	Y+1, r24	; 0x01
    22f2:	49 c0       	rjmp	.+146    	; 0x2386 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    22f4:	19 82       	std	Y+1, r1	; 0x01
    22f6:	47 c0       	rjmp	.+142    	; 0x2386 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    22f8:	e6 e3       	ldi	r30, 0x36	; 54
    22fa:	f0 e0       	ldi	r31, 0x00	; 0
    22fc:	80 81       	ld	r24, Z
    22fe:	28 2f       	mov	r18, r24
    2300:	30 e0       	ldi	r19, 0x00	; 0
    2302:	8b 81       	ldd	r24, Y+3	; 0x03
    2304:	88 2f       	mov	r24, r24
    2306:	90 e0       	ldi	r25, 0x00	; 0
    2308:	a9 01       	movw	r20, r18
    230a:	02 c0       	rjmp	.+4      	; 0x2310 <GPIO_readPin+0xae>
    230c:	55 95       	asr	r21
    230e:	47 95       	ror	r20
    2310:	8a 95       	dec	r24
    2312:	e2 f7       	brpl	.-8      	; 0x230c <GPIO_readPin+0xaa>
    2314:	ca 01       	movw	r24, r20
    2316:	81 70       	andi	r24, 0x01	; 1
    2318:	90 70       	andi	r25, 0x00	; 0
    231a:	88 23       	and	r24, r24
    231c:	19 f0       	breq	.+6      	; 0x2324 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    231e:	81 e0       	ldi	r24, 0x01	; 1
    2320:	89 83       	std	Y+1, r24	; 0x01
    2322:	31 c0       	rjmp	.+98     	; 0x2386 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2324:	19 82       	std	Y+1, r1	; 0x01
    2326:	2f c0       	rjmp	.+94     	; 0x2386 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    2328:	e3 e3       	ldi	r30, 0x33	; 51
    232a:	f0 e0       	ldi	r31, 0x00	; 0
    232c:	80 81       	ld	r24, Z
    232e:	28 2f       	mov	r18, r24
    2330:	30 e0       	ldi	r19, 0x00	; 0
    2332:	8b 81       	ldd	r24, Y+3	; 0x03
    2334:	88 2f       	mov	r24, r24
    2336:	90 e0       	ldi	r25, 0x00	; 0
    2338:	a9 01       	movw	r20, r18
    233a:	02 c0       	rjmp	.+4      	; 0x2340 <GPIO_readPin+0xde>
    233c:	55 95       	asr	r21
    233e:	47 95       	ror	r20
    2340:	8a 95       	dec	r24
    2342:	e2 f7       	brpl	.-8      	; 0x233c <GPIO_readPin+0xda>
    2344:	ca 01       	movw	r24, r20
    2346:	81 70       	andi	r24, 0x01	; 1
    2348:	90 70       	andi	r25, 0x00	; 0
    234a:	88 23       	and	r24, r24
    234c:	19 f0       	breq	.+6      	; 0x2354 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    234e:	81 e0       	ldi	r24, 0x01	; 1
    2350:	89 83       	std	Y+1, r24	; 0x01
    2352:	19 c0       	rjmp	.+50     	; 0x2386 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2354:	19 82       	std	Y+1, r1	; 0x01
    2356:	17 c0       	rjmp	.+46     	; 0x2386 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    2358:	e0 e3       	ldi	r30, 0x30	; 48
    235a:	f0 e0       	ldi	r31, 0x00	; 0
    235c:	80 81       	ld	r24, Z
    235e:	28 2f       	mov	r18, r24
    2360:	30 e0       	ldi	r19, 0x00	; 0
    2362:	8b 81       	ldd	r24, Y+3	; 0x03
    2364:	88 2f       	mov	r24, r24
    2366:	90 e0       	ldi	r25, 0x00	; 0
    2368:	a9 01       	movw	r20, r18
    236a:	02 c0       	rjmp	.+4      	; 0x2370 <GPIO_readPin+0x10e>
    236c:	55 95       	asr	r21
    236e:	47 95       	ror	r20
    2370:	8a 95       	dec	r24
    2372:	e2 f7       	brpl	.-8      	; 0x236c <GPIO_readPin+0x10a>
    2374:	ca 01       	movw	r24, r20
    2376:	81 70       	andi	r24, 0x01	; 1
    2378:	90 70       	andi	r25, 0x00	; 0
    237a:	88 23       	and	r24, r24
    237c:	19 f0       	breq	.+6      	; 0x2384 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    237e:	81 e0       	ldi	r24, 0x01	; 1
    2380:	89 83       	std	Y+1, r24	; 0x01
    2382:	01 c0       	rjmp	.+2      	; 0x2386 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2384:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    2386:	89 81       	ldd	r24, Y+1	; 0x01
}
    2388:	0f 90       	pop	r0
    238a:	0f 90       	pop	r0
    238c:	0f 90       	pop	r0
    238e:	0f 90       	pop	r0
    2390:	0f 90       	pop	r0
    2392:	cf 91       	pop	r28
    2394:	df 91       	pop	r29
    2396:	08 95       	ret

00002398 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    2398:	df 93       	push	r29
    239a:	cf 93       	push	r28
    239c:	00 d0       	rcall	.+0      	; 0x239e <GPIO_setupPortDirection+0x6>
    239e:	00 d0       	rcall	.+0      	; 0x23a0 <GPIO_setupPortDirection+0x8>
    23a0:	cd b7       	in	r28, 0x3d	; 61
    23a2:	de b7       	in	r29, 0x3e	; 62
    23a4:	89 83       	std	Y+1, r24	; 0x01
    23a6:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    23a8:	89 81       	ldd	r24, Y+1	; 0x01
    23aa:	84 30       	cpi	r24, 0x04	; 4
    23ac:	90 f5       	brcc	.+100    	; 0x2412 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    23ae:	89 81       	ldd	r24, Y+1	; 0x01
    23b0:	28 2f       	mov	r18, r24
    23b2:	30 e0       	ldi	r19, 0x00	; 0
    23b4:	3c 83       	std	Y+4, r19	; 0x04
    23b6:	2b 83       	std	Y+3, r18	; 0x03
    23b8:	8b 81       	ldd	r24, Y+3	; 0x03
    23ba:	9c 81       	ldd	r25, Y+4	; 0x04
    23bc:	81 30       	cpi	r24, 0x01	; 1
    23be:	91 05       	cpc	r25, r1
    23c0:	d1 f0       	breq	.+52     	; 0x23f6 <GPIO_setupPortDirection+0x5e>
    23c2:	2b 81       	ldd	r18, Y+3	; 0x03
    23c4:	3c 81       	ldd	r19, Y+4	; 0x04
    23c6:	22 30       	cpi	r18, 0x02	; 2
    23c8:	31 05       	cpc	r19, r1
    23ca:	2c f4       	brge	.+10     	; 0x23d6 <GPIO_setupPortDirection+0x3e>
    23cc:	8b 81       	ldd	r24, Y+3	; 0x03
    23ce:	9c 81       	ldd	r25, Y+4	; 0x04
    23d0:	00 97       	sbiw	r24, 0x00	; 0
    23d2:	61 f0       	breq	.+24     	; 0x23ec <GPIO_setupPortDirection+0x54>
    23d4:	1e c0       	rjmp	.+60     	; 0x2412 <GPIO_setupPortDirection+0x7a>
    23d6:	2b 81       	ldd	r18, Y+3	; 0x03
    23d8:	3c 81       	ldd	r19, Y+4	; 0x04
    23da:	22 30       	cpi	r18, 0x02	; 2
    23dc:	31 05       	cpc	r19, r1
    23de:	81 f0       	breq	.+32     	; 0x2400 <GPIO_setupPortDirection+0x68>
    23e0:	8b 81       	ldd	r24, Y+3	; 0x03
    23e2:	9c 81       	ldd	r25, Y+4	; 0x04
    23e4:	83 30       	cpi	r24, 0x03	; 3
    23e6:	91 05       	cpc	r25, r1
    23e8:	81 f0       	breq	.+32     	; 0x240a <GPIO_setupPortDirection+0x72>
    23ea:	13 c0       	rjmp	.+38     	; 0x2412 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    23ec:	ea e3       	ldi	r30, 0x3A	; 58
    23ee:	f0 e0       	ldi	r31, 0x00	; 0
    23f0:	8a 81       	ldd	r24, Y+2	; 0x02
    23f2:	80 83       	st	Z, r24
    23f4:	0e c0       	rjmp	.+28     	; 0x2412 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    23f6:	e7 e3       	ldi	r30, 0x37	; 55
    23f8:	f0 e0       	ldi	r31, 0x00	; 0
    23fa:	8a 81       	ldd	r24, Y+2	; 0x02
    23fc:	80 83       	st	Z, r24
    23fe:	09 c0       	rjmp	.+18     	; 0x2412 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    2400:	e4 e3       	ldi	r30, 0x34	; 52
    2402:	f0 e0       	ldi	r31, 0x00	; 0
    2404:	8a 81       	ldd	r24, Y+2	; 0x02
    2406:	80 83       	st	Z, r24
    2408:	04 c0       	rjmp	.+8      	; 0x2412 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    240a:	e1 e3       	ldi	r30, 0x31	; 49
    240c:	f0 e0       	ldi	r31, 0x00	; 0
    240e:	8a 81       	ldd	r24, Y+2	; 0x02
    2410:	80 83       	st	Z, r24
			break;
		}
	}
}
    2412:	0f 90       	pop	r0
    2414:	0f 90       	pop	r0
    2416:	0f 90       	pop	r0
    2418:	0f 90       	pop	r0
    241a:	cf 91       	pop	r28
    241c:	df 91       	pop	r29
    241e:	08 95       	ret

00002420 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    2420:	df 93       	push	r29
    2422:	cf 93       	push	r28
    2424:	00 d0       	rcall	.+0      	; 0x2426 <GPIO_writePort+0x6>
    2426:	00 d0       	rcall	.+0      	; 0x2428 <GPIO_writePort+0x8>
    2428:	cd b7       	in	r28, 0x3d	; 61
    242a:	de b7       	in	r29, 0x3e	; 62
    242c:	89 83       	std	Y+1, r24	; 0x01
    242e:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2430:	89 81       	ldd	r24, Y+1	; 0x01
    2432:	84 30       	cpi	r24, 0x04	; 4
    2434:	90 f5       	brcc	.+100    	; 0x249a <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    2436:	89 81       	ldd	r24, Y+1	; 0x01
    2438:	28 2f       	mov	r18, r24
    243a:	30 e0       	ldi	r19, 0x00	; 0
    243c:	3c 83       	std	Y+4, r19	; 0x04
    243e:	2b 83       	std	Y+3, r18	; 0x03
    2440:	8b 81       	ldd	r24, Y+3	; 0x03
    2442:	9c 81       	ldd	r25, Y+4	; 0x04
    2444:	81 30       	cpi	r24, 0x01	; 1
    2446:	91 05       	cpc	r25, r1
    2448:	d1 f0       	breq	.+52     	; 0x247e <GPIO_writePort+0x5e>
    244a:	2b 81       	ldd	r18, Y+3	; 0x03
    244c:	3c 81       	ldd	r19, Y+4	; 0x04
    244e:	22 30       	cpi	r18, 0x02	; 2
    2450:	31 05       	cpc	r19, r1
    2452:	2c f4       	brge	.+10     	; 0x245e <GPIO_writePort+0x3e>
    2454:	8b 81       	ldd	r24, Y+3	; 0x03
    2456:	9c 81       	ldd	r25, Y+4	; 0x04
    2458:	00 97       	sbiw	r24, 0x00	; 0
    245a:	61 f0       	breq	.+24     	; 0x2474 <GPIO_writePort+0x54>
    245c:	1e c0       	rjmp	.+60     	; 0x249a <GPIO_writePort+0x7a>
    245e:	2b 81       	ldd	r18, Y+3	; 0x03
    2460:	3c 81       	ldd	r19, Y+4	; 0x04
    2462:	22 30       	cpi	r18, 0x02	; 2
    2464:	31 05       	cpc	r19, r1
    2466:	81 f0       	breq	.+32     	; 0x2488 <GPIO_writePort+0x68>
    2468:	8b 81       	ldd	r24, Y+3	; 0x03
    246a:	9c 81       	ldd	r25, Y+4	; 0x04
    246c:	83 30       	cpi	r24, 0x03	; 3
    246e:	91 05       	cpc	r25, r1
    2470:	81 f0       	breq	.+32     	; 0x2492 <GPIO_writePort+0x72>
    2472:	13 c0       	rjmp	.+38     	; 0x249a <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    2474:	eb e3       	ldi	r30, 0x3B	; 59
    2476:	f0 e0       	ldi	r31, 0x00	; 0
    2478:	8a 81       	ldd	r24, Y+2	; 0x02
    247a:	80 83       	st	Z, r24
    247c:	0e c0       	rjmp	.+28     	; 0x249a <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    247e:	e8 e3       	ldi	r30, 0x38	; 56
    2480:	f0 e0       	ldi	r31, 0x00	; 0
    2482:	8a 81       	ldd	r24, Y+2	; 0x02
    2484:	80 83       	st	Z, r24
    2486:	09 c0       	rjmp	.+18     	; 0x249a <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    2488:	e5 e3       	ldi	r30, 0x35	; 53
    248a:	f0 e0       	ldi	r31, 0x00	; 0
    248c:	8a 81       	ldd	r24, Y+2	; 0x02
    248e:	80 83       	st	Z, r24
    2490:	04 c0       	rjmp	.+8      	; 0x249a <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    2492:	e2 e3       	ldi	r30, 0x32	; 50
    2494:	f0 e0       	ldi	r31, 0x00	; 0
    2496:	8a 81       	ldd	r24, Y+2	; 0x02
    2498:	80 83       	st	Z, r24
			break;
		}
	}
}
    249a:	0f 90       	pop	r0
    249c:	0f 90       	pop	r0
    249e:	0f 90       	pop	r0
    24a0:	0f 90       	pop	r0
    24a2:	cf 91       	pop	r28
    24a4:	df 91       	pop	r29
    24a6:	08 95       	ret

000024a8 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    24a8:	df 93       	push	r29
    24aa:	cf 93       	push	r28
    24ac:	00 d0       	rcall	.+0      	; 0x24ae <GPIO_readPort+0x6>
    24ae:	00 d0       	rcall	.+0      	; 0x24b0 <GPIO_readPort+0x8>
    24b0:	cd b7       	in	r28, 0x3d	; 61
    24b2:	de b7       	in	r29, 0x3e	; 62
    24b4:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    24b6:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    24b8:	8a 81       	ldd	r24, Y+2	; 0x02
    24ba:	84 30       	cpi	r24, 0x04	; 4
    24bc:	90 f5       	brcc	.+100    	; 0x2522 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    24be:	8a 81       	ldd	r24, Y+2	; 0x02
    24c0:	28 2f       	mov	r18, r24
    24c2:	30 e0       	ldi	r19, 0x00	; 0
    24c4:	3c 83       	std	Y+4, r19	; 0x04
    24c6:	2b 83       	std	Y+3, r18	; 0x03
    24c8:	8b 81       	ldd	r24, Y+3	; 0x03
    24ca:	9c 81       	ldd	r25, Y+4	; 0x04
    24cc:	81 30       	cpi	r24, 0x01	; 1
    24ce:	91 05       	cpc	r25, r1
    24d0:	d1 f0       	breq	.+52     	; 0x2506 <GPIO_readPort+0x5e>
    24d2:	2b 81       	ldd	r18, Y+3	; 0x03
    24d4:	3c 81       	ldd	r19, Y+4	; 0x04
    24d6:	22 30       	cpi	r18, 0x02	; 2
    24d8:	31 05       	cpc	r19, r1
    24da:	2c f4       	brge	.+10     	; 0x24e6 <GPIO_readPort+0x3e>
    24dc:	8b 81       	ldd	r24, Y+3	; 0x03
    24de:	9c 81       	ldd	r25, Y+4	; 0x04
    24e0:	00 97       	sbiw	r24, 0x00	; 0
    24e2:	61 f0       	breq	.+24     	; 0x24fc <GPIO_readPort+0x54>
    24e4:	1e c0       	rjmp	.+60     	; 0x2522 <GPIO_readPort+0x7a>
    24e6:	2b 81       	ldd	r18, Y+3	; 0x03
    24e8:	3c 81       	ldd	r19, Y+4	; 0x04
    24ea:	22 30       	cpi	r18, 0x02	; 2
    24ec:	31 05       	cpc	r19, r1
    24ee:	81 f0       	breq	.+32     	; 0x2510 <GPIO_readPort+0x68>
    24f0:	8b 81       	ldd	r24, Y+3	; 0x03
    24f2:	9c 81       	ldd	r25, Y+4	; 0x04
    24f4:	83 30       	cpi	r24, 0x03	; 3
    24f6:	91 05       	cpc	r25, r1
    24f8:	81 f0       	breq	.+32     	; 0x251a <GPIO_readPort+0x72>
    24fa:	13 c0       	rjmp	.+38     	; 0x2522 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    24fc:	e9 e3       	ldi	r30, 0x39	; 57
    24fe:	f0 e0       	ldi	r31, 0x00	; 0
    2500:	80 81       	ld	r24, Z
    2502:	89 83       	std	Y+1, r24	; 0x01
    2504:	0e c0       	rjmp	.+28     	; 0x2522 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    2506:	e6 e3       	ldi	r30, 0x36	; 54
    2508:	f0 e0       	ldi	r31, 0x00	; 0
    250a:	80 81       	ld	r24, Z
    250c:	89 83       	std	Y+1, r24	; 0x01
    250e:	09 c0       	rjmp	.+18     	; 0x2522 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    2510:	e3 e3       	ldi	r30, 0x33	; 51
    2512:	f0 e0       	ldi	r31, 0x00	; 0
    2514:	80 81       	ld	r24, Z
    2516:	89 83       	std	Y+1, r24	; 0x01
    2518:	04 c0       	rjmp	.+8      	; 0x2522 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    251a:	e0 e3       	ldi	r30, 0x30	; 48
    251c:	f0 e0       	ldi	r31, 0x00	; 0
    251e:	80 81       	ld	r24, Z
    2520:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    2522:	89 81       	ldd	r24, Y+1	; 0x01
}
    2524:	0f 90       	pop	r0
    2526:	0f 90       	pop	r0
    2528:	0f 90       	pop	r0
    252a:	0f 90       	pop	r0
    252c:	cf 91       	pop	r28
    252e:	df 91       	pop	r29
    2530:	08 95       	ret

00002532 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    2532:	df 93       	push	r29
    2534:	cf 93       	push	r28
    2536:	cd b7       	in	r28, 0x3d	; 61
    2538:	de b7       	in	r29, 0x3e	; 62
    253a:	2e 97       	sbiw	r28, 0x0e	; 14
    253c:	0f b6       	in	r0, 0x3f	; 63
    253e:	f8 94       	cli
    2540:	de bf       	out	0x3e, r29	; 62
    2542:	0f be       	out	0x3f, r0	; 63
    2544:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    2546:	80 e0       	ldi	r24, 0x00	; 0
    2548:	61 e0       	ldi	r22, 0x01	; 1
    254a:	41 e0       	ldi	r20, 0x01	; 1
    254c:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    2550:	80 e0       	ldi	r24, 0x00	; 0
    2552:	62 e0       	ldi	r22, 0x02	; 2
    2554:	41 e0       	ldi	r20, 0x01	; 1
    2556:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <GPIO_setupPinDirection>
    255a:	80 e0       	ldi	r24, 0x00	; 0
    255c:	90 e0       	ldi	r25, 0x00	; 0
    255e:	a0 ea       	ldi	r26, 0xA0	; 160
    2560:	b1 e4       	ldi	r27, 0x41	; 65
    2562:	8b 87       	std	Y+11, r24	; 0x0b
    2564:	9c 87       	std	Y+12, r25	; 0x0c
    2566:	ad 87       	std	Y+13, r26	; 0x0d
    2568:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    256a:	6b 85       	ldd	r22, Y+11	; 0x0b
    256c:	7c 85       	ldd	r23, Y+12	; 0x0c
    256e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2570:	9e 85       	ldd	r25, Y+14	; 0x0e
    2572:	20 e0       	ldi	r18, 0x00	; 0
    2574:	30 e0       	ldi	r19, 0x00	; 0
    2576:	4a e7       	ldi	r20, 0x7A	; 122
    2578:	55 e4       	ldi	r21, 0x45	; 69
    257a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    257e:	dc 01       	movw	r26, r24
    2580:	cb 01       	movw	r24, r22
    2582:	8f 83       	std	Y+7, r24	; 0x07
    2584:	98 87       	std	Y+8, r25	; 0x08
    2586:	a9 87       	std	Y+9, r26	; 0x09
    2588:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    258a:	6f 81       	ldd	r22, Y+7	; 0x07
    258c:	78 85       	ldd	r23, Y+8	; 0x08
    258e:	89 85       	ldd	r24, Y+9	; 0x09
    2590:	9a 85       	ldd	r25, Y+10	; 0x0a
    2592:	20 e0       	ldi	r18, 0x00	; 0
    2594:	30 e0       	ldi	r19, 0x00	; 0
    2596:	40 e8       	ldi	r20, 0x80	; 128
    2598:	5f e3       	ldi	r21, 0x3F	; 63
    259a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    259e:	88 23       	and	r24, r24
    25a0:	2c f4       	brge	.+10     	; 0x25ac <LCD_init+0x7a>
		__ticks = 1;
    25a2:	81 e0       	ldi	r24, 0x01	; 1
    25a4:	90 e0       	ldi	r25, 0x00	; 0
    25a6:	9e 83       	std	Y+6, r25	; 0x06
    25a8:	8d 83       	std	Y+5, r24	; 0x05
    25aa:	3f c0       	rjmp	.+126    	; 0x262a <LCD_init+0xf8>
	else if (__tmp > 65535)
    25ac:	6f 81       	ldd	r22, Y+7	; 0x07
    25ae:	78 85       	ldd	r23, Y+8	; 0x08
    25b0:	89 85       	ldd	r24, Y+9	; 0x09
    25b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    25b4:	20 e0       	ldi	r18, 0x00	; 0
    25b6:	3f ef       	ldi	r19, 0xFF	; 255
    25b8:	4f e7       	ldi	r20, 0x7F	; 127
    25ba:	57 e4       	ldi	r21, 0x47	; 71
    25bc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25c0:	18 16       	cp	r1, r24
    25c2:	4c f5       	brge	.+82     	; 0x2616 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25c4:	6b 85       	ldd	r22, Y+11	; 0x0b
    25c6:	7c 85       	ldd	r23, Y+12	; 0x0c
    25c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    25ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    25cc:	20 e0       	ldi	r18, 0x00	; 0
    25ce:	30 e0       	ldi	r19, 0x00	; 0
    25d0:	40 e2       	ldi	r20, 0x20	; 32
    25d2:	51 e4       	ldi	r21, 0x41	; 65
    25d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25d8:	dc 01       	movw	r26, r24
    25da:	cb 01       	movw	r24, r22
    25dc:	bc 01       	movw	r22, r24
    25de:	cd 01       	movw	r24, r26
    25e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25e4:	dc 01       	movw	r26, r24
    25e6:	cb 01       	movw	r24, r22
    25e8:	9e 83       	std	Y+6, r25	; 0x06
    25ea:	8d 83       	std	Y+5, r24	; 0x05
    25ec:	0f c0       	rjmp	.+30     	; 0x260c <LCD_init+0xda>
    25ee:	80 e9       	ldi	r24, 0x90	; 144
    25f0:	91 e0       	ldi	r25, 0x01	; 1
    25f2:	9c 83       	std	Y+4, r25	; 0x04
    25f4:	8b 83       	std	Y+3, r24	; 0x03
    25f6:	8b 81       	ldd	r24, Y+3	; 0x03
    25f8:	9c 81       	ldd	r25, Y+4	; 0x04
    25fa:	01 97       	sbiw	r24, 0x01	; 1
    25fc:	f1 f7       	brne	.-4      	; 0x25fa <LCD_init+0xc8>
    25fe:	9c 83       	std	Y+4, r25	; 0x04
    2600:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2602:	8d 81       	ldd	r24, Y+5	; 0x05
    2604:	9e 81       	ldd	r25, Y+6	; 0x06
    2606:	01 97       	sbiw	r24, 0x01	; 1
    2608:	9e 83       	std	Y+6, r25	; 0x06
    260a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    260c:	8d 81       	ldd	r24, Y+5	; 0x05
    260e:	9e 81       	ldd	r25, Y+6	; 0x06
    2610:	00 97       	sbiw	r24, 0x00	; 0
    2612:	69 f7       	brne	.-38     	; 0x25ee <LCD_init+0xbc>
    2614:	14 c0       	rjmp	.+40     	; 0x263e <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2616:	6f 81       	ldd	r22, Y+7	; 0x07
    2618:	78 85       	ldd	r23, Y+8	; 0x08
    261a:	89 85       	ldd	r24, Y+9	; 0x09
    261c:	9a 85       	ldd	r25, Y+10	; 0x0a
    261e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2622:	dc 01       	movw	r26, r24
    2624:	cb 01       	movw	r24, r22
    2626:	9e 83       	std	Y+6, r25	; 0x06
    2628:	8d 83       	std	Y+5, r24	; 0x05
    262a:	8d 81       	ldd	r24, Y+5	; 0x05
    262c:	9e 81       	ldd	r25, Y+6	; 0x06
    262e:	9a 83       	std	Y+2, r25	; 0x02
    2630:	89 83       	std	Y+1, r24	; 0x01
    2632:	89 81       	ldd	r24, Y+1	; 0x01
    2634:	9a 81       	ldd	r25, Y+2	; 0x02
    2636:	01 97       	sbiw	r24, 0x01	; 1
    2638:	f1 f7       	brne	.-4      	; 0x2636 <LCD_init+0x104>
    263a:	9a 83       	std	Y+2, r25	; 0x02
    263c:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(20);		/* LCD Power ON delay always > 15ms */

#if(LCD_DATA_BITS_MODE == 4)
	/* Configure 4 pins in the data port as output pins */
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,PIN_OUTPUT);
    263e:	80 e0       	ldi	r24, 0x00	; 0
    2640:	63 e0       	ldi	r22, 0x03	; 3
    2642:	41 e0       	ldi	r20, 0x01	; 1
    2644:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,PIN_OUTPUT);
    2648:	80 e0       	ldi	r24, 0x00	; 0
    264a:	64 e0       	ldi	r22, 0x04	; 4
    264c:	41 e0       	ldi	r20, 0x01	; 1
    264e:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,PIN_OUTPUT);
    2652:	80 e0       	ldi	r24, 0x00	; 0
    2654:	65 e0       	ldi	r22, 0x05	; 5
    2656:	41 e0       	ldi	r20, 0x01	; 1
    2658:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,PIN_OUTPUT);
    265c:	80 e0       	ldi	r24, 0x00	; 0
    265e:	66 e0       	ldi	r22, 0x06	; 6
    2660:	41 e0       	ldi	r20, 0x01	; 1
    2662:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <GPIO_setupPinDirection>

	/* Send for 4 bit initialization of LCD  */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
    2666:	83 e3       	ldi	r24, 0x33	; 51
    2668:	0e 94 4b 13 	call	0x2696	; 0x2696 <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    266c:	82 e3       	ldi	r24, 0x32	; 50
    266e:	0e 94 4b 13 	call	0x2696	; 0x2696 <LCD_sendCommand>

	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
    2672:	88 e2       	ldi	r24, 0x28	; 40
    2674:	0e 94 4b 13 	call	0x2696	; 0x2696 <LCD_sendCommand>
	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    2678:	8c e0       	ldi	r24, 0x0C	; 12
    267a:	0e 94 4b 13 	call	0x2696	; 0x2696 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    267e:	81 e0       	ldi	r24, 0x01	; 1
    2680:	0e 94 4b 13 	call	0x2696	; 0x2696 <LCD_sendCommand>
}
    2684:	2e 96       	adiw	r28, 0x0e	; 14
    2686:	0f b6       	in	r0, 0x3f	; 63
    2688:	f8 94       	cli
    268a:	de bf       	out	0x3e, r29	; 62
    268c:	0f be       	out	0x3f, r0	; 63
    268e:	cd bf       	out	0x3d, r28	; 61
    2690:	cf 91       	pop	r28
    2692:	df 91       	pop	r29
    2694:	08 95       	ret

00002696 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    2696:	0f 93       	push	r16
    2698:	1f 93       	push	r17
    269a:	df 93       	push	r29
    269c:	cf 93       	push	r28
    269e:	cd b7       	in	r28, 0x3d	; 61
    26a0:	de b7       	in	r29, 0x3e	; 62
    26a2:	c3 56       	subi	r28, 0x63	; 99
    26a4:	d0 40       	sbci	r29, 0x00	; 0
    26a6:	0f b6       	in	r0, 0x3f	; 63
    26a8:	f8 94       	cli
    26aa:	de bf       	out	0x3e, r29	; 62
    26ac:	0f be       	out	0x3f, r0	; 63
    26ae:	cd bf       	out	0x3d, r28	; 61
    26b0:	fe 01       	movw	r30, r28
    26b2:	ed 59       	subi	r30, 0x9D	; 157
    26b4:	ff 4f       	sbci	r31, 0xFF	; 255
    26b6:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    26b8:	80 e0       	ldi	r24, 0x00	; 0
    26ba:	61 e0       	ldi	r22, 0x01	; 1
    26bc:	40 e0       	ldi	r20, 0x00	; 0
    26be:	0e 94 46 10 	call	0x208c	; 0x208c <GPIO_writePin>
    26c2:	fe 01       	movw	r30, r28
    26c4:	e1 5a       	subi	r30, 0xA1	; 161
    26c6:	ff 4f       	sbci	r31, 0xFF	; 255
    26c8:	80 e0       	ldi	r24, 0x00	; 0
    26ca:	90 e0       	ldi	r25, 0x00	; 0
    26cc:	a0 e8       	ldi	r26, 0x80	; 128
    26ce:	bf e3       	ldi	r27, 0x3F	; 63
    26d0:	80 83       	st	Z, r24
    26d2:	91 83       	std	Z+1, r25	; 0x01
    26d4:	a2 83       	std	Z+2, r26	; 0x02
    26d6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26d8:	8e 01       	movw	r16, r28
    26da:	05 5a       	subi	r16, 0xA5	; 165
    26dc:	1f 4f       	sbci	r17, 0xFF	; 255
    26de:	fe 01       	movw	r30, r28
    26e0:	e1 5a       	subi	r30, 0xA1	; 161
    26e2:	ff 4f       	sbci	r31, 0xFF	; 255
    26e4:	60 81       	ld	r22, Z
    26e6:	71 81       	ldd	r23, Z+1	; 0x01
    26e8:	82 81       	ldd	r24, Z+2	; 0x02
    26ea:	93 81       	ldd	r25, Z+3	; 0x03
    26ec:	20 e0       	ldi	r18, 0x00	; 0
    26ee:	30 e0       	ldi	r19, 0x00	; 0
    26f0:	4a e7       	ldi	r20, 0x7A	; 122
    26f2:	55 e4       	ldi	r21, 0x45	; 69
    26f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26f8:	dc 01       	movw	r26, r24
    26fa:	cb 01       	movw	r24, r22
    26fc:	f8 01       	movw	r30, r16
    26fe:	80 83       	st	Z, r24
    2700:	91 83       	std	Z+1, r25	; 0x01
    2702:	a2 83       	std	Z+2, r26	; 0x02
    2704:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2706:	fe 01       	movw	r30, r28
    2708:	e5 5a       	subi	r30, 0xA5	; 165
    270a:	ff 4f       	sbci	r31, 0xFF	; 255
    270c:	60 81       	ld	r22, Z
    270e:	71 81       	ldd	r23, Z+1	; 0x01
    2710:	82 81       	ldd	r24, Z+2	; 0x02
    2712:	93 81       	ldd	r25, Z+3	; 0x03
    2714:	20 e0       	ldi	r18, 0x00	; 0
    2716:	30 e0       	ldi	r19, 0x00	; 0
    2718:	40 e8       	ldi	r20, 0x80	; 128
    271a:	5f e3       	ldi	r21, 0x3F	; 63
    271c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2720:	88 23       	and	r24, r24
    2722:	44 f4       	brge	.+16     	; 0x2734 <LCD_sendCommand+0x9e>
		__ticks = 1;
    2724:	fe 01       	movw	r30, r28
    2726:	e7 5a       	subi	r30, 0xA7	; 167
    2728:	ff 4f       	sbci	r31, 0xFF	; 255
    272a:	81 e0       	ldi	r24, 0x01	; 1
    272c:	90 e0       	ldi	r25, 0x00	; 0
    272e:	91 83       	std	Z+1, r25	; 0x01
    2730:	80 83       	st	Z, r24
    2732:	64 c0       	rjmp	.+200    	; 0x27fc <LCD_sendCommand+0x166>
	else if (__tmp > 65535)
    2734:	fe 01       	movw	r30, r28
    2736:	e5 5a       	subi	r30, 0xA5	; 165
    2738:	ff 4f       	sbci	r31, 0xFF	; 255
    273a:	60 81       	ld	r22, Z
    273c:	71 81       	ldd	r23, Z+1	; 0x01
    273e:	82 81       	ldd	r24, Z+2	; 0x02
    2740:	93 81       	ldd	r25, Z+3	; 0x03
    2742:	20 e0       	ldi	r18, 0x00	; 0
    2744:	3f ef       	ldi	r19, 0xFF	; 255
    2746:	4f e7       	ldi	r20, 0x7F	; 127
    2748:	57 e4       	ldi	r21, 0x47	; 71
    274a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    274e:	18 16       	cp	r1, r24
    2750:	0c f0       	brlt	.+2      	; 0x2754 <LCD_sendCommand+0xbe>
    2752:	43 c0       	rjmp	.+134    	; 0x27da <LCD_sendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2754:	fe 01       	movw	r30, r28
    2756:	e1 5a       	subi	r30, 0xA1	; 161
    2758:	ff 4f       	sbci	r31, 0xFF	; 255
    275a:	60 81       	ld	r22, Z
    275c:	71 81       	ldd	r23, Z+1	; 0x01
    275e:	82 81       	ldd	r24, Z+2	; 0x02
    2760:	93 81       	ldd	r25, Z+3	; 0x03
    2762:	20 e0       	ldi	r18, 0x00	; 0
    2764:	30 e0       	ldi	r19, 0x00	; 0
    2766:	40 e2       	ldi	r20, 0x20	; 32
    2768:	51 e4       	ldi	r21, 0x41	; 65
    276a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    276e:	dc 01       	movw	r26, r24
    2770:	cb 01       	movw	r24, r22
    2772:	8e 01       	movw	r16, r28
    2774:	07 5a       	subi	r16, 0xA7	; 167
    2776:	1f 4f       	sbci	r17, 0xFF	; 255
    2778:	bc 01       	movw	r22, r24
    277a:	cd 01       	movw	r24, r26
    277c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2780:	dc 01       	movw	r26, r24
    2782:	cb 01       	movw	r24, r22
    2784:	f8 01       	movw	r30, r16
    2786:	91 83       	std	Z+1, r25	; 0x01
    2788:	80 83       	st	Z, r24
    278a:	1f c0       	rjmp	.+62     	; 0x27ca <LCD_sendCommand+0x134>
    278c:	fe 01       	movw	r30, r28
    278e:	e9 5a       	subi	r30, 0xA9	; 169
    2790:	ff 4f       	sbci	r31, 0xFF	; 255
    2792:	80 e9       	ldi	r24, 0x90	; 144
    2794:	91 e0       	ldi	r25, 0x01	; 1
    2796:	91 83       	std	Z+1, r25	; 0x01
    2798:	80 83       	st	Z, r24
    279a:	fe 01       	movw	r30, r28
    279c:	e9 5a       	subi	r30, 0xA9	; 169
    279e:	ff 4f       	sbci	r31, 0xFF	; 255
    27a0:	80 81       	ld	r24, Z
    27a2:	91 81       	ldd	r25, Z+1	; 0x01
    27a4:	01 97       	sbiw	r24, 0x01	; 1
    27a6:	f1 f7       	brne	.-4      	; 0x27a4 <LCD_sendCommand+0x10e>
    27a8:	fe 01       	movw	r30, r28
    27aa:	e9 5a       	subi	r30, 0xA9	; 169
    27ac:	ff 4f       	sbci	r31, 0xFF	; 255
    27ae:	91 83       	std	Z+1, r25	; 0x01
    27b0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27b2:	de 01       	movw	r26, r28
    27b4:	a7 5a       	subi	r26, 0xA7	; 167
    27b6:	bf 4f       	sbci	r27, 0xFF	; 255
    27b8:	fe 01       	movw	r30, r28
    27ba:	e7 5a       	subi	r30, 0xA7	; 167
    27bc:	ff 4f       	sbci	r31, 0xFF	; 255
    27be:	80 81       	ld	r24, Z
    27c0:	91 81       	ldd	r25, Z+1	; 0x01
    27c2:	01 97       	sbiw	r24, 0x01	; 1
    27c4:	11 96       	adiw	r26, 0x01	; 1
    27c6:	9c 93       	st	X, r25
    27c8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27ca:	fe 01       	movw	r30, r28
    27cc:	e7 5a       	subi	r30, 0xA7	; 167
    27ce:	ff 4f       	sbci	r31, 0xFF	; 255
    27d0:	80 81       	ld	r24, Z
    27d2:	91 81       	ldd	r25, Z+1	; 0x01
    27d4:	00 97       	sbiw	r24, 0x00	; 0
    27d6:	d1 f6       	brne	.-76     	; 0x278c <LCD_sendCommand+0xf6>
    27d8:	27 c0       	rjmp	.+78     	; 0x2828 <LCD_sendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27da:	8e 01       	movw	r16, r28
    27dc:	07 5a       	subi	r16, 0xA7	; 167
    27de:	1f 4f       	sbci	r17, 0xFF	; 255
    27e0:	fe 01       	movw	r30, r28
    27e2:	e5 5a       	subi	r30, 0xA5	; 165
    27e4:	ff 4f       	sbci	r31, 0xFF	; 255
    27e6:	60 81       	ld	r22, Z
    27e8:	71 81       	ldd	r23, Z+1	; 0x01
    27ea:	82 81       	ldd	r24, Z+2	; 0x02
    27ec:	93 81       	ldd	r25, Z+3	; 0x03
    27ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27f2:	dc 01       	movw	r26, r24
    27f4:	cb 01       	movw	r24, r22
    27f6:	f8 01       	movw	r30, r16
    27f8:	91 83       	std	Z+1, r25	; 0x01
    27fa:	80 83       	st	Z, r24
    27fc:	de 01       	movw	r26, r28
    27fe:	ab 5a       	subi	r26, 0xAB	; 171
    2800:	bf 4f       	sbci	r27, 0xFF	; 255
    2802:	fe 01       	movw	r30, r28
    2804:	e7 5a       	subi	r30, 0xA7	; 167
    2806:	ff 4f       	sbci	r31, 0xFF	; 255
    2808:	80 81       	ld	r24, Z
    280a:	91 81       	ldd	r25, Z+1	; 0x01
    280c:	8d 93       	st	X+, r24
    280e:	9c 93       	st	X, r25
    2810:	fe 01       	movw	r30, r28
    2812:	eb 5a       	subi	r30, 0xAB	; 171
    2814:	ff 4f       	sbci	r31, 0xFF	; 255
    2816:	80 81       	ld	r24, Z
    2818:	91 81       	ldd	r25, Z+1	; 0x01
    281a:	01 97       	sbiw	r24, 0x01	; 1
    281c:	f1 f7       	brne	.-4      	; 0x281a <LCD_sendCommand+0x184>
    281e:	fe 01       	movw	r30, r28
    2820:	eb 5a       	subi	r30, 0xAB	; 171
    2822:	ff 4f       	sbci	r31, 0xFF	; 255
    2824:	91 83       	std	Z+1, r25	; 0x01
    2826:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2828:	80 e0       	ldi	r24, 0x00	; 0
    282a:	62 e0       	ldi	r22, 0x02	; 2
    282c:	41 e0       	ldi	r20, 0x01	; 1
    282e:	0e 94 46 10 	call	0x208c	; 0x208c <GPIO_writePin>
    2832:	fe 01       	movw	r30, r28
    2834:	ef 5a       	subi	r30, 0xAF	; 175
    2836:	ff 4f       	sbci	r31, 0xFF	; 255
    2838:	80 e0       	ldi	r24, 0x00	; 0
    283a:	90 e0       	ldi	r25, 0x00	; 0
    283c:	a0 e8       	ldi	r26, 0x80	; 128
    283e:	bf e3       	ldi	r27, 0x3F	; 63
    2840:	80 83       	st	Z, r24
    2842:	91 83       	std	Z+1, r25	; 0x01
    2844:	a2 83       	std	Z+2, r26	; 0x02
    2846:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2848:	8e 01       	movw	r16, r28
    284a:	03 5b       	subi	r16, 0xB3	; 179
    284c:	1f 4f       	sbci	r17, 0xFF	; 255
    284e:	fe 01       	movw	r30, r28
    2850:	ef 5a       	subi	r30, 0xAF	; 175
    2852:	ff 4f       	sbci	r31, 0xFF	; 255
    2854:	60 81       	ld	r22, Z
    2856:	71 81       	ldd	r23, Z+1	; 0x01
    2858:	82 81       	ldd	r24, Z+2	; 0x02
    285a:	93 81       	ldd	r25, Z+3	; 0x03
    285c:	20 e0       	ldi	r18, 0x00	; 0
    285e:	30 e0       	ldi	r19, 0x00	; 0
    2860:	4a e7       	ldi	r20, 0x7A	; 122
    2862:	55 e4       	ldi	r21, 0x45	; 69
    2864:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2868:	dc 01       	movw	r26, r24
    286a:	cb 01       	movw	r24, r22
    286c:	f8 01       	movw	r30, r16
    286e:	80 83       	st	Z, r24
    2870:	91 83       	std	Z+1, r25	; 0x01
    2872:	a2 83       	std	Z+2, r26	; 0x02
    2874:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2876:	fe 01       	movw	r30, r28
    2878:	e3 5b       	subi	r30, 0xB3	; 179
    287a:	ff 4f       	sbci	r31, 0xFF	; 255
    287c:	60 81       	ld	r22, Z
    287e:	71 81       	ldd	r23, Z+1	; 0x01
    2880:	82 81       	ldd	r24, Z+2	; 0x02
    2882:	93 81       	ldd	r25, Z+3	; 0x03
    2884:	20 e0       	ldi	r18, 0x00	; 0
    2886:	30 e0       	ldi	r19, 0x00	; 0
    2888:	40 e8       	ldi	r20, 0x80	; 128
    288a:	5f e3       	ldi	r21, 0x3F	; 63
    288c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2890:	88 23       	and	r24, r24
    2892:	44 f4       	brge	.+16     	; 0x28a4 <LCD_sendCommand+0x20e>
		__ticks = 1;
    2894:	fe 01       	movw	r30, r28
    2896:	e5 5b       	subi	r30, 0xB5	; 181
    2898:	ff 4f       	sbci	r31, 0xFF	; 255
    289a:	81 e0       	ldi	r24, 0x01	; 1
    289c:	90 e0       	ldi	r25, 0x00	; 0
    289e:	91 83       	std	Z+1, r25	; 0x01
    28a0:	80 83       	st	Z, r24
    28a2:	64 c0       	rjmp	.+200    	; 0x296c <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    28a4:	fe 01       	movw	r30, r28
    28a6:	e3 5b       	subi	r30, 0xB3	; 179
    28a8:	ff 4f       	sbci	r31, 0xFF	; 255
    28aa:	60 81       	ld	r22, Z
    28ac:	71 81       	ldd	r23, Z+1	; 0x01
    28ae:	82 81       	ldd	r24, Z+2	; 0x02
    28b0:	93 81       	ldd	r25, Z+3	; 0x03
    28b2:	20 e0       	ldi	r18, 0x00	; 0
    28b4:	3f ef       	ldi	r19, 0xFF	; 255
    28b6:	4f e7       	ldi	r20, 0x7F	; 127
    28b8:	57 e4       	ldi	r21, 0x47	; 71
    28ba:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    28be:	18 16       	cp	r1, r24
    28c0:	0c f0       	brlt	.+2      	; 0x28c4 <LCD_sendCommand+0x22e>
    28c2:	43 c0       	rjmp	.+134    	; 0x294a <LCD_sendCommand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28c4:	fe 01       	movw	r30, r28
    28c6:	ef 5a       	subi	r30, 0xAF	; 175
    28c8:	ff 4f       	sbci	r31, 0xFF	; 255
    28ca:	60 81       	ld	r22, Z
    28cc:	71 81       	ldd	r23, Z+1	; 0x01
    28ce:	82 81       	ldd	r24, Z+2	; 0x02
    28d0:	93 81       	ldd	r25, Z+3	; 0x03
    28d2:	20 e0       	ldi	r18, 0x00	; 0
    28d4:	30 e0       	ldi	r19, 0x00	; 0
    28d6:	40 e2       	ldi	r20, 0x20	; 32
    28d8:	51 e4       	ldi	r21, 0x41	; 65
    28da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28de:	dc 01       	movw	r26, r24
    28e0:	cb 01       	movw	r24, r22
    28e2:	8e 01       	movw	r16, r28
    28e4:	05 5b       	subi	r16, 0xB5	; 181
    28e6:	1f 4f       	sbci	r17, 0xFF	; 255
    28e8:	bc 01       	movw	r22, r24
    28ea:	cd 01       	movw	r24, r26
    28ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28f0:	dc 01       	movw	r26, r24
    28f2:	cb 01       	movw	r24, r22
    28f4:	f8 01       	movw	r30, r16
    28f6:	91 83       	std	Z+1, r25	; 0x01
    28f8:	80 83       	st	Z, r24
    28fa:	1f c0       	rjmp	.+62     	; 0x293a <LCD_sendCommand+0x2a4>
    28fc:	fe 01       	movw	r30, r28
    28fe:	e7 5b       	subi	r30, 0xB7	; 183
    2900:	ff 4f       	sbci	r31, 0xFF	; 255
    2902:	80 e9       	ldi	r24, 0x90	; 144
    2904:	91 e0       	ldi	r25, 0x01	; 1
    2906:	91 83       	std	Z+1, r25	; 0x01
    2908:	80 83       	st	Z, r24
    290a:	fe 01       	movw	r30, r28
    290c:	e7 5b       	subi	r30, 0xB7	; 183
    290e:	ff 4f       	sbci	r31, 0xFF	; 255
    2910:	80 81       	ld	r24, Z
    2912:	91 81       	ldd	r25, Z+1	; 0x01
    2914:	01 97       	sbiw	r24, 0x01	; 1
    2916:	f1 f7       	brne	.-4      	; 0x2914 <LCD_sendCommand+0x27e>
    2918:	fe 01       	movw	r30, r28
    291a:	e7 5b       	subi	r30, 0xB7	; 183
    291c:	ff 4f       	sbci	r31, 0xFF	; 255
    291e:	91 83       	std	Z+1, r25	; 0x01
    2920:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2922:	de 01       	movw	r26, r28
    2924:	a5 5b       	subi	r26, 0xB5	; 181
    2926:	bf 4f       	sbci	r27, 0xFF	; 255
    2928:	fe 01       	movw	r30, r28
    292a:	e5 5b       	subi	r30, 0xB5	; 181
    292c:	ff 4f       	sbci	r31, 0xFF	; 255
    292e:	80 81       	ld	r24, Z
    2930:	91 81       	ldd	r25, Z+1	; 0x01
    2932:	01 97       	sbiw	r24, 0x01	; 1
    2934:	11 96       	adiw	r26, 0x01	; 1
    2936:	9c 93       	st	X, r25
    2938:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    293a:	fe 01       	movw	r30, r28
    293c:	e5 5b       	subi	r30, 0xB5	; 181
    293e:	ff 4f       	sbci	r31, 0xFF	; 255
    2940:	80 81       	ld	r24, Z
    2942:	91 81       	ldd	r25, Z+1	; 0x01
    2944:	00 97       	sbiw	r24, 0x00	; 0
    2946:	d1 f6       	brne	.-76     	; 0x28fc <LCD_sendCommand+0x266>
    2948:	27 c0       	rjmp	.+78     	; 0x2998 <LCD_sendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    294a:	8e 01       	movw	r16, r28
    294c:	05 5b       	subi	r16, 0xB5	; 181
    294e:	1f 4f       	sbci	r17, 0xFF	; 255
    2950:	fe 01       	movw	r30, r28
    2952:	e3 5b       	subi	r30, 0xB3	; 179
    2954:	ff 4f       	sbci	r31, 0xFF	; 255
    2956:	60 81       	ld	r22, Z
    2958:	71 81       	ldd	r23, Z+1	; 0x01
    295a:	82 81       	ldd	r24, Z+2	; 0x02
    295c:	93 81       	ldd	r25, Z+3	; 0x03
    295e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2962:	dc 01       	movw	r26, r24
    2964:	cb 01       	movw	r24, r22
    2966:	f8 01       	movw	r30, r16
    2968:	91 83       	std	Z+1, r25	; 0x01
    296a:	80 83       	st	Z, r24
    296c:	de 01       	movw	r26, r28
    296e:	a9 5b       	subi	r26, 0xB9	; 185
    2970:	bf 4f       	sbci	r27, 0xFF	; 255
    2972:	fe 01       	movw	r30, r28
    2974:	e5 5b       	subi	r30, 0xB5	; 181
    2976:	ff 4f       	sbci	r31, 0xFF	; 255
    2978:	80 81       	ld	r24, Z
    297a:	91 81       	ldd	r25, Z+1	; 0x01
    297c:	8d 93       	st	X+, r24
    297e:	9c 93       	st	X, r25
    2980:	fe 01       	movw	r30, r28
    2982:	e9 5b       	subi	r30, 0xB9	; 185
    2984:	ff 4f       	sbci	r31, 0xFF	; 255
    2986:	80 81       	ld	r24, Z
    2988:	91 81       	ldd	r25, Z+1	; 0x01
    298a:	01 97       	sbiw	r24, 0x01	; 1
    298c:	f1 f7       	brne	.-4      	; 0x298a <LCD_sendCommand+0x2f4>
    298e:	fe 01       	movw	r30, r28
    2990:	e9 5b       	subi	r30, 0xB9	; 185
    2992:	ff 4f       	sbci	r31, 0xFF	; 255
    2994:	91 83       	std	Z+1, r25	; 0x01
    2996:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,4));
    2998:	fe 01       	movw	r30, r28
    299a:	ed 59       	subi	r30, 0x9D	; 157
    299c:	ff 4f       	sbci	r31, 0xFF	; 255
    299e:	80 81       	ld	r24, Z
    29a0:	88 2f       	mov	r24, r24
    29a2:	90 e0       	ldi	r25, 0x00	; 0
    29a4:	80 71       	andi	r24, 0x10	; 16
    29a6:	90 70       	andi	r25, 0x00	; 0
    29a8:	95 95       	asr	r25
    29aa:	87 95       	ror	r24
    29ac:	95 95       	asr	r25
    29ae:	87 95       	ror	r24
    29b0:	95 95       	asr	r25
    29b2:	87 95       	ror	r24
    29b4:	95 95       	asr	r25
    29b6:	87 95       	ror	r24
    29b8:	98 2f       	mov	r25, r24
    29ba:	80 e0       	ldi	r24, 0x00	; 0
    29bc:	63 e0       	ldi	r22, 0x03	; 3
    29be:	49 2f       	mov	r20, r25
    29c0:	0e 94 46 10 	call	0x208c	; 0x208c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,5));
    29c4:	fe 01       	movw	r30, r28
    29c6:	ed 59       	subi	r30, 0x9D	; 157
    29c8:	ff 4f       	sbci	r31, 0xFF	; 255
    29ca:	80 81       	ld	r24, Z
    29cc:	88 2f       	mov	r24, r24
    29ce:	90 e0       	ldi	r25, 0x00	; 0
    29d0:	80 72       	andi	r24, 0x20	; 32
    29d2:	90 70       	andi	r25, 0x00	; 0
    29d4:	95 95       	asr	r25
    29d6:	87 95       	ror	r24
    29d8:	95 95       	asr	r25
    29da:	87 95       	ror	r24
    29dc:	95 95       	asr	r25
    29de:	87 95       	ror	r24
    29e0:	95 95       	asr	r25
    29e2:	87 95       	ror	r24
    29e4:	95 95       	asr	r25
    29e6:	87 95       	ror	r24
    29e8:	98 2f       	mov	r25, r24
    29ea:	80 e0       	ldi	r24, 0x00	; 0
    29ec:	64 e0       	ldi	r22, 0x04	; 4
    29ee:	49 2f       	mov	r20, r25
    29f0:	0e 94 46 10 	call	0x208c	; 0x208c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,6));
    29f4:	fe 01       	movw	r30, r28
    29f6:	ed 59       	subi	r30, 0x9D	; 157
    29f8:	ff 4f       	sbci	r31, 0xFF	; 255
    29fa:	80 81       	ld	r24, Z
    29fc:	88 2f       	mov	r24, r24
    29fe:	90 e0       	ldi	r25, 0x00	; 0
    2a00:	80 74       	andi	r24, 0x40	; 64
    2a02:	90 70       	andi	r25, 0x00	; 0
    2a04:	08 2e       	mov	r0, r24
    2a06:	89 2f       	mov	r24, r25
    2a08:	00 0c       	add	r0, r0
    2a0a:	88 1f       	adc	r24, r24
    2a0c:	99 0b       	sbc	r25, r25
    2a0e:	00 0c       	add	r0, r0
    2a10:	88 1f       	adc	r24, r24
    2a12:	99 1f       	adc	r25, r25
    2a14:	98 2f       	mov	r25, r24
    2a16:	80 e0       	ldi	r24, 0x00	; 0
    2a18:	65 e0       	ldi	r22, 0x05	; 5
    2a1a:	49 2f       	mov	r20, r25
    2a1c:	0e 94 46 10 	call	0x208c	; 0x208c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,7));
    2a20:	fe 01       	movw	r30, r28
    2a22:	ed 59       	subi	r30, 0x9D	; 157
    2a24:	ff 4f       	sbci	r31, 0xFF	; 255
    2a26:	80 81       	ld	r24, Z
    2a28:	98 2f       	mov	r25, r24
    2a2a:	99 1f       	adc	r25, r25
    2a2c:	99 27       	eor	r25, r25
    2a2e:	99 1f       	adc	r25, r25
    2a30:	80 e0       	ldi	r24, 0x00	; 0
    2a32:	66 e0       	ldi	r22, 0x06	; 6
    2a34:	49 2f       	mov	r20, r25
    2a36:	0e 94 46 10 	call	0x208c	; 0x208c <GPIO_writePin>
    2a3a:	fe 01       	movw	r30, r28
    2a3c:	ed 5b       	subi	r30, 0xBD	; 189
    2a3e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a40:	80 e0       	ldi	r24, 0x00	; 0
    2a42:	90 e0       	ldi	r25, 0x00	; 0
    2a44:	a0 e8       	ldi	r26, 0x80	; 128
    2a46:	bf e3       	ldi	r27, 0x3F	; 63
    2a48:	80 83       	st	Z, r24
    2a4a:	91 83       	std	Z+1, r25	; 0x01
    2a4c:	a2 83       	std	Z+2, r26	; 0x02
    2a4e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a50:	8e 01       	movw	r16, r28
    2a52:	01 5c       	subi	r16, 0xC1	; 193
    2a54:	1f 4f       	sbci	r17, 0xFF	; 255
    2a56:	fe 01       	movw	r30, r28
    2a58:	ed 5b       	subi	r30, 0xBD	; 189
    2a5a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a5c:	60 81       	ld	r22, Z
    2a5e:	71 81       	ldd	r23, Z+1	; 0x01
    2a60:	82 81       	ldd	r24, Z+2	; 0x02
    2a62:	93 81       	ldd	r25, Z+3	; 0x03
    2a64:	20 e0       	ldi	r18, 0x00	; 0
    2a66:	30 e0       	ldi	r19, 0x00	; 0
    2a68:	4a e7       	ldi	r20, 0x7A	; 122
    2a6a:	55 e4       	ldi	r21, 0x45	; 69
    2a6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a70:	dc 01       	movw	r26, r24
    2a72:	cb 01       	movw	r24, r22
    2a74:	f8 01       	movw	r30, r16
    2a76:	80 83       	st	Z, r24
    2a78:	91 83       	std	Z+1, r25	; 0x01
    2a7a:	a2 83       	std	Z+2, r26	; 0x02
    2a7c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2a7e:	fe 01       	movw	r30, r28
    2a80:	ff 96       	adiw	r30, 0x3f	; 63
    2a82:	60 81       	ld	r22, Z
    2a84:	71 81       	ldd	r23, Z+1	; 0x01
    2a86:	82 81       	ldd	r24, Z+2	; 0x02
    2a88:	93 81       	ldd	r25, Z+3	; 0x03
    2a8a:	20 e0       	ldi	r18, 0x00	; 0
    2a8c:	30 e0       	ldi	r19, 0x00	; 0
    2a8e:	40 e8       	ldi	r20, 0x80	; 128
    2a90:	5f e3       	ldi	r21, 0x3F	; 63
    2a92:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a96:	88 23       	and	r24, r24
    2a98:	2c f4       	brge	.+10     	; 0x2aa4 <LCD_sendCommand+0x40e>
		__ticks = 1;
    2a9a:	81 e0       	ldi	r24, 0x01	; 1
    2a9c:	90 e0       	ldi	r25, 0x00	; 0
    2a9e:	9e af       	std	Y+62, r25	; 0x3e
    2aa0:	8d af       	std	Y+61, r24	; 0x3d
    2aa2:	46 c0       	rjmp	.+140    	; 0x2b30 <LCD_sendCommand+0x49a>
	else if (__tmp > 65535)
    2aa4:	fe 01       	movw	r30, r28
    2aa6:	ff 96       	adiw	r30, 0x3f	; 63
    2aa8:	60 81       	ld	r22, Z
    2aaa:	71 81       	ldd	r23, Z+1	; 0x01
    2aac:	82 81       	ldd	r24, Z+2	; 0x02
    2aae:	93 81       	ldd	r25, Z+3	; 0x03
    2ab0:	20 e0       	ldi	r18, 0x00	; 0
    2ab2:	3f ef       	ldi	r19, 0xFF	; 255
    2ab4:	4f e7       	ldi	r20, 0x7F	; 127
    2ab6:	57 e4       	ldi	r21, 0x47	; 71
    2ab8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2abc:	18 16       	cp	r1, r24
    2abe:	64 f5       	brge	.+88     	; 0x2b18 <LCD_sendCommand+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ac0:	fe 01       	movw	r30, r28
    2ac2:	ed 5b       	subi	r30, 0xBD	; 189
    2ac4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ac6:	60 81       	ld	r22, Z
    2ac8:	71 81       	ldd	r23, Z+1	; 0x01
    2aca:	82 81       	ldd	r24, Z+2	; 0x02
    2acc:	93 81       	ldd	r25, Z+3	; 0x03
    2ace:	20 e0       	ldi	r18, 0x00	; 0
    2ad0:	30 e0       	ldi	r19, 0x00	; 0
    2ad2:	40 e2       	ldi	r20, 0x20	; 32
    2ad4:	51 e4       	ldi	r21, 0x41	; 65
    2ad6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ada:	dc 01       	movw	r26, r24
    2adc:	cb 01       	movw	r24, r22
    2ade:	bc 01       	movw	r22, r24
    2ae0:	cd 01       	movw	r24, r26
    2ae2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ae6:	dc 01       	movw	r26, r24
    2ae8:	cb 01       	movw	r24, r22
    2aea:	9e af       	std	Y+62, r25	; 0x3e
    2aec:	8d af       	std	Y+61, r24	; 0x3d
    2aee:	0f c0       	rjmp	.+30     	; 0x2b0e <LCD_sendCommand+0x478>
    2af0:	80 e9       	ldi	r24, 0x90	; 144
    2af2:	91 e0       	ldi	r25, 0x01	; 1
    2af4:	9c af       	std	Y+60, r25	; 0x3c
    2af6:	8b af       	std	Y+59, r24	; 0x3b
    2af8:	8b ad       	ldd	r24, Y+59	; 0x3b
    2afa:	9c ad       	ldd	r25, Y+60	; 0x3c
    2afc:	01 97       	sbiw	r24, 0x01	; 1
    2afe:	f1 f7       	brne	.-4      	; 0x2afc <LCD_sendCommand+0x466>
    2b00:	9c af       	std	Y+60, r25	; 0x3c
    2b02:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b04:	8d ad       	ldd	r24, Y+61	; 0x3d
    2b06:	9e ad       	ldd	r25, Y+62	; 0x3e
    2b08:	01 97       	sbiw	r24, 0x01	; 1
    2b0a:	9e af       	std	Y+62, r25	; 0x3e
    2b0c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b0e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2b10:	9e ad       	ldd	r25, Y+62	; 0x3e
    2b12:	00 97       	sbiw	r24, 0x00	; 0
    2b14:	69 f7       	brne	.-38     	; 0x2af0 <LCD_sendCommand+0x45a>
    2b16:	16 c0       	rjmp	.+44     	; 0x2b44 <LCD_sendCommand+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b18:	fe 01       	movw	r30, r28
    2b1a:	ff 96       	adiw	r30, 0x3f	; 63
    2b1c:	60 81       	ld	r22, Z
    2b1e:	71 81       	ldd	r23, Z+1	; 0x01
    2b20:	82 81       	ldd	r24, Z+2	; 0x02
    2b22:	93 81       	ldd	r25, Z+3	; 0x03
    2b24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b28:	dc 01       	movw	r26, r24
    2b2a:	cb 01       	movw	r24, r22
    2b2c:	9e af       	std	Y+62, r25	; 0x3e
    2b2e:	8d af       	std	Y+61, r24	; 0x3d
    2b30:	8d ad       	ldd	r24, Y+61	; 0x3d
    2b32:	9e ad       	ldd	r25, Y+62	; 0x3e
    2b34:	9a af       	std	Y+58, r25	; 0x3a
    2b36:	89 af       	std	Y+57, r24	; 0x39
    2b38:	89 ad       	ldd	r24, Y+57	; 0x39
    2b3a:	9a ad       	ldd	r25, Y+58	; 0x3a
    2b3c:	01 97       	sbiw	r24, 0x01	; 1
    2b3e:	f1 f7       	brne	.-4      	; 0x2b3c <LCD_sendCommand+0x4a6>
    2b40:	9a af       	std	Y+58, r25	; 0x3a
    2b42:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2b44:	80 e0       	ldi	r24, 0x00	; 0
    2b46:	62 e0       	ldi	r22, 0x02	; 2
    2b48:	40 e0       	ldi	r20, 0x00	; 0
    2b4a:	0e 94 46 10 	call	0x208c	; 0x208c <GPIO_writePin>
    2b4e:	80 e0       	ldi	r24, 0x00	; 0
    2b50:	90 e0       	ldi	r25, 0x00	; 0
    2b52:	a0 e8       	ldi	r26, 0x80	; 128
    2b54:	bf e3       	ldi	r27, 0x3F	; 63
    2b56:	8d ab       	std	Y+53, r24	; 0x35
    2b58:	9e ab       	std	Y+54, r25	; 0x36
    2b5a:	af ab       	std	Y+55, r26	; 0x37
    2b5c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b5e:	6d a9       	ldd	r22, Y+53	; 0x35
    2b60:	7e a9       	ldd	r23, Y+54	; 0x36
    2b62:	8f a9       	ldd	r24, Y+55	; 0x37
    2b64:	98 ad       	ldd	r25, Y+56	; 0x38
    2b66:	20 e0       	ldi	r18, 0x00	; 0
    2b68:	30 e0       	ldi	r19, 0x00	; 0
    2b6a:	4a e7       	ldi	r20, 0x7A	; 122
    2b6c:	55 e4       	ldi	r21, 0x45	; 69
    2b6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b72:	dc 01       	movw	r26, r24
    2b74:	cb 01       	movw	r24, r22
    2b76:	89 ab       	std	Y+49, r24	; 0x31
    2b78:	9a ab       	std	Y+50, r25	; 0x32
    2b7a:	ab ab       	std	Y+51, r26	; 0x33
    2b7c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2b7e:	69 a9       	ldd	r22, Y+49	; 0x31
    2b80:	7a a9       	ldd	r23, Y+50	; 0x32
    2b82:	8b a9       	ldd	r24, Y+51	; 0x33
    2b84:	9c a9       	ldd	r25, Y+52	; 0x34
    2b86:	20 e0       	ldi	r18, 0x00	; 0
    2b88:	30 e0       	ldi	r19, 0x00	; 0
    2b8a:	40 e8       	ldi	r20, 0x80	; 128
    2b8c:	5f e3       	ldi	r21, 0x3F	; 63
    2b8e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b92:	88 23       	and	r24, r24
    2b94:	2c f4       	brge	.+10     	; 0x2ba0 <LCD_sendCommand+0x50a>
		__ticks = 1;
    2b96:	81 e0       	ldi	r24, 0x01	; 1
    2b98:	90 e0       	ldi	r25, 0x00	; 0
    2b9a:	98 ab       	std	Y+48, r25	; 0x30
    2b9c:	8f a7       	std	Y+47, r24	; 0x2f
    2b9e:	3f c0       	rjmp	.+126    	; 0x2c1e <LCD_sendCommand+0x588>
	else if (__tmp > 65535)
    2ba0:	69 a9       	ldd	r22, Y+49	; 0x31
    2ba2:	7a a9       	ldd	r23, Y+50	; 0x32
    2ba4:	8b a9       	ldd	r24, Y+51	; 0x33
    2ba6:	9c a9       	ldd	r25, Y+52	; 0x34
    2ba8:	20 e0       	ldi	r18, 0x00	; 0
    2baa:	3f ef       	ldi	r19, 0xFF	; 255
    2bac:	4f e7       	ldi	r20, 0x7F	; 127
    2bae:	57 e4       	ldi	r21, 0x47	; 71
    2bb0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2bb4:	18 16       	cp	r1, r24
    2bb6:	4c f5       	brge	.+82     	; 0x2c0a <LCD_sendCommand+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bb8:	6d a9       	ldd	r22, Y+53	; 0x35
    2bba:	7e a9       	ldd	r23, Y+54	; 0x36
    2bbc:	8f a9       	ldd	r24, Y+55	; 0x37
    2bbe:	98 ad       	ldd	r25, Y+56	; 0x38
    2bc0:	20 e0       	ldi	r18, 0x00	; 0
    2bc2:	30 e0       	ldi	r19, 0x00	; 0
    2bc4:	40 e2       	ldi	r20, 0x20	; 32
    2bc6:	51 e4       	ldi	r21, 0x41	; 65
    2bc8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bcc:	dc 01       	movw	r26, r24
    2bce:	cb 01       	movw	r24, r22
    2bd0:	bc 01       	movw	r22, r24
    2bd2:	cd 01       	movw	r24, r26
    2bd4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bd8:	dc 01       	movw	r26, r24
    2bda:	cb 01       	movw	r24, r22
    2bdc:	98 ab       	std	Y+48, r25	; 0x30
    2bde:	8f a7       	std	Y+47, r24	; 0x2f
    2be0:	0f c0       	rjmp	.+30     	; 0x2c00 <LCD_sendCommand+0x56a>
    2be2:	80 e9       	ldi	r24, 0x90	; 144
    2be4:	91 e0       	ldi	r25, 0x01	; 1
    2be6:	9e a7       	std	Y+46, r25	; 0x2e
    2be8:	8d a7       	std	Y+45, r24	; 0x2d
    2bea:	8d a5       	ldd	r24, Y+45	; 0x2d
    2bec:	9e a5       	ldd	r25, Y+46	; 0x2e
    2bee:	01 97       	sbiw	r24, 0x01	; 1
    2bf0:	f1 f7       	brne	.-4      	; 0x2bee <LCD_sendCommand+0x558>
    2bf2:	9e a7       	std	Y+46, r25	; 0x2e
    2bf4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bf6:	8f a5       	ldd	r24, Y+47	; 0x2f
    2bf8:	98 a9       	ldd	r25, Y+48	; 0x30
    2bfa:	01 97       	sbiw	r24, 0x01	; 1
    2bfc:	98 ab       	std	Y+48, r25	; 0x30
    2bfe:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c00:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c02:	98 a9       	ldd	r25, Y+48	; 0x30
    2c04:	00 97       	sbiw	r24, 0x00	; 0
    2c06:	69 f7       	brne	.-38     	; 0x2be2 <LCD_sendCommand+0x54c>
    2c08:	14 c0       	rjmp	.+40     	; 0x2c32 <LCD_sendCommand+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c0a:	69 a9       	ldd	r22, Y+49	; 0x31
    2c0c:	7a a9       	ldd	r23, Y+50	; 0x32
    2c0e:	8b a9       	ldd	r24, Y+51	; 0x33
    2c10:	9c a9       	ldd	r25, Y+52	; 0x34
    2c12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c16:	dc 01       	movw	r26, r24
    2c18:	cb 01       	movw	r24, r22
    2c1a:	98 ab       	std	Y+48, r25	; 0x30
    2c1c:	8f a7       	std	Y+47, r24	; 0x2f
    2c1e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c20:	98 a9       	ldd	r25, Y+48	; 0x30
    2c22:	9c a7       	std	Y+44, r25	; 0x2c
    2c24:	8b a7       	std	Y+43, r24	; 0x2b
    2c26:	8b a5       	ldd	r24, Y+43	; 0x2b
    2c28:	9c a5       	ldd	r25, Y+44	; 0x2c
    2c2a:	01 97       	sbiw	r24, 0x01	; 1
    2c2c:	f1 f7       	brne	.-4      	; 0x2c2a <LCD_sendCommand+0x594>
    2c2e:	9c a7       	std	Y+44, r25	; 0x2c
    2c30:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2c32:	80 e0       	ldi	r24, 0x00	; 0
    2c34:	62 e0       	ldi	r22, 0x02	; 2
    2c36:	41 e0       	ldi	r20, 0x01	; 1
    2c38:	0e 94 46 10 	call	0x208c	; 0x208c <GPIO_writePin>
    2c3c:	80 e0       	ldi	r24, 0x00	; 0
    2c3e:	90 e0       	ldi	r25, 0x00	; 0
    2c40:	a0 e8       	ldi	r26, 0x80	; 128
    2c42:	bf e3       	ldi	r27, 0x3F	; 63
    2c44:	8f a3       	std	Y+39, r24	; 0x27
    2c46:	98 a7       	std	Y+40, r25	; 0x28
    2c48:	a9 a7       	std	Y+41, r26	; 0x29
    2c4a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c4c:	6f a1       	ldd	r22, Y+39	; 0x27
    2c4e:	78 a5       	ldd	r23, Y+40	; 0x28
    2c50:	89 a5       	ldd	r24, Y+41	; 0x29
    2c52:	9a a5       	ldd	r25, Y+42	; 0x2a
    2c54:	20 e0       	ldi	r18, 0x00	; 0
    2c56:	30 e0       	ldi	r19, 0x00	; 0
    2c58:	4a e7       	ldi	r20, 0x7A	; 122
    2c5a:	55 e4       	ldi	r21, 0x45	; 69
    2c5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c60:	dc 01       	movw	r26, r24
    2c62:	cb 01       	movw	r24, r22
    2c64:	8b a3       	std	Y+35, r24	; 0x23
    2c66:	9c a3       	std	Y+36, r25	; 0x24
    2c68:	ad a3       	std	Y+37, r26	; 0x25
    2c6a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2c6c:	6b a1       	ldd	r22, Y+35	; 0x23
    2c6e:	7c a1       	ldd	r23, Y+36	; 0x24
    2c70:	8d a1       	ldd	r24, Y+37	; 0x25
    2c72:	9e a1       	ldd	r25, Y+38	; 0x26
    2c74:	20 e0       	ldi	r18, 0x00	; 0
    2c76:	30 e0       	ldi	r19, 0x00	; 0
    2c78:	40 e8       	ldi	r20, 0x80	; 128
    2c7a:	5f e3       	ldi	r21, 0x3F	; 63
    2c7c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c80:	88 23       	and	r24, r24
    2c82:	2c f4       	brge	.+10     	; 0x2c8e <LCD_sendCommand+0x5f8>
		__ticks = 1;
    2c84:	81 e0       	ldi	r24, 0x01	; 1
    2c86:	90 e0       	ldi	r25, 0x00	; 0
    2c88:	9a a3       	std	Y+34, r25	; 0x22
    2c8a:	89 a3       	std	Y+33, r24	; 0x21
    2c8c:	3f c0       	rjmp	.+126    	; 0x2d0c <LCD_sendCommand+0x676>
	else if (__tmp > 65535)
    2c8e:	6b a1       	ldd	r22, Y+35	; 0x23
    2c90:	7c a1       	ldd	r23, Y+36	; 0x24
    2c92:	8d a1       	ldd	r24, Y+37	; 0x25
    2c94:	9e a1       	ldd	r25, Y+38	; 0x26
    2c96:	20 e0       	ldi	r18, 0x00	; 0
    2c98:	3f ef       	ldi	r19, 0xFF	; 255
    2c9a:	4f e7       	ldi	r20, 0x7F	; 127
    2c9c:	57 e4       	ldi	r21, 0x47	; 71
    2c9e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ca2:	18 16       	cp	r1, r24
    2ca4:	4c f5       	brge	.+82     	; 0x2cf8 <LCD_sendCommand+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ca6:	6f a1       	ldd	r22, Y+39	; 0x27
    2ca8:	78 a5       	ldd	r23, Y+40	; 0x28
    2caa:	89 a5       	ldd	r24, Y+41	; 0x29
    2cac:	9a a5       	ldd	r25, Y+42	; 0x2a
    2cae:	20 e0       	ldi	r18, 0x00	; 0
    2cb0:	30 e0       	ldi	r19, 0x00	; 0
    2cb2:	40 e2       	ldi	r20, 0x20	; 32
    2cb4:	51 e4       	ldi	r21, 0x41	; 65
    2cb6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cba:	dc 01       	movw	r26, r24
    2cbc:	cb 01       	movw	r24, r22
    2cbe:	bc 01       	movw	r22, r24
    2cc0:	cd 01       	movw	r24, r26
    2cc2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cc6:	dc 01       	movw	r26, r24
    2cc8:	cb 01       	movw	r24, r22
    2cca:	9a a3       	std	Y+34, r25	; 0x22
    2ccc:	89 a3       	std	Y+33, r24	; 0x21
    2cce:	0f c0       	rjmp	.+30     	; 0x2cee <LCD_sendCommand+0x658>
    2cd0:	80 e9       	ldi	r24, 0x90	; 144
    2cd2:	91 e0       	ldi	r25, 0x01	; 1
    2cd4:	98 a3       	std	Y+32, r25	; 0x20
    2cd6:	8f 8f       	std	Y+31, r24	; 0x1f
    2cd8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2cda:	98 a1       	ldd	r25, Y+32	; 0x20
    2cdc:	01 97       	sbiw	r24, 0x01	; 1
    2cde:	f1 f7       	brne	.-4      	; 0x2cdc <LCD_sendCommand+0x646>
    2ce0:	98 a3       	std	Y+32, r25	; 0x20
    2ce2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ce4:	89 a1       	ldd	r24, Y+33	; 0x21
    2ce6:	9a a1       	ldd	r25, Y+34	; 0x22
    2ce8:	01 97       	sbiw	r24, 0x01	; 1
    2cea:	9a a3       	std	Y+34, r25	; 0x22
    2cec:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cee:	89 a1       	ldd	r24, Y+33	; 0x21
    2cf0:	9a a1       	ldd	r25, Y+34	; 0x22
    2cf2:	00 97       	sbiw	r24, 0x00	; 0
    2cf4:	69 f7       	brne	.-38     	; 0x2cd0 <LCD_sendCommand+0x63a>
    2cf6:	14 c0       	rjmp	.+40     	; 0x2d20 <LCD_sendCommand+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cf8:	6b a1       	ldd	r22, Y+35	; 0x23
    2cfa:	7c a1       	ldd	r23, Y+36	; 0x24
    2cfc:	8d a1       	ldd	r24, Y+37	; 0x25
    2cfe:	9e a1       	ldd	r25, Y+38	; 0x26
    2d00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d04:	dc 01       	movw	r26, r24
    2d06:	cb 01       	movw	r24, r22
    2d08:	9a a3       	std	Y+34, r25	; 0x22
    2d0a:	89 a3       	std	Y+33, r24	; 0x21
    2d0c:	89 a1       	ldd	r24, Y+33	; 0x21
    2d0e:	9a a1       	ldd	r25, Y+34	; 0x22
    2d10:	9e 8f       	std	Y+30, r25	; 0x1e
    2d12:	8d 8f       	std	Y+29, r24	; 0x1d
    2d14:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2d16:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2d18:	01 97       	sbiw	r24, 0x01	; 1
    2d1a:	f1 f7       	brne	.-4      	; 0x2d18 <LCD_sendCommand+0x682>
    2d1c:	9e 8f       	std	Y+30, r25	; 0x1e
    2d1e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,0));
    2d20:	fe 01       	movw	r30, r28
    2d22:	ed 59       	subi	r30, 0x9D	; 157
    2d24:	ff 4f       	sbci	r31, 0xFF	; 255
    2d26:	80 81       	ld	r24, Z
    2d28:	98 2f       	mov	r25, r24
    2d2a:	91 70       	andi	r25, 0x01	; 1
    2d2c:	80 e0       	ldi	r24, 0x00	; 0
    2d2e:	63 e0       	ldi	r22, 0x03	; 3
    2d30:	49 2f       	mov	r20, r25
    2d32:	0e 94 46 10 	call	0x208c	; 0x208c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,1));
    2d36:	fe 01       	movw	r30, r28
    2d38:	ed 59       	subi	r30, 0x9D	; 157
    2d3a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d3c:	80 81       	ld	r24, Z
    2d3e:	88 2f       	mov	r24, r24
    2d40:	90 e0       	ldi	r25, 0x00	; 0
    2d42:	82 70       	andi	r24, 0x02	; 2
    2d44:	90 70       	andi	r25, 0x00	; 0
    2d46:	95 95       	asr	r25
    2d48:	87 95       	ror	r24
    2d4a:	98 2f       	mov	r25, r24
    2d4c:	80 e0       	ldi	r24, 0x00	; 0
    2d4e:	64 e0       	ldi	r22, 0x04	; 4
    2d50:	49 2f       	mov	r20, r25
    2d52:	0e 94 46 10 	call	0x208c	; 0x208c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,2));
    2d56:	fe 01       	movw	r30, r28
    2d58:	ed 59       	subi	r30, 0x9D	; 157
    2d5a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d5c:	80 81       	ld	r24, Z
    2d5e:	88 2f       	mov	r24, r24
    2d60:	90 e0       	ldi	r25, 0x00	; 0
    2d62:	84 70       	andi	r24, 0x04	; 4
    2d64:	90 70       	andi	r25, 0x00	; 0
    2d66:	95 95       	asr	r25
    2d68:	87 95       	ror	r24
    2d6a:	95 95       	asr	r25
    2d6c:	87 95       	ror	r24
    2d6e:	98 2f       	mov	r25, r24
    2d70:	80 e0       	ldi	r24, 0x00	; 0
    2d72:	65 e0       	ldi	r22, 0x05	; 5
    2d74:	49 2f       	mov	r20, r25
    2d76:	0e 94 46 10 	call	0x208c	; 0x208c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,3));
    2d7a:	fe 01       	movw	r30, r28
    2d7c:	ed 59       	subi	r30, 0x9D	; 157
    2d7e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d80:	80 81       	ld	r24, Z
    2d82:	88 2f       	mov	r24, r24
    2d84:	90 e0       	ldi	r25, 0x00	; 0
    2d86:	88 70       	andi	r24, 0x08	; 8
    2d88:	90 70       	andi	r25, 0x00	; 0
    2d8a:	95 95       	asr	r25
    2d8c:	87 95       	ror	r24
    2d8e:	95 95       	asr	r25
    2d90:	87 95       	ror	r24
    2d92:	95 95       	asr	r25
    2d94:	87 95       	ror	r24
    2d96:	98 2f       	mov	r25, r24
    2d98:	80 e0       	ldi	r24, 0x00	; 0
    2d9a:	66 e0       	ldi	r22, 0x06	; 6
    2d9c:	49 2f       	mov	r20, r25
    2d9e:	0e 94 46 10 	call	0x208c	; 0x208c <GPIO_writePin>
    2da2:	80 e0       	ldi	r24, 0x00	; 0
    2da4:	90 e0       	ldi	r25, 0x00	; 0
    2da6:	a0 e8       	ldi	r26, 0x80	; 128
    2da8:	bf e3       	ldi	r27, 0x3F	; 63
    2daa:	89 8f       	std	Y+25, r24	; 0x19
    2dac:	9a 8f       	std	Y+26, r25	; 0x1a
    2dae:	ab 8f       	std	Y+27, r26	; 0x1b
    2db0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2db2:	69 8d       	ldd	r22, Y+25	; 0x19
    2db4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2db6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2db8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2dba:	20 e0       	ldi	r18, 0x00	; 0
    2dbc:	30 e0       	ldi	r19, 0x00	; 0
    2dbe:	4a e7       	ldi	r20, 0x7A	; 122
    2dc0:	55 e4       	ldi	r21, 0x45	; 69
    2dc2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dc6:	dc 01       	movw	r26, r24
    2dc8:	cb 01       	movw	r24, r22
    2dca:	8d 8b       	std	Y+21, r24	; 0x15
    2dcc:	9e 8b       	std	Y+22, r25	; 0x16
    2dce:	af 8b       	std	Y+23, r26	; 0x17
    2dd0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2dd2:	6d 89       	ldd	r22, Y+21	; 0x15
    2dd4:	7e 89       	ldd	r23, Y+22	; 0x16
    2dd6:	8f 89       	ldd	r24, Y+23	; 0x17
    2dd8:	98 8d       	ldd	r25, Y+24	; 0x18
    2dda:	20 e0       	ldi	r18, 0x00	; 0
    2ddc:	30 e0       	ldi	r19, 0x00	; 0
    2dde:	40 e8       	ldi	r20, 0x80	; 128
    2de0:	5f e3       	ldi	r21, 0x3F	; 63
    2de2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2de6:	88 23       	and	r24, r24
    2de8:	2c f4       	brge	.+10     	; 0x2df4 <LCD_sendCommand+0x75e>
		__ticks = 1;
    2dea:	81 e0       	ldi	r24, 0x01	; 1
    2dec:	90 e0       	ldi	r25, 0x00	; 0
    2dee:	9c 8b       	std	Y+20, r25	; 0x14
    2df0:	8b 8b       	std	Y+19, r24	; 0x13
    2df2:	3f c0       	rjmp	.+126    	; 0x2e72 <LCD_sendCommand+0x7dc>
	else if (__tmp > 65535)
    2df4:	6d 89       	ldd	r22, Y+21	; 0x15
    2df6:	7e 89       	ldd	r23, Y+22	; 0x16
    2df8:	8f 89       	ldd	r24, Y+23	; 0x17
    2dfa:	98 8d       	ldd	r25, Y+24	; 0x18
    2dfc:	20 e0       	ldi	r18, 0x00	; 0
    2dfe:	3f ef       	ldi	r19, 0xFF	; 255
    2e00:	4f e7       	ldi	r20, 0x7F	; 127
    2e02:	57 e4       	ldi	r21, 0x47	; 71
    2e04:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e08:	18 16       	cp	r1, r24
    2e0a:	4c f5       	brge	.+82     	; 0x2e5e <LCD_sendCommand+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e0c:	69 8d       	ldd	r22, Y+25	; 0x19
    2e0e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e10:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e12:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e14:	20 e0       	ldi	r18, 0x00	; 0
    2e16:	30 e0       	ldi	r19, 0x00	; 0
    2e18:	40 e2       	ldi	r20, 0x20	; 32
    2e1a:	51 e4       	ldi	r21, 0x41	; 65
    2e1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e20:	dc 01       	movw	r26, r24
    2e22:	cb 01       	movw	r24, r22
    2e24:	bc 01       	movw	r22, r24
    2e26:	cd 01       	movw	r24, r26
    2e28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e2c:	dc 01       	movw	r26, r24
    2e2e:	cb 01       	movw	r24, r22
    2e30:	9c 8b       	std	Y+20, r25	; 0x14
    2e32:	8b 8b       	std	Y+19, r24	; 0x13
    2e34:	0f c0       	rjmp	.+30     	; 0x2e54 <LCD_sendCommand+0x7be>
    2e36:	80 e9       	ldi	r24, 0x90	; 144
    2e38:	91 e0       	ldi	r25, 0x01	; 1
    2e3a:	9a 8b       	std	Y+18, r25	; 0x12
    2e3c:	89 8b       	std	Y+17, r24	; 0x11
    2e3e:	89 89       	ldd	r24, Y+17	; 0x11
    2e40:	9a 89       	ldd	r25, Y+18	; 0x12
    2e42:	01 97       	sbiw	r24, 0x01	; 1
    2e44:	f1 f7       	brne	.-4      	; 0x2e42 <LCD_sendCommand+0x7ac>
    2e46:	9a 8b       	std	Y+18, r25	; 0x12
    2e48:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e4a:	8b 89       	ldd	r24, Y+19	; 0x13
    2e4c:	9c 89       	ldd	r25, Y+20	; 0x14
    2e4e:	01 97       	sbiw	r24, 0x01	; 1
    2e50:	9c 8b       	std	Y+20, r25	; 0x14
    2e52:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e54:	8b 89       	ldd	r24, Y+19	; 0x13
    2e56:	9c 89       	ldd	r25, Y+20	; 0x14
    2e58:	00 97       	sbiw	r24, 0x00	; 0
    2e5a:	69 f7       	brne	.-38     	; 0x2e36 <LCD_sendCommand+0x7a0>
    2e5c:	14 c0       	rjmp	.+40     	; 0x2e86 <LCD_sendCommand+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e5e:	6d 89       	ldd	r22, Y+21	; 0x15
    2e60:	7e 89       	ldd	r23, Y+22	; 0x16
    2e62:	8f 89       	ldd	r24, Y+23	; 0x17
    2e64:	98 8d       	ldd	r25, Y+24	; 0x18
    2e66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e6a:	dc 01       	movw	r26, r24
    2e6c:	cb 01       	movw	r24, r22
    2e6e:	9c 8b       	std	Y+20, r25	; 0x14
    2e70:	8b 8b       	std	Y+19, r24	; 0x13
    2e72:	8b 89       	ldd	r24, Y+19	; 0x13
    2e74:	9c 89       	ldd	r25, Y+20	; 0x14
    2e76:	98 8b       	std	Y+16, r25	; 0x10
    2e78:	8f 87       	std	Y+15, r24	; 0x0f
    2e7a:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e7c:	98 89       	ldd	r25, Y+16	; 0x10
    2e7e:	01 97       	sbiw	r24, 0x01	; 1
    2e80:	f1 f7       	brne	.-4      	; 0x2e7e <LCD_sendCommand+0x7e8>
    2e82:	98 8b       	std	Y+16, r25	; 0x10
    2e84:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2e86:	80 e0       	ldi	r24, 0x00	; 0
    2e88:	62 e0       	ldi	r22, 0x02	; 2
    2e8a:	40 e0       	ldi	r20, 0x00	; 0
    2e8c:	0e 94 46 10 	call	0x208c	; 0x208c <GPIO_writePin>
    2e90:	80 e0       	ldi	r24, 0x00	; 0
    2e92:	90 e0       	ldi	r25, 0x00	; 0
    2e94:	a0 e8       	ldi	r26, 0x80	; 128
    2e96:	bf e3       	ldi	r27, 0x3F	; 63
    2e98:	8b 87       	std	Y+11, r24	; 0x0b
    2e9a:	9c 87       	std	Y+12, r25	; 0x0c
    2e9c:	ad 87       	std	Y+13, r26	; 0x0d
    2e9e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ea0:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ea2:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ea4:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ea6:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ea8:	20 e0       	ldi	r18, 0x00	; 0
    2eaa:	30 e0       	ldi	r19, 0x00	; 0
    2eac:	4a e7       	ldi	r20, 0x7A	; 122
    2eae:	55 e4       	ldi	r21, 0x45	; 69
    2eb0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2eb4:	dc 01       	movw	r26, r24
    2eb6:	cb 01       	movw	r24, r22
    2eb8:	8f 83       	std	Y+7, r24	; 0x07
    2eba:	98 87       	std	Y+8, r25	; 0x08
    2ebc:	a9 87       	std	Y+9, r26	; 0x09
    2ebe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2ec0:	6f 81       	ldd	r22, Y+7	; 0x07
    2ec2:	78 85       	ldd	r23, Y+8	; 0x08
    2ec4:	89 85       	ldd	r24, Y+9	; 0x09
    2ec6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ec8:	20 e0       	ldi	r18, 0x00	; 0
    2eca:	30 e0       	ldi	r19, 0x00	; 0
    2ecc:	40 e8       	ldi	r20, 0x80	; 128
    2ece:	5f e3       	ldi	r21, 0x3F	; 63
    2ed0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ed4:	88 23       	and	r24, r24
    2ed6:	2c f4       	brge	.+10     	; 0x2ee2 <LCD_sendCommand+0x84c>
		__ticks = 1;
    2ed8:	81 e0       	ldi	r24, 0x01	; 1
    2eda:	90 e0       	ldi	r25, 0x00	; 0
    2edc:	9e 83       	std	Y+6, r25	; 0x06
    2ede:	8d 83       	std	Y+5, r24	; 0x05
    2ee0:	3f c0       	rjmp	.+126    	; 0x2f60 <LCD_sendCommand+0x8ca>
	else if (__tmp > 65535)
    2ee2:	6f 81       	ldd	r22, Y+7	; 0x07
    2ee4:	78 85       	ldd	r23, Y+8	; 0x08
    2ee6:	89 85       	ldd	r24, Y+9	; 0x09
    2ee8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2eea:	20 e0       	ldi	r18, 0x00	; 0
    2eec:	3f ef       	ldi	r19, 0xFF	; 255
    2eee:	4f e7       	ldi	r20, 0x7F	; 127
    2ef0:	57 e4       	ldi	r21, 0x47	; 71
    2ef2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ef6:	18 16       	cp	r1, r24
    2ef8:	4c f5       	brge	.+82     	; 0x2f4c <LCD_sendCommand+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2efa:	6b 85       	ldd	r22, Y+11	; 0x0b
    2efc:	7c 85       	ldd	r23, Y+12	; 0x0c
    2efe:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f00:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f02:	20 e0       	ldi	r18, 0x00	; 0
    2f04:	30 e0       	ldi	r19, 0x00	; 0
    2f06:	40 e2       	ldi	r20, 0x20	; 32
    2f08:	51 e4       	ldi	r21, 0x41	; 65
    2f0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f0e:	dc 01       	movw	r26, r24
    2f10:	cb 01       	movw	r24, r22
    2f12:	bc 01       	movw	r22, r24
    2f14:	cd 01       	movw	r24, r26
    2f16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f1a:	dc 01       	movw	r26, r24
    2f1c:	cb 01       	movw	r24, r22
    2f1e:	9e 83       	std	Y+6, r25	; 0x06
    2f20:	8d 83       	std	Y+5, r24	; 0x05
    2f22:	0f c0       	rjmp	.+30     	; 0x2f42 <LCD_sendCommand+0x8ac>
    2f24:	80 e9       	ldi	r24, 0x90	; 144
    2f26:	91 e0       	ldi	r25, 0x01	; 1
    2f28:	9c 83       	std	Y+4, r25	; 0x04
    2f2a:	8b 83       	std	Y+3, r24	; 0x03
    2f2c:	8b 81       	ldd	r24, Y+3	; 0x03
    2f2e:	9c 81       	ldd	r25, Y+4	; 0x04
    2f30:	01 97       	sbiw	r24, 0x01	; 1
    2f32:	f1 f7       	brne	.-4      	; 0x2f30 <LCD_sendCommand+0x89a>
    2f34:	9c 83       	std	Y+4, r25	; 0x04
    2f36:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f38:	8d 81       	ldd	r24, Y+5	; 0x05
    2f3a:	9e 81       	ldd	r25, Y+6	; 0x06
    2f3c:	01 97       	sbiw	r24, 0x01	; 1
    2f3e:	9e 83       	std	Y+6, r25	; 0x06
    2f40:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f42:	8d 81       	ldd	r24, Y+5	; 0x05
    2f44:	9e 81       	ldd	r25, Y+6	; 0x06
    2f46:	00 97       	sbiw	r24, 0x00	; 0
    2f48:	69 f7       	brne	.-38     	; 0x2f24 <LCD_sendCommand+0x88e>
    2f4a:	14 c0       	rjmp	.+40     	; 0x2f74 <LCD_sendCommand+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f4c:	6f 81       	ldd	r22, Y+7	; 0x07
    2f4e:	78 85       	ldd	r23, Y+8	; 0x08
    2f50:	89 85       	ldd	r24, Y+9	; 0x09
    2f52:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f58:	dc 01       	movw	r26, r24
    2f5a:	cb 01       	movw	r24, r22
    2f5c:	9e 83       	std	Y+6, r25	; 0x06
    2f5e:	8d 83       	std	Y+5, r24	; 0x05
    2f60:	8d 81       	ldd	r24, Y+5	; 0x05
    2f62:	9e 81       	ldd	r25, Y+6	; 0x06
    2f64:	9a 83       	std	Y+2, r25	; 0x02
    2f66:	89 83       	std	Y+1, r24	; 0x01
    2f68:	89 81       	ldd	r24, Y+1	; 0x01
    2f6a:	9a 81       	ldd	r25, Y+2	; 0x02
    2f6c:	01 97       	sbiw	r24, 0x01	; 1
    2f6e:	f1 f7       	brne	.-4      	; 0x2f6c <LCD_sendCommand+0x8d6>
    2f70:	9a 83       	std	Y+2, r25	; 0x02
    2f72:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2f74:	cd 59       	subi	r28, 0x9D	; 157
    2f76:	df 4f       	sbci	r29, 0xFF	; 255
    2f78:	0f b6       	in	r0, 0x3f	; 63
    2f7a:	f8 94       	cli
    2f7c:	de bf       	out	0x3e, r29	; 62
    2f7e:	0f be       	out	0x3f, r0	; 63
    2f80:	cd bf       	out	0x3d, r28	; 61
    2f82:	cf 91       	pop	r28
    2f84:	df 91       	pop	r29
    2f86:	1f 91       	pop	r17
    2f88:	0f 91       	pop	r16
    2f8a:	08 95       	ret

00002f8c <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    2f8c:	0f 93       	push	r16
    2f8e:	1f 93       	push	r17
    2f90:	df 93       	push	r29
    2f92:	cf 93       	push	r28
    2f94:	cd b7       	in	r28, 0x3d	; 61
    2f96:	de b7       	in	r29, 0x3e	; 62
    2f98:	c3 56       	subi	r28, 0x63	; 99
    2f9a:	d0 40       	sbci	r29, 0x00	; 0
    2f9c:	0f b6       	in	r0, 0x3f	; 63
    2f9e:	f8 94       	cli
    2fa0:	de bf       	out	0x3e, r29	; 62
    2fa2:	0f be       	out	0x3f, r0	; 63
    2fa4:	cd bf       	out	0x3d, r28	; 61
    2fa6:	fe 01       	movw	r30, r28
    2fa8:	ed 59       	subi	r30, 0x9D	; 157
    2faa:	ff 4f       	sbci	r31, 0xFF	; 255
    2fac:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    2fae:	80 e0       	ldi	r24, 0x00	; 0
    2fb0:	61 e0       	ldi	r22, 0x01	; 1
    2fb2:	41 e0       	ldi	r20, 0x01	; 1
    2fb4:	0e 94 46 10 	call	0x208c	; 0x208c <GPIO_writePin>
    2fb8:	fe 01       	movw	r30, r28
    2fba:	e1 5a       	subi	r30, 0xA1	; 161
    2fbc:	ff 4f       	sbci	r31, 0xFF	; 255
    2fbe:	80 e0       	ldi	r24, 0x00	; 0
    2fc0:	90 e0       	ldi	r25, 0x00	; 0
    2fc2:	a0 e8       	ldi	r26, 0x80	; 128
    2fc4:	bf e3       	ldi	r27, 0x3F	; 63
    2fc6:	80 83       	st	Z, r24
    2fc8:	91 83       	std	Z+1, r25	; 0x01
    2fca:	a2 83       	std	Z+2, r26	; 0x02
    2fcc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fce:	8e 01       	movw	r16, r28
    2fd0:	05 5a       	subi	r16, 0xA5	; 165
    2fd2:	1f 4f       	sbci	r17, 0xFF	; 255
    2fd4:	fe 01       	movw	r30, r28
    2fd6:	e1 5a       	subi	r30, 0xA1	; 161
    2fd8:	ff 4f       	sbci	r31, 0xFF	; 255
    2fda:	60 81       	ld	r22, Z
    2fdc:	71 81       	ldd	r23, Z+1	; 0x01
    2fde:	82 81       	ldd	r24, Z+2	; 0x02
    2fe0:	93 81       	ldd	r25, Z+3	; 0x03
    2fe2:	20 e0       	ldi	r18, 0x00	; 0
    2fe4:	30 e0       	ldi	r19, 0x00	; 0
    2fe6:	4a e7       	ldi	r20, 0x7A	; 122
    2fe8:	55 e4       	ldi	r21, 0x45	; 69
    2fea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fee:	dc 01       	movw	r26, r24
    2ff0:	cb 01       	movw	r24, r22
    2ff2:	f8 01       	movw	r30, r16
    2ff4:	80 83       	st	Z, r24
    2ff6:	91 83       	std	Z+1, r25	; 0x01
    2ff8:	a2 83       	std	Z+2, r26	; 0x02
    2ffa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2ffc:	fe 01       	movw	r30, r28
    2ffe:	e5 5a       	subi	r30, 0xA5	; 165
    3000:	ff 4f       	sbci	r31, 0xFF	; 255
    3002:	60 81       	ld	r22, Z
    3004:	71 81       	ldd	r23, Z+1	; 0x01
    3006:	82 81       	ldd	r24, Z+2	; 0x02
    3008:	93 81       	ldd	r25, Z+3	; 0x03
    300a:	20 e0       	ldi	r18, 0x00	; 0
    300c:	30 e0       	ldi	r19, 0x00	; 0
    300e:	40 e8       	ldi	r20, 0x80	; 128
    3010:	5f e3       	ldi	r21, 0x3F	; 63
    3012:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3016:	88 23       	and	r24, r24
    3018:	44 f4       	brge	.+16     	; 0x302a <LCD_displayCharacter+0x9e>
		__ticks = 1;
    301a:	fe 01       	movw	r30, r28
    301c:	e7 5a       	subi	r30, 0xA7	; 167
    301e:	ff 4f       	sbci	r31, 0xFF	; 255
    3020:	81 e0       	ldi	r24, 0x01	; 1
    3022:	90 e0       	ldi	r25, 0x00	; 0
    3024:	91 83       	std	Z+1, r25	; 0x01
    3026:	80 83       	st	Z, r24
    3028:	64 c0       	rjmp	.+200    	; 0x30f2 <LCD_displayCharacter+0x166>
	else if (__tmp > 65535)
    302a:	fe 01       	movw	r30, r28
    302c:	e5 5a       	subi	r30, 0xA5	; 165
    302e:	ff 4f       	sbci	r31, 0xFF	; 255
    3030:	60 81       	ld	r22, Z
    3032:	71 81       	ldd	r23, Z+1	; 0x01
    3034:	82 81       	ldd	r24, Z+2	; 0x02
    3036:	93 81       	ldd	r25, Z+3	; 0x03
    3038:	20 e0       	ldi	r18, 0x00	; 0
    303a:	3f ef       	ldi	r19, 0xFF	; 255
    303c:	4f e7       	ldi	r20, 0x7F	; 127
    303e:	57 e4       	ldi	r21, 0x47	; 71
    3040:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3044:	18 16       	cp	r1, r24
    3046:	0c f0       	brlt	.+2      	; 0x304a <LCD_displayCharacter+0xbe>
    3048:	43 c0       	rjmp	.+134    	; 0x30d0 <LCD_displayCharacter+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    304a:	fe 01       	movw	r30, r28
    304c:	e1 5a       	subi	r30, 0xA1	; 161
    304e:	ff 4f       	sbci	r31, 0xFF	; 255
    3050:	60 81       	ld	r22, Z
    3052:	71 81       	ldd	r23, Z+1	; 0x01
    3054:	82 81       	ldd	r24, Z+2	; 0x02
    3056:	93 81       	ldd	r25, Z+3	; 0x03
    3058:	20 e0       	ldi	r18, 0x00	; 0
    305a:	30 e0       	ldi	r19, 0x00	; 0
    305c:	40 e2       	ldi	r20, 0x20	; 32
    305e:	51 e4       	ldi	r21, 0x41	; 65
    3060:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3064:	dc 01       	movw	r26, r24
    3066:	cb 01       	movw	r24, r22
    3068:	8e 01       	movw	r16, r28
    306a:	07 5a       	subi	r16, 0xA7	; 167
    306c:	1f 4f       	sbci	r17, 0xFF	; 255
    306e:	bc 01       	movw	r22, r24
    3070:	cd 01       	movw	r24, r26
    3072:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3076:	dc 01       	movw	r26, r24
    3078:	cb 01       	movw	r24, r22
    307a:	f8 01       	movw	r30, r16
    307c:	91 83       	std	Z+1, r25	; 0x01
    307e:	80 83       	st	Z, r24
    3080:	1f c0       	rjmp	.+62     	; 0x30c0 <LCD_displayCharacter+0x134>
    3082:	fe 01       	movw	r30, r28
    3084:	e9 5a       	subi	r30, 0xA9	; 169
    3086:	ff 4f       	sbci	r31, 0xFF	; 255
    3088:	80 e9       	ldi	r24, 0x90	; 144
    308a:	91 e0       	ldi	r25, 0x01	; 1
    308c:	91 83       	std	Z+1, r25	; 0x01
    308e:	80 83       	st	Z, r24
    3090:	fe 01       	movw	r30, r28
    3092:	e9 5a       	subi	r30, 0xA9	; 169
    3094:	ff 4f       	sbci	r31, 0xFF	; 255
    3096:	80 81       	ld	r24, Z
    3098:	91 81       	ldd	r25, Z+1	; 0x01
    309a:	01 97       	sbiw	r24, 0x01	; 1
    309c:	f1 f7       	brne	.-4      	; 0x309a <LCD_displayCharacter+0x10e>
    309e:	fe 01       	movw	r30, r28
    30a0:	e9 5a       	subi	r30, 0xA9	; 169
    30a2:	ff 4f       	sbci	r31, 0xFF	; 255
    30a4:	91 83       	std	Z+1, r25	; 0x01
    30a6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30a8:	de 01       	movw	r26, r28
    30aa:	a7 5a       	subi	r26, 0xA7	; 167
    30ac:	bf 4f       	sbci	r27, 0xFF	; 255
    30ae:	fe 01       	movw	r30, r28
    30b0:	e7 5a       	subi	r30, 0xA7	; 167
    30b2:	ff 4f       	sbci	r31, 0xFF	; 255
    30b4:	80 81       	ld	r24, Z
    30b6:	91 81       	ldd	r25, Z+1	; 0x01
    30b8:	01 97       	sbiw	r24, 0x01	; 1
    30ba:	11 96       	adiw	r26, 0x01	; 1
    30bc:	9c 93       	st	X, r25
    30be:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30c0:	fe 01       	movw	r30, r28
    30c2:	e7 5a       	subi	r30, 0xA7	; 167
    30c4:	ff 4f       	sbci	r31, 0xFF	; 255
    30c6:	80 81       	ld	r24, Z
    30c8:	91 81       	ldd	r25, Z+1	; 0x01
    30ca:	00 97       	sbiw	r24, 0x00	; 0
    30cc:	d1 f6       	brne	.-76     	; 0x3082 <LCD_displayCharacter+0xf6>
    30ce:	27 c0       	rjmp	.+78     	; 0x311e <LCD_displayCharacter+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30d0:	8e 01       	movw	r16, r28
    30d2:	07 5a       	subi	r16, 0xA7	; 167
    30d4:	1f 4f       	sbci	r17, 0xFF	; 255
    30d6:	fe 01       	movw	r30, r28
    30d8:	e5 5a       	subi	r30, 0xA5	; 165
    30da:	ff 4f       	sbci	r31, 0xFF	; 255
    30dc:	60 81       	ld	r22, Z
    30de:	71 81       	ldd	r23, Z+1	; 0x01
    30e0:	82 81       	ldd	r24, Z+2	; 0x02
    30e2:	93 81       	ldd	r25, Z+3	; 0x03
    30e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30e8:	dc 01       	movw	r26, r24
    30ea:	cb 01       	movw	r24, r22
    30ec:	f8 01       	movw	r30, r16
    30ee:	91 83       	std	Z+1, r25	; 0x01
    30f0:	80 83       	st	Z, r24
    30f2:	de 01       	movw	r26, r28
    30f4:	ab 5a       	subi	r26, 0xAB	; 171
    30f6:	bf 4f       	sbci	r27, 0xFF	; 255
    30f8:	fe 01       	movw	r30, r28
    30fa:	e7 5a       	subi	r30, 0xA7	; 167
    30fc:	ff 4f       	sbci	r31, 0xFF	; 255
    30fe:	80 81       	ld	r24, Z
    3100:	91 81       	ldd	r25, Z+1	; 0x01
    3102:	8d 93       	st	X+, r24
    3104:	9c 93       	st	X, r25
    3106:	fe 01       	movw	r30, r28
    3108:	eb 5a       	subi	r30, 0xAB	; 171
    310a:	ff 4f       	sbci	r31, 0xFF	; 255
    310c:	80 81       	ld	r24, Z
    310e:	91 81       	ldd	r25, Z+1	; 0x01
    3110:	01 97       	sbiw	r24, 0x01	; 1
    3112:	f1 f7       	brne	.-4      	; 0x3110 <LCD_displayCharacter+0x184>
    3114:	fe 01       	movw	r30, r28
    3116:	eb 5a       	subi	r30, 0xAB	; 171
    3118:	ff 4f       	sbci	r31, 0xFF	; 255
    311a:	91 83       	std	Z+1, r25	; 0x01
    311c:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    311e:	80 e0       	ldi	r24, 0x00	; 0
    3120:	62 e0       	ldi	r22, 0x02	; 2
    3122:	41 e0       	ldi	r20, 0x01	; 1
    3124:	0e 94 46 10 	call	0x208c	; 0x208c <GPIO_writePin>
    3128:	fe 01       	movw	r30, r28
    312a:	ef 5a       	subi	r30, 0xAF	; 175
    312c:	ff 4f       	sbci	r31, 0xFF	; 255
    312e:	80 e0       	ldi	r24, 0x00	; 0
    3130:	90 e0       	ldi	r25, 0x00	; 0
    3132:	a0 e8       	ldi	r26, 0x80	; 128
    3134:	bf e3       	ldi	r27, 0x3F	; 63
    3136:	80 83       	st	Z, r24
    3138:	91 83       	std	Z+1, r25	; 0x01
    313a:	a2 83       	std	Z+2, r26	; 0x02
    313c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    313e:	8e 01       	movw	r16, r28
    3140:	03 5b       	subi	r16, 0xB3	; 179
    3142:	1f 4f       	sbci	r17, 0xFF	; 255
    3144:	fe 01       	movw	r30, r28
    3146:	ef 5a       	subi	r30, 0xAF	; 175
    3148:	ff 4f       	sbci	r31, 0xFF	; 255
    314a:	60 81       	ld	r22, Z
    314c:	71 81       	ldd	r23, Z+1	; 0x01
    314e:	82 81       	ldd	r24, Z+2	; 0x02
    3150:	93 81       	ldd	r25, Z+3	; 0x03
    3152:	20 e0       	ldi	r18, 0x00	; 0
    3154:	30 e0       	ldi	r19, 0x00	; 0
    3156:	4a e7       	ldi	r20, 0x7A	; 122
    3158:	55 e4       	ldi	r21, 0x45	; 69
    315a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    315e:	dc 01       	movw	r26, r24
    3160:	cb 01       	movw	r24, r22
    3162:	f8 01       	movw	r30, r16
    3164:	80 83       	st	Z, r24
    3166:	91 83       	std	Z+1, r25	; 0x01
    3168:	a2 83       	std	Z+2, r26	; 0x02
    316a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    316c:	fe 01       	movw	r30, r28
    316e:	e3 5b       	subi	r30, 0xB3	; 179
    3170:	ff 4f       	sbci	r31, 0xFF	; 255
    3172:	60 81       	ld	r22, Z
    3174:	71 81       	ldd	r23, Z+1	; 0x01
    3176:	82 81       	ldd	r24, Z+2	; 0x02
    3178:	93 81       	ldd	r25, Z+3	; 0x03
    317a:	20 e0       	ldi	r18, 0x00	; 0
    317c:	30 e0       	ldi	r19, 0x00	; 0
    317e:	40 e8       	ldi	r20, 0x80	; 128
    3180:	5f e3       	ldi	r21, 0x3F	; 63
    3182:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3186:	88 23       	and	r24, r24
    3188:	44 f4       	brge	.+16     	; 0x319a <LCD_displayCharacter+0x20e>
		__ticks = 1;
    318a:	fe 01       	movw	r30, r28
    318c:	e5 5b       	subi	r30, 0xB5	; 181
    318e:	ff 4f       	sbci	r31, 0xFF	; 255
    3190:	81 e0       	ldi	r24, 0x01	; 1
    3192:	90 e0       	ldi	r25, 0x00	; 0
    3194:	91 83       	std	Z+1, r25	; 0x01
    3196:	80 83       	st	Z, r24
    3198:	64 c0       	rjmp	.+200    	; 0x3262 <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    319a:	fe 01       	movw	r30, r28
    319c:	e3 5b       	subi	r30, 0xB3	; 179
    319e:	ff 4f       	sbci	r31, 0xFF	; 255
    31a0:	60 81       	ld	r22, Z
    31a2:	71 81       	ldd	r23, Z+1	; 0x01
    31a4:	82 81       	ldd	r24, Z+2	; 0x02
    31a6:	93 81       	ldd	r25, Z+3	; 0x03
    31a8:	20 e0       	ldi	r18, 0x00	; 0
    31aa:	3f ef       	ldi	r19, 0xFF	; 255
    31ac:	4f e7       	ldi	r20, 0x7F	; 127
    31ae:	57 e4       	ldi	r21, 0x47	; 71
    31b0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    31b4:	18 16       	cp	r1, r24
    31b6:	0c f0       	brlt	.+2      	; 0x31ba <LCD_displayCharacter+0x22e>
    31b8:	43 c0       	rjmp	.+134    	; 0x3240 <LCD_displayCharacter+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31ba:	fe 01       	movw	r30, r28
    31bc:	ef 5a       	subi	r30, 0xAF	; 175
    31be:	ff 4f       	sbci	r31, 0xFF	; 255
    31c0:	60 81       	ld	r22, Z
    31c2:	71 81       	ldd	r23, Z+1	; 0x01
    31c4:	82 81       	ldd	r24, Z+2	; 0x02
    31c6:	93 81       	ldd	r25, Z+3	; 0x03
    31c8:	20 e0       	ldi	r18, 0x00	; 0
    31ca:	30 e0       	ldi	r19, 0x00	; 0
    31cc:	40 e2       	ldi	r20, 0x20	; 32
    31ce:	51 e4       	ldi	r21, 0x41	; 65
    31d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31d4:	dc 01       	movw	r26, r24
    31d6:	cb 01       	movw	r24, r22
    31d8:	8e 01       	movw	r16, r28
    31da:	05 5b       	subi	r16, 0xB5	; 181
    31dc:	1f 4f       	sbci	r17, 0xFF	; 255
    31de:	bc 01       	movw	r22, r24
    31e0:	cd 01       	movw	r24, r26
    31e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31e6:	dc 01       	movw	r26, r24
    31e8:	cb 01       	movw	r24, r22
    31ea:	f8 01       	movw	r30, r16
    31ec:	91 83       	std	Z+1, r25	; 0x01
    31ee:	80 83       	st	Z, r24
    31f0:	1f c0       	rjmp	.+62     	; 0x3230 <LCD_displayCharacter+0x2a4>
    31f2:	fe 01       	movw	r30, r28
    31f4:	e7 5b       	subi	r30, 0xB7	; 183
    31f6:	ff 4f       	sbci	r31, 0xFF	; 255
    31f8:	80 e9       	ldi	r24, 0x90	; 144
    31fa:	91 e0       	ldi	r25, 0x01	; 1
    31fc:	91 83       	std	Z+1, r25	; 0x01
    31fe:	80 83       	st	Z, r24
    3200:	fe 01       	movw	r30, r28
    3202:	e7 5b       	subi	r30, 0xB7	; 183
    3204:	ff 4f       	sbci	r31, 0xFF	; 255
    3206:	80 81       	ld	r24, Z
    3208:	91 81       	ldd	r25, Z+1	; 0x01
    320a:	01 97       	sbiw	r24, 0x01	; 1
    320c:	f1 f7       	brne	.-4      	; 0x320a <LCD_displayCharacter+0x27e>
    320e:	fe 01       	movw	r30, r28
    3210:	e7 5b       	subi	r30, 0xB7	; 183
    3212:	ff 4f       	sbci	r31, 0xFF	; 255
    3214:	91 83       	std	Z+1, r25	; 0x01
    3216:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3218:	de 01       	movw	r26, r28
    321a:	a5 5b       	subi	r26, 0xB5	; 181
    321c:	bf 4f       	sbci	r27, 0xFF	; 255
    321e:	fe 01       	movw	r30, r28
    3220:	e5 5b       	subi	r30, 0xB5	; 181
    3222:	ff 4f       	sbci	r31, 0xFF	; 255
    3224:	80 81       	ld	r24, Z
    3226:	91 81       	ldd	r25, Z+1	; 0x01
    3228:	01 97       	sbiw	r24, 0x01	; 1
    322a:	11 96       	adiw	r26, 0x01	; 1
    322c:	9c 93       	st	X, r25
    322e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3230:	fe 01       	movw	r30, r28
    3232:	e5 5b       	subi	r30, 0xB5	; 181
    3234:	ff 4f       	sbci	r31, 0xFF	; 255
    3236:	80 81       	ld	r24, Z
    3238:	91 81       	ldd	r25, Z+1	; 0x01
    323a:	00 97       	sbiw	r24, 0x00	; 0
    323c:	d1 f6       	brne	.-76     	; 0x31f2 <LCD_displayCharacter+0x266>
    323e:	27 c0       	rjmp	.+78     	; 0x328e <LCD_displayCharacter+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3240:	8e 01       	movw	r16, r28
    3242:	05 5b       	subi	r16, 0xB5	; 181
    3244:	1f 4f       	sbci	r17, 0xFF	; 255
    3246:	fe 01       	movw	r30, r28
    3248:	e3 5b       	subi	r30, 0xB3	; 179
    324a:	ff 4f       	sbci	r31, 0xFF	; 255
    324c:	60 81       	ld	r22, Z
    324e:	71 81       	ldd	r23, Z+1	; 0x01
    3250:	82 81       	ldd	r24, Z+2	; 0x02
    3252:	93 81       	ldd	r25, Z+3	; 0x03
    3254:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3258:	dc 01       	movw	r26, r24
    325a:	cb 01       	movw	r24, r22
    325c:	f8 01       	movw	r30, r16
    325e:	91 83       	std	Z+1, r25	; 0x01
    3260:	80 83       	st	Z, r24
    3262:	de 01       	movw	r26, r28
    3264:	a9 5b       	subi	r26, 0xB9	; 185
    3266:	bf 4f       	sbci	r27, 0xFF	; 255
    3268:	fe 01       	movw	r30, r28
    326a:	e5 5b       	subi	r30, 0xB5	; 181
    326c:	ff 4f       	sbci	r31, 0xFF	; 255
    326e:	80 81       	ld	r24, Z
    3270:	91 81       	ldd	r25, Z+1	; 0x01
    3272:	8d 93       	st	X+, r24
    3274:	9c 93       	st	X, r25
    3276:	fe 01       	movw	r30, r28
    3278:	e9 5b       	subi	r30, 0xB9	; 185
    327a:	ff 4f       	sbci	r31, 0xFF	; 255
    327c:	80 81       	ld	r24, Z
    327e:	91 81       	ldd	r25, Z+1	; 0x01
    3280:	01 97       	sbiw	r24, 0x01	; 1
    3282:	f1 f7       	brne	.-4      	; 0x3280 <LCD_displayCharacter+0x2f4>
    3284:	fe 01       	movw	r30, r28
    3286:	e9 5b       	subi	r30, 0xB9	; 185
    3288:	ff 4f       	sbci	r31, 0xFF	; 255
    328a:	91 83       	std	Z+1, r25	; 0x01
    328c:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,4));
    328e:	fe 01       	movw	r30, r28
    3290:	ed 59       	subi	r30, 0x9D	; 157
    3292:	ff 4f       	sbci	r31, 0xFF	; 255
    3294:	80 81       	ld	r24, Z
    3296:	88 2f       	mov	r24, r24
    3298:	90 e0       	ldi	r25, 0x00	; 0
    329a:	80 71       	andi	r24, 0x10	; 16
    329c:	90 70       	andi	r25, 0x00	; 0
    329e:	95 95       	asr	r25
    32a0:	87 95       	ror	r24
    32a2:	95 95       	asr	r25
    32a4:	87 95       	ror	r24
    32a6:	95 95       	asr	r25
    32a8:	87 95       	ror	r24
    32aa:	95 95       	asr	r25
    32ac:	87 95       	ror	r24
    32ae:	98 2f       	mov	r25, r24
    32b0:	80 e0       	ldi	r24, 0x00	; 0
    32b2:	63 e0       	ldi	r22, 0x03	; 3
    32b4:	49 2f       	mov	r20, r25
    32b6:	0e 94 46 10 	call	0x208c	; 0x208c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,5));
    32ba:	fe 01       	movw	r30, r28
    32bc:	ed 59       	subi	r30, 0x9D	; 157
    32be:	ff 4f       	sbci	r31, 0xFF	; 255
    32c0:	80 81       	ld	r24, Z
    32c2:	88 2f       	mov	r24, r24
    32c4:	90 e0       	ldi	r25, 0x00	; 0
    32c6:	80 72       	andi	r24, 0x20	; 32
    32c8:	90 70       	andi	r25, 0x00	; 0
    32ca:	95 95       	asr	r25
    32cc:	87 95       	ror	r24
    32ce:	95 95       	asr	r25
    32d0:	87 95       	ror	r24
    32d2:	95 95       	asr	r25
    32d4:	87 95       	ror	r24
    32d6:	95 95       	asr	r25
    32d8:	87 95       	ror	r24
    32da:	95 95       	asr	r25
    32dc:	87 95       	ror	r24
    32de:	98 2f       	mov	r25, r24
    32e0:	80 e0       	ldi	r24, 0x00	; 0
    32e2:	64 e0       	ldi	r22, 0x04	; 4
    32e4:	49 2f       	mov	r20, r25
    32e6:	0e 94 46 10 	call	0x208c	; 0x208c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,6));
    32ea:	fe 01       	movw	r30, r28
    32ec:	ed 59       	subi	r30, 0x9D	; 157
    32ee:	ff 4f       	sbci	r31, 0xFF	; 255
    32f0:	80 81       	ld	r24, Z
    32f2:	88 2f       	mov	r24, r24
    32f4:	90 e0       	ldi	r25, 0x00	; 0
    32f6:	80 74       	andi	r24, 0x40	; 64
    32f8:	90 70       	andi	r25, 0x00	; 0
    32fa:	08 2e       	mov	r0, r24
    32fc:	89 2f       	mov	r24, r25
    32fe:	00 0c       	add	r0, r0
    3300:	88 1f       	adc	r24, r24
    3302:	99 0b       	sbc	r25, r25
    3304:	00 0c       	add	r0, r0
    3306:	88 1f       	adc	r24, r24
    3308:	99 1f       	adc	r25, r25
    330a:	98 2f       	mov	r25, r24
    330c:	80 e0       	ldi	r24, 0x00	; 0
    330e:	65 e0       	ldi	r22, 0x05	; 5
    3310:	49 2f       	mov	r20, r25
    3312:	0e 94 46 10 	call	0x208c	; 0x208c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,7));
    3316:	fe 01       	movw	r30, r28
    3318:	ed 59       	subi	r30, 0x9D	; 157
    331a:	ff 4f       	sbci	r31, 0xFF	; 255
    331c:	80 81       	ld	r24, Z
    331e:	98 2f       	mov	r25, r24
    3320:	99 1f       	adc	r25, r25
    3322:	99 27       	eor	r25, r25
    3324:	99 1f       	adc	r25, r25
    3326:	80 e0       	ldi	r24, 0x00	; 0
    3328:	66 e0       	ldi	r22, 0x06	; 6
    332a:	49 2f       	mov	r20, r25
    332c:	0e 94 46 10 	call	0x208c	; 0x208c <GPIO_writePin>
    3330:	fe 01       	movw	r30, r28
    3332:	ed 5b       	subi	r30, 0xBD	; 189
    3334:	ff 4f       	sbci	r31, 0xFF	; 255
    3336:	80 e0       	ldi	r24, 0x00	; 0
    3338:	90 e0       	ldi	r25, 0x00	; 0
    333a:	a0 e8       	ldi	r26, 0x80	; 128
    333c:	bf e3       	ldi	r27, 0x3F	; 63
    333e:	80 83       	st	Z, r24
    3340:	91 83       	std	Z+1, r25	; 0x01
    3342:	a2 83       	std	Z+2, r26	; 0x02
    3344:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3346:	8e 01       	movw	r16, r28
    3348:	01 5c       	subi	r16, 0xC1	; 193
    334a:	1f 4f       	sbci	r17, 0xFF	; 255
    334c:	fe 01       	movw	r30, r28
    334e:	ed 5b       	subi	r30, 0xBD	; 189
    3350:	ff 4f       	sbci	r31, 0xFF	; 255
    3352:	60 81       	ld	r22, Z
    3354:	71 81       	ldd	r23, Z+1	; 0x01
    3356:	82 81       	ldd	r24, Z+2	; 0x02
    3358:	93 81       	ldd	r25, Z+3	; 0x03
    335a:	20 e0       	ldi	r18, 0x00	; 0
    335c:	30 e0       	ldi	r19, 0x00	; 0
    335e:	4a e7       	ldi	r20, 0x7A	; 122
    3360:	55 e4       	ldi	r21, 0x45	; 69
    3362:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3366:	dc 01       	movw	r26, r24
    3368:	cb 01       	movw	r24, r22
    336a:	f8 01       	movw	r30, r16
    336c:	80 83       	st	Z, r24
    336e:	91 83       	std	Z+1, r25	; 0x01
    3370:	a2 83       	std	Z+2, r26	; 0x02
    3372:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3374:	fe 01       	movw	r30, r28
    3376:	ff 96       	adiw	r30, 0x3f	; 63
    3378:	60 81       	ld	r22, Z
    337a:	71 81       	ldd	r23, Z+1	; 0x01
    337c:	82 81       	ldd	r24, Z+2	; 0x02
    337e:	93 81       	ldd	r25, Z+3	; 0x03
    3380:	20 e0       	ldi	r18, 0x00	; 0
    3382:	30 e0       	ldi	r19, 0x00	; 0
    3384:	40 e8       	ldi	r20, 0x80	; 128
    3386:	5f e3       	ldi	r21, 0x3F	; 63
    3388:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    338c:	88 23       	and	r24, r24
    338e:	2c f4       	brge	.+10     	; 0x339a <LCD_displayCharacter+0x40e>
		__ticks = 1;
    3390:	81 e0       	ldi	r24, 0x01	; 1
    3392:	90 e0       	ldi	r25, 0x00	; 0
    3394:	9e af       	std	Y+62, r25	; 0x3e
    3396:	8d af       	std	Y+61, r24	; 0x3d
    3398:	46 c0       	rjmp	.+140    	; 0x3426 <LCD_displayCharacter+0x49a>
	else if (__tmp > 65535)
    339a:	fe 01       	movw	r30, r28
    339c:	ff 96       	adiw	r30, 0x3f	; 63
    339e:	60 81       	ld	r22, Z
    33a0:	71 81       	ldd	r23, Z+1	; 0x01
    33a2:	82 81       	ldd	r24, Z+2	; 0x02
    33a4:	93 81       	ldd	r25, Z+3	; 0x03
    33a6:	20 e0       	ldi	r18, 0x00	; 0
    33a8:	3f ef       	ldi	r19, 0xFF	; 255
    33aa:	4f e7       	ldi	r20, 0x7F	; 127
    33ac:	57 e4       	ldi	r21, 0x47	; 71
    33ae:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    33b2:	18 16       	cp	r1, r24
    33b4:	64 f5       	brge	.+88     	; 0x340e <LCD_displayCharacter+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33b6:	fe 01       	movw	r30, r28
    33b8:	ed 5b       	subi	r30, 0xBD	; 189
    33ba:	ff 4f       	sbci	r31, 0xFF	; 255
    33bc:	60 81       	ld	r22, Z
    33be:	71 81       	ldd	r23, Z+1	; 0x01
    33c0:	82 81       	ldd	r24, Z+2	; 0x02
    33c2:	93 81       	ldd	r25, Z+3	; 0x03
    33c4:	20 e0       	ldi	r18, 0x00	; 0
    33c6:	30 e0       	ldi	r19, 0x00	; 0
    33c8:	40 e2       	ldi	r20, 0x20	; 32
    33ca:	51 e4       	ldi	r21, 0x41	; 65
    33cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33d0:	dc 01       	movw	r26, r24
    33d2:	cb 01       	movw	r24, r22
    33d4:	bc 01       	movw	r22, r24
    33d6:	cd 01       	movw	r24, r26
    33d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33dc:	dc 01       	movw	r26, r24
    33de:	cb 01       	movw	r24, r22
    33e0:	9e af       	std	Y+62, r25	; 0x3e
    33e2:	8d af       	std	Y+61, r24	; 0x3d
    33e4:	0f c0       	rjmp	.+30     	; 0x3404 <LCD_displayCharacter+0x478>
    33e6:	80 e9       	ldi	r24, 0x90	; 144
    33e8:	91 e0       	ldi	r25, 0x01	; 1
    33ea:	9c af       	std	Y+60, r25	; 0x3c
    33ec:	8b af       	std	Y+59, r24	; 0x3b
    33ee:	8b ad       	ldd	r24, Y+59	; 0x3b
    33f0:	9c ad       	ldd	r25, Y+60	; 0x3c
    33f2:	01 97       	sbiw	r24, 0x01	; 1
    33f4:	f1 f7       	brne	.-4      	; 0x33f2 <LCD_displayCharacter+0x466>
    33f6:	9c af       	std	Y+60, r25	; 0x3c
    33f8:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33fa:	8d ad       	ldd	r24, Y+61	; 0x3d
    33fc:	9e ad       	ldd	r25, Y+62	; 0x3e
    33fe:	01 97       	sbiw	r24, 0x01	; 1
    3400:	9e af       	std	Y+62, r25	; 0x3e
    3402:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3404:	8d ad       	ldd	r24, Y+61	; 0x3d
    3406:	9e ad       	ldd	r25, Y+62	; 0x3e
    3408:	00 97       	sbiw	r24, 0x00	; 0
    340a:	69 f7       	brne	.-38     	; 0x33e6 <LCD_displayCharacter+0x45a>
    340c:	16 c0       	rjmp	.+44     	; 0x343a <LCD_displayCharacter+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    340e:	fe 01       	movw	r30, r28
    3410:	ff 96       	adiw	r30, 0x3f	; 63
    3412:	60 81       	ld	r22, Z
    3414:	71 81       	ldd	r23, Z+1	; 0x01
    3416:	82 81       	ldd	r24, Z+2	; 0x02
    3418:	93 81       	ldd	r25, Z+3	; 0x03
    341a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    341e:	dc 01       	movw	r26, r24
    3420:	cb 01       	movw	r24, r22
    3422:	9e af       	std	Y+62, r25	; 0x3e
    3424:	8d af       	std	Y+61, r24	; 0x3d
    3426:	8d ad       	ldd	r24, Y+61	; 0x3d
    3428:	9e ad       	ldd	r25, Y+62	; 0x3e
    342a:	9a af       	std	Y+58, r25	; 0x3a
    342c:	89 af       	std	Y+57, r24	; 0x39
    342e:	89 ad       	ldd	r24, Y+57	; 0x39
    3430:	9a ad       	ldd	r25, Y+58	; 0x3a
    3432:	01 97       	sbiw	r24, 0x01	; 1
    3434:	f1 f7       	brne	.-4      	; 0x3432 <LCD_displayCharacter+0x4a6>
    3436:	9a af       	std	Y+58, r25	; 0x3a
    3438:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    343a:	80 e0       	ldi	r24, 0x00	; 0
    343c:	62 e0       	ldi	r22, 0x02	; 2
    343e:	40 e0       	ldi	r20, 0x00	; 0
    3440:	0e 94 46 10 	call	0x208c	; 0x208c <GPIO_writePin>
    3444:	80 e0       	ldi	r24, 0x00	; 0
    3446:	90 e0       	ldi	r25, 0x00	; 0
    3448:	a0 e8       	ldi	r26, 0x80	; 128
    344a:	bf e3       	ldi	r27, 0x3F	; 63
    344c:	8d ab       	std	Y+53, r24	; 0x35
    344e:	9e ab       	std	Y+54, r25	; 0x36
    3450:	af ab       	std	Y+55, r26	; 0x37
    3452:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3454:	6d a9       	ldd	r22, Y+53	; 0x35
    3456:	7e a9       	ldd	r23, Y+54	; 0x36
    3458:	8f a9       	ldd	r24, Y+55	; 0x37
    345a:	98 ad       	ldd	r25, Y+56	; 0x38
    345c:	20 e0       	ldi	r18, 0x00	; 0
    345e:	30 e0       	ldi	r19, 0x00	; 0
    3460:	4a e7       	ldi	r20, 0x7A	; 122
    3462:	55 e4       	ldi	r21, 0x45	; 69
    3464:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3468:	dc 01       	movw	r26, r24
    346a:	cb 01       	movw	r24, r22
    346c:	89 ab       	std	Y+49, r24	; 0x31
    346e:	9a ab       	std	Y+50, r25	; 0x32
    3470:	ab ab       	std	Y+51, r26	; 0x33
    3472:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3474:	69 a9       	ldd	r22, Y+49	; 0x31
    3476:	7a a9       	ldd	r23, Y+50	; 0x32
    3478:	8b a9       	ldd	r24, Y+51	; 0x33
    347a:	9c a9       	ldd	r25, Y+52	; 0x34
    347c:	20 e0       	ldi	r18, 0x00	; 0
    347e:	30 e0       	ldi	r19, 0x00	; 0
    3480:	40 e8       	ldi	r20, 0x80	; 128
    3482:	5f e3       	ldi	r21, 0x3F	; 63
    3484:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3488:	88 23       	and	r24, r24
    348a:	2c f4       	brge	.+10     	; 0x3496 <LCD_displayCharacter+0x50a>
		__ticks = 1;
    348c:	81 e0       	ldi	r24, 0x01	; 1
    348e:	90 e0       	ldi	r25, 0x00	; 0
    3490:	98 ab       	std	Y+48, r25	; 0x30
    3492:	8f a7       	std	Y+47, r24	; 0x2f
    3494:	3f c0       	rjmp	.+126    	; 0x3514 <LCD_displayCharacter+0x588>
	else if (__tmp > 65535)
    3496:	69 a9       	ldd	r22, Y+49	; 0x31
    3498:	7a a9       	ldd	r23, Y+50	; 0x32
    349a:	8b a9       	ldd	r24, Y+51	; 0x33
    349c:	9c a9       	ldd	r25, Y+52	; 0x34
    349e:	20 e0       	ldi	r18, 0x00	; 0
    34a0:	3f ef       	ldi	r19, 0xFF	; 255
    34a2:	4f e7       	ldi	r20, 0x7F	; 127
    34a4:	57 e4       	ldi	r21, 0x47	; 71
    34a6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    34aa:	18 16       	cp	r1, r24
    34ac:	4c f5       	brge	.+82     	; 0x3500 <LCD_displayCharacter+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34ae:	6d a9       	ldd	r22, Y+53	; 0x35
    34b0:	7e a9       	ldd	r23, Y+54	; 0x36
    34b2:	8f a9       	ldd	r24, Y+55	; 0x37
    34b4:	98 ad       	ldd	r25, Y+56	; 0x38
    34b6:	20 e0       	ldi	r18, 0x00	; 0
    34b8:	30 e0       	ldi	r19, 0x00	; 0
    34ba:	40 e2       	ldi	r20, 0x20	; 32
    34bc:	51 e4       	ldi	r21, 0x41	; 65
    34be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34c2:	dc 01       	movw	r26, r24
    34c4:	cb 01       	movw	r24, r22
    34c6:	bc 01       	movw	r22, r24
    34c8:	cd 01       	movw	r24, r26
    34ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34ce:	dc 01       	movw	r26, r24
    34d0:	cb 01       	movw	r24, r22
    34d2:	98 ab       	std	Y+48, r25	; 0x30
    34d4:	8f a7       	std	Y+47, r24	; 0x2f
    34d6:	0f c0       	rjmp	.+30     	; 0x34f6 <LCD_displayCharacter+0x56a>
    34d8:	80 e9       	ldi	r24, 0x90	; 144
    34da:	91 e0       	ldi	r25, 0x01	; 1
    34dc:	9e a7       	std	Y+46, r25	; 0x2e
    34de:	8d a7       	std	Y+45, r24	; 0x2d
    34e0:	8d a5       	ldd	r24, Y+45	; 0x2d
    34e2:	9e a5       	ldd	r25, Y+46	; 0x2e
    34e4:	01 97       	sbiw	r24, 0x01	; 1
    34e6:	f1 f7       	brne	.-4      	; 0x34e4 <LCD_displayCharacter+0x558>
    34e8:	9e a7       	std	Y+46, r25	; 0x2e
    34ea:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34ec:	8f a5       	ldd	r24, Y+47	; 0x2f
    34ee:	98 a9       	ldd	r25, Y+48	; 0x30
    34f0:	01 97       	sbiw	r24, 0x01	; 1
    34f2:	98 ab       	std	Y+48, r25	; 0x30
    34f4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34f6:	8f a5       	ldd	r24, Y+47	; 0x2f
    34f8:	98 a9       	ldd	r25, Y+48	; 0x30
    34fa:	00 97       	sbiw	r24, 0x00	; 0
    34fc:	69 f7       	brne	.-38     	; 0x34d8 <LCD_displayCharacter+0x54c>
    34fe:	14 c0       	rjmp	.+40     	; 0x3528 <LCD_displayCharacter+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3500:	69 a9       	ldd	r22, Y+49	; 0x31
    3502:	7a a9       	ldd	r23, Y+50	; 0x32
    3504:	8b a9       	ldd	r24, Y+51	; 0x33
    3506:	9c a9       	ldd	r25, Y+52	; 0x34
    3508:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    350c:	dc 01       	movw	r26, r24
    350e:	cb 01       	movw	r24, r22
    3510:	98 ab       	std	Y+48, r25	; 0x30
    3512:	8f a7       	std	Y+47, r24	; 0x2f
    3514:	8f a5       	ldd	r24, Y+47	; 0x2f
    3516:	98 a9       	ldd	r25, Y+48	; 0x30
    3518:	9c a7       	std	Y+44, r25	; 0x2c
    351a:	8b a7       	std	Y+43, r24	; 0x2b
    351c:	8b a5       	ldd	r24, Y+43	; 0x2b
    351e:	9c a5       	ldd	r25, Y+44	; 0x2c
    3520:	01 97       	sbiw	r24, 0x01	; 1
    3522:	f1 f7       	brne	.-4      	; 0x3520 <LCD_displayCharacter+0x594>
    3524:	9c a7       	std	Y+44, r25	; 0x2c
    3526:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    3528:	80 e0       	ldi	r24, 0x00	; 0
    352a:	62 e0       	ldi	r22, 0x02	; 2
    352c:	41 e0       	ldi	r20, 0x01	; 1
    352e:	0e 94 46 10 	call	0x208c	; 0x208c <GPIO_writePin>
    3532:	80 e0       	ldi	r24, 0x00	; 0
    3534:	90 e0       	ldi	r25, 0x00	; 0
    3536:	a0 e8       	ldi	r26, 0x80	; 128
    3538:	bf e3       	ldi	r27, 0x3F	; 63
    353a:	8f a3       	std	Y+39, r24	; 0x27
    353c:	98 a7       	std	Y+40, r25	; 0x28
    353e:	a9 a7       	std	Y+41, r26	; 0x29
    3540:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3542:	6f a1       	ldd	r22, Y+39	; 0x27
    3544:	78 a5       	ldd	r23, Y+40	; 0x28
    3546:	89 a5       	ldd	r24, Y+41	; 0x29
    3548:	9a a5       	ldd	r25, Y+42	; 0x2a
    354a:	20 e0       	ldi	r18, 0x00	; 0
    354c:	30 e0       	ldi	r19, 0x00	; 0
    354e:	4a e7       	ldi	r20, 0x7A	; 122
    3550:	55 e4       	ldi	r21, 0x45	; 69
    3552:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3556:	dc 01       	movw	r26, r24
    3558:	cb 01       	movw	r24, r22
    355a:	8b a3       	std	Y+35, r24	; 0x23
    355c:	9c a3       	std	Y+36, r25	; 0x24
    355e:	ad a3       	std	Y+37, r26	; 0x25
    3560:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3562:	6b a1       	ldd	r22, Y+35	; 0x23
    3564:	7c a1       	ldd	r23, Y+36	; 0x24
    3566:	8d a1       	ldd	r24, Y+37	; 0x25
    3568:	9e a1       	ldd	r25, Y+38	; 0x26
    356a:	20 e0       	ldi	r18, 0x00	; 0
    356c:	30 e0       	ldi	r19, 0x00	; 0
    356e:	40 e8       	ldi	r20, 0x80	; 128
    3570:	5f e3       	ldi	r21, 0x3F	; 63
    3572:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3576:	88 23       	and	r24, r24
    3578:	2c f4       	brge	.+10     	; 0x3584 <LCD_displayCharacter+0x5f8>
		__ticks = 1;
    357a:	81 e0       	ldi	r24, 0x01	; 1
    357c:	90 e0       	ldi	r25, 0x00	; 0
    357e:	9a a3       	std	Y+34, r25	; 0x22
    3580:	89 a3       	std	Y+33, r24	; 0x21
    3582:	3f c0       	rjmp	.+126    	; 0x3602 <LCD_displayCharacter+0x676>
	else if (__tmp > 65535)
    3584:	6b a1       	ldd	r22, Y+35	; 0x23
    3586:	7c a1       	ldd	r23, Y+36	; 0x24
    3588:	8d a1       	ldd	r24, Y+37	; 0x25
    358a:	9e a1       	ldd	r25, Y+38	; 0x26
    358c:	20 e0       	ldi	r18, 0x00	; 0
    358e:	3f ef       	ldi	r19, 0xFF	; 255
    3590:	4f e7       	ldi	r20, 0x7F	; 127
    3592:	57 e4       	ldi	r21, 0x47	; 71
    3594:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3598:	18 16       	cp	r1, r24
    359a:	4c f5       	brge	.+82     	; 0x35ee <LCD_displayCharacter+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    359c:	6f a1       	ldd	r22, Y+39	; 0x27
    359e:	78 a5       	ldd	r23, Y+40	; 0x28
    35a0:	89 a5       	ldd	r24, Y+41	; 0x29
    35a2:	9a a5       	ldd	r25, Y+42	; 0x2a
    35a4:	20 e0       	ldi	r18, 0x00	; 0
    35a6:	30 e0       	ldi	r19, 0x00	; 0
    35a8:	40 e2       	ldi	r20, 0x20	; 32
    35aa:	51 e4       	ldi	r21, 0x41	; 65
    35ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35b0:	dc 01       	movw	r26, r24
    35b2:	cb 01       	movw	r24, r22
    35b4:	bc 01       	movw	r22, r24
    35b6:	cd 01       	movw	r24, r26
    35b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35bc:	dc 01       	movw	r26, r24
    35be:	cb 01       	movw	r24, r22
    35c0:	9a a3       	std	Y+34, r25	; 0x22
    35c2:	89 a3       	std	Y+33, r24	; 0x21
    35c4:	0f c0       	rjmp	.+30     	; 0x35e4 <LCD_displayCharacter+0x658>
    35c6:	80 e9       	ldi	r24, 0x90	; 144
    35c8:	91 e0       	ldi	r25, 0x01	; 1
    35ca:	98 a3       	std	Y+32, r25	; 0x20
    35cc:	8f 8f       	std	Y+31, r24	; 0x1f
    35ce:	8f 8d       	ldd	r24, Y+31	; 0x1f
    35d0:	98 a1       	ldd	r25, Y+32	; 0x20
    35d2:	01 97       	sbiw	r24, 0x01	; 1
    35d4:	f1 f7       	brne	.-4      	; 0x35d2 <LCD_displayCharacter+0x646>
    35d6:	98 a3       	std	Y+32, r25	; 0x20
    35d8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35da:	89 a1       	ldd	r24, Y+33	; 0x21
    35dc:	9a a1       	ldd	r25, Y+34	; 0x22
    35de:	01 97       	sbiw	r24, 0x01	; 1
    35e0:	9a a3       	std	Y+34, r25	; 0x22
    35e2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35e4:	89 a1       	ldd	r24, Y+33	; 0x21
    35e6:	9a a1       	ldd	r25, Y+34	; 0x22
    35e8:	00 97       	sbiw	r24, 0x00	; 0
    35ea:	69 f7       	brne	.-38     	; 0x35c6 <LCD_displayCharacter+0x63a>
    35ec:	14 c0       	rjmp	.+40     	; 0x3616 <LCD_displayCharacter+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35ee:	6b a1       	ldd	r22, Y+35	; 0x23
    35f0:	7c a1       	ldd	r23, Y+36	; 0x24
    35f2:	8d a1       	ldd	r24, Y+37	; 0x25
    35f4:	9e a1       	ldd	r25, Y+38	; 0x26
    35f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35fa:	dc 01       	movw	r26, r24
    35fc:	cb 01       	movw	r24, r22
    35fe:	9a a3       	std	Y+34, r25	; 0x22
    3600:	89 a3       	std	Y+33, r24	; 0x21
    3602:	89 a1       	ldd	r24, Y+33	; 0x21
    3604:	9a a1       	ldd	r25, Y+34	; 0x22
    3606:	9e 8f       	std	Y+30, r25	; 0x1e
    3608:	8d 8f       	std	Y+29, r24	; 0x1d
    360a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    360c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    360e:	01 97       	sbiw	r24, 0x01	; 1
    3610:	f1 f7       	brne	.-4      	; 0x360e <LCD_displayCharacter+0x682>
    3612:	9e 8f       	std	Y+30, r25	; 0x1e
    3614:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,0));
    3616:	fe 01       	movw	r30, r28
    3618:	ed 59       	subi	r30, 0x9D	; 157
    361a:	ff 4f       	sbci	r31, 0xFF	; 255
    361c:	80 81       	ld	r24, Z
    361e:	98 2f       	mov	r25, r24
    3620:	91 70       	andi	r25, 0x01	; 1
    3622:	80 e0       	ldi	r24, 0x00	; 0
    3624:	63 e0       	ldi	r22, 0x03	; 3
    3626:	49 2f       	mov	r20, r25
    3628:	0e 94 46 10 	call	0x208c	; 0x208c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,1));
    362c:	fe 01       	movw	r30, r28
    362e:	ed 59       	subi	r30, 0x9D	; 157
    3630:	ff 4f       	sbci	r31, 0xFF	; 255
    3632:	80 81       	ld	r24, Z
    3634:	88 2f       	mov	r24, r24
    3636:	90 e0       	ldi	r25, 0x00	; 0
    3638:	82 70       	andi	r24, 0x02	; 2
    363a:	90 70       	andi	r25, 0x00	; 0
    363c:	95 95       	asr	r25
    363e:	87 95       	ror	r24
    3640:	98 2f       	mov	r25, r24
    3642:	80 e0       	ldi	r24, 0x00	; 0
    3644:	64 e0       	ldi	r22, 0x04	; 4
    3646:	49 2f       	mov	r20, r25
    3648:	0e 94 46 10 	call	0x208c	; 0x208c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,2));
    364c:	fe 01       	movw	r30, r28
    364e:	ed 59       	subi	r30, 0x9D	; 157
    3650:	ff 4f       	sbci	r31, 0xFF	; 255
    3652:	80 81       	ld	r24, Z
    3654:	88 2f       	mov	r24, r24
    3656:	90 e0       	ldi	r25, 0x00	; 0
    3658:	84 70       	andi	r24, 0x04	; 4
    365a:	90 70       	andi	r25, 0x00	; 0
    365c:	95 95       	asr	r25
    365e:	87 95       	ror	r24
    3660:	95 95       	asr	r25
    3662:	87 95       	ror	r24
    3664:	98 2f       	mov	r25, r24
    3666:	80 e0       	ldi	r24, 0x00	; 0
    3668:	65 e0       	ldi	r22, 0x05	; 5
    366a:	49 2f       	mov	r20, r25
    366c:	0e 94 46 10 	call	0x208c	; 0x208c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,3));
    3670:	fe 01       	movw	r30, r28
    3672:	ed 59       	subi	r30, 0x9D	; 157
    3674:	ff 4f       	sbci	r31, 0xFF	; 255
    3676:	80 81       	ld	r24, Z
    3678:	88 2f       	mov	r24, r24
    367a:	90 e0       	ldi	r25, 0x00	; 0
    367c:	88 70       	andi	r24, 0x08	; 8
    367e:	90 70       	andi	r25, 0x00	; 0
    3680:	95 95       	asr	r25
    3682:	87 95       	ror	r24
    3684:	95 95       	asr	r25
    3686:	87 95       	ror	r24
    3688:	95 95       	asr	r25
    368a:	87 95       	ror	r24
    368c:	98 2f       	mov	r25, r24
    368e:	80 e0       	ldi	r24, 0x00	; 0
    3690:	66 e0       	ldi	r22, 0x06	; 6
    3692:	49 2f       	mov	r20, r25
    3694:	0e 94 46 10 	call	0x208c	; 0x208c <GPIO_writePin>
    3698:	80 e0       	ldi	r24, 0x00	; 0
    369a:	90 e0       	ldi	r25, 0x00	; 0
    369c:	a0 e8       	ldi	r26, 0x80	; 128
    369e:	bf e3       	ldi	r27, 0x3F	; 63
    36a0:	89 8f       	std	Y+25, r24	; 0x19
    36a2:	9a 8f       	std	Y+26, r25	; 0x1a
    36a4:	ab 8f       	std	Y+27, r26	; 0x1b
    36a6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36a8:	69 8d       	ldd	r22, Y+25	; 0x19
    36aa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    36ac:	8b 8d       	ldd	r24, Y+27	; 0x1b
    36ae:	9c 8d       	ldd	r25, Y+28	; 0x1c
    36b0:	20 e0       	ldi	r18, 0x00	; 0
    36b2:	30 e0       	ldi	r19, 0x00	; 0
    36b4:	4a e7       	ldi	r20, 0x7A	; 122
    36b6:	55 e4       	ldi	r21, 0x45	; 69
    36b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36bc:	dc 01       	movw	r26, r24
    36be:	cb 01       	movw	r24, r22
    36c0:	8d 8b       	std	Y+21, r24	; 0x15
    36c2:	9e 8b       	std	Y+22, r25	; 0x16
    36c4:	af 8b       	std	Y+23, r26	; 0x17
    36c6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    36c8:	6d 89       	ldd	r22, Y+21	; 0x15
    36ca:	7e 89       	ldd	r23, Y+22	; 0x16
    36cc:	8f 89       	ldd	r24, Y+23	; 0x17
    36ce:	98 8d       	ldd	r25, Y+24	; 0x18
    36d0:	20 e0       	ldi	r18, 0x00	; 0
    36d2:	30 e0       	ldi	r19, 0x00	; 0
    36d4:	40 e8       	ldi	r20, 0x80	; 128
    36d6:	5f e3       	ldi	r21, 0x3F	; 63
    36d8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    36dc:	88 23       	and	r24, r24
    36de:	2c f4       	brge	.+10     	; 0x36ea <LCD_displayCharacter+0x75e>
		__ticks = 1;
    36e0:	81 e0       	ldi	r24, 0x01	; 1
    36e2:	90 e0       	ldi	r25, 0x00	; 0
    36e4:	9c 8b       	std	Y+20, r25	; 0x14
    36e6:	8b 8b       	std	Y+19, r24	; 0x13
    36e8:	3f c0       	rjmp	.+126    	; 0x3768 <LCD_displayCharacter+0x7dc>
	else if (__tmp > 65535)
    36ea:	6d 89       	ldd	r22, Y+21	; 0x15
    36ec:	7e 89       	ldd	r23, Y+22	; 0x16
    36ee:	8f 89       	ldd	r24, Y+23	; 0x17
    36f0:	98 8d       	ldd	r25, Y+24	; 0x18
    36f2:	20 e0       	ldi	r18, 0x00	; 0
    36f4:	3f ef       	ldi	r19, 0xFF	; 255
    36f6:	4f e7       	ldi	r20, 0x7F	; 127
    36f8:	57 e4       	ldi	r21, 0x47	; 71
    36fa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    36fe:	18 16       	cp	r1, r24
    3700:	4c f5       	brge	.+82     	; 0x3754 <LCD_displayCharacter+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3702:	69 8d       	ldd	r22, Y+25	; 0x19
    3704:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3706:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3708:	9c 8d       	ldd	r25, Y+28	; 0x1c
    370a:	20 e0       	ldi	r18, 0x00	; 0
    370c:	30 e0       	ldi	r19, 0x00	; 0
    370e:	40 e2       	ldi	r20, 0x20	; 32
    3710:	51 e4       	ldi	r21, 0x41	; 65
    3712:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3716:	dc 01       	movw	r26, r24
    3718:	cb 01       	movw	r24, r22
    371a:	bc 01       	movw	r22, r24
    371c:	cd 01       	movw	r24, r26
    371e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3722:	dc 01       	movw	r26, r24
    3724:	cb 01       	movw	r24, r22
    3726:	9c 8b       	std	Y+20, r25	; 0x14
    3728:	8b 8b       	std	Y+19, r24	; 0x13
    372a:	0f c0       	rjmp	.+30     	; 0x374a <LCD_displayCharacter+0x7be>
    372c:	80 e9       	ldi	r24, 0x90	; 144
    372e:	91 e0       	ldi	r25, 0x01	; 1
    3730:	9a 8b       	std	Y+18, r25	; 0x12
    3732:	89 8b       	std	Y+17, r24	; 0x11
    3734:	89 89       	ldd	r24, Y+17	; 0x11
    3736:	9a 89       	ldd	r25, Y+18	; 0x12
    3738:	01 97       	sbiw	r24, 0x01	; 1
    373a:	f1 f7       	brne	.-4      	; 0x3738 <LCD_displayCharacter+0x7ac>
    373c:	9a 8b       	std	Y+18, r25	; 0x12
    373e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3740:	8b 89       	ldd	r24, Y+19	; 0x13
    3742:	9c 89       	ldd	r25, Y+20	; 0x14
    3744:	01 97       	sbiw	r24, 0x01	; 1
    3746:	9c 8b       	std	Y+20, r25	; 0x14
    3748:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    374a:	8b 89       	ldd	r24, Y+19	; 0x13
    374c:	9c 89       	ldd	r25, Y+20	; 0x14
    374e:	00 97       	sbiw	r24, 0x00	; 0
    3750:	69 f7       	brne	.-38     	; 0x372c <LCD_displayCharacter+0x7a0>
    3752:	14 c0       	rjmp	.+40     	; 0x377c <LCD_displayCharacter+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3754:	6d 89       	ldd	r22, Y+21	; 0x15
    3756:	7e 89       	ldd	r23, Y+22	; 0x16
    3758:	8f 89       	ldd	r24, Y+23	; 0x17
    375a:	98 8d       	ldd	r25, Y+24	; 0x18
    375c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3760:	dc 01       	movw	r26, r24
    3762:	cb 01       	movw	r24, r22
    3764:	9c 8b       	std	Y+20, r25	; 0x14
    3766:	8b 8b       	std	Y+19, r24	; 0x13
    3768:	8b 89       	ldd	r24, Y+19	; 0x13
    376a:	9c 89       	ldd	r25, Y+20	; 0x14
    376c:	98 8b       	std	Y+16, r25	; 0x10
    376e:	8f 87       	std	Y+15, r24	; 0x0f
    3770:	8f 85       	ldd	r24, Y+15	; 0x0f
    3772:	98 89       	ldd	r25, Y+16	; 0x10
    3774:	01 97       	sbiw	r24, 0x01	; 1
    3776:	f1 f7       	brne	.-4      	; 0x3774 <LCD_displayCharacter+0x7e8>
    3778:	98 8b       	std	Y+16, r25	; 0x10
    377a:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    377c:	80 e0       	ldi	r24, 0x00	; 0
    377e:	62 e0       	ldi	r22, 0x02	; 2
    3780:	40 e0       	ldi	r20, 0x00	; 0
    3782:	0e 94 46 10 	call	0x208c	; 0x208c <GPIO_writePin>
    3786:	80 e0       	ldi	r24, 0x00	; 0
    3788:	90 e0       	ldi	r25, 0x00	; 0
    378a:	a0 e8       	ldi	r26, 0x80	; 128
    378c:	bf e3       	ldi	r27, 0x3F	; 63
    378e:	8b 87       	std	Y+11, r24	; 0x0b
    3790:	9c 87       	std	Y+12, r25	; 0x0c
    3792:	ad 87       	std	Y+13, r26	; 0x0d
    3794:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3796:	6b 85       	ldd	r22, Y+11	; 0x0b
    3798:	7c 85       	ldd	r23, Y+12	; 0x0c
    379a:	8d 85       	ldd	r24, Y+13	; 0x0d
    379c:	9e 85       	ldd	r25, Y+14	; 0x0e
    379e:	20 e0       	ldi	r18, 0x00	; 0
    37a0:	30 e0       	ldi	r19, 0x00	; 0
    37a2:	4a e7       	ldi	r20, 0x7A	; 122
    37a4:	55 e4       	ldi	r21, 0x45	; 69
    37a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37aa:	dc 01       	movw	r26, r24
    37ac:	cb 01       	movw	r24, r22
    37ae:	8f 83       	std	Y+7, r24	; 0x07
    37b0:	98 87       	std	Y+8, r25	; 0x08
    37b2:	a9 87       	std	Y+9, r26	; 0x09
    37b4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    37b6:	6f 81       	ldd	r22, Y+7	; 0x07
    37b8:	78 85       	ldd	r23, Y+8	; 0x08
    37ba:	89 85       	ldd	r24, Y+9	; 0x09
    37bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    37be:	20 e0       	ldi	r18, 0x00	; 0
    37c0:	30 e0       	ldi	r19, 0x00	; 0
    37c2:	40 e8       	ldi	r20, 0x80	; 128
    37c4:	5f e3       	ldi	r21, 0x3F	; 63
    37c6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    37ca:	88 23       	and	r24, r24
    37cc:	2c f4       	brge	.+10     	; 0x37d8 <LCD_displayCharacter+0x84c>
		__ticks = 1;
    37ce:	81 e0       	ldi	r24, 0x01	; 1
    37d0:	90 e0       	ldi	r25, 0x00	; 0
    37d2:	9e 83       	std	Y+6, r25	; 0x06
    37d4:	8d 83       	std	Y+5, r24	; 0x05
    37d6:	3f c0       	rjmp	.+126    	; 0x3856 <LCD_displayCharacter+0x8ca>
	else if (__tmp > 65535)
    37d8:	6f 81       	ldd	r22, Y+7	; 0x07
    37da:	78 85       	ldd	r23, Y+8	; 0x08
    37dc:	89 85       	ldd	r24, Y+9	; 0x09
    37de:	9a 85       	ldd	r25, Y+10	; 0x0a
    37e0:	20 e0       	ldi	r18, 0x00	; 0
    37e2:	3f ef       	ldi	r19, 0xFF	; 255
    37e4:	4f e7       	ldi	r20, 0x7F	; 127
    37e6:	57 e4       	ldi	r21, 0x47	; 71
    37e8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    37ec:	18 16       	cp	r1, r24
    37ee:	4c f5       	brge	.+82     	; 0x3842 <LCD_displayCharacter+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    37f0:	6b 85       	ldd	r22, Y+11	; 0x0b
    37f2:	7c 85       	ldd	r23, Y+12	; 0x0c
    37f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    37f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    37f8:	20 e0       	ldi	r18, 0x00	; 0
    37fa:	30 e0       	ldi	r19, 0x00	; 0
    37fc:	40 e2       	ldi	r20, 0x20	; 32
    37fe:	51 e4       	ldi	r21, 0x41	; 65
    3800:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3804:	dc 01       	movw	r26, r24
    3806:	cb 01       	movw	r24, r22
    3808:	bc 01       	movw	r22, r24
    380a:	cd 01       	movw	r24, r26
    380c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3810:	dc 01       	movw	r26, r24
    3812:	cb 01       	movw	r24, r22
    3814:	9e 83       	std	Y+6, r25	; 0x06
    3816:	8d 83       	std	Y+5, r24	; 0x05
    3818:	0f c0       	rjmp	.+30     	; 0x3838 <LCD_displayCharacter+0x8ac>
    381a:	80 e9       	ldi	r24, 0x90	; 144
    381c:	91 e0       	ldi	r25, 0x01	; 1
    381e:	9c 83       	std	Y+4, r25	; 0x04
    3820:	8b 83       	std	Y+3, r24	; 0x03
    3822:	8b 81       	ldd	r24, Y+3	; 0x03
    3824:	9c 81       	ldd	r25, Y+4	; 0x04
    3826:	01 97       	sbiw	r24, 0x01	; 1
    3828:	f1 f7       	brne	.-4      	; 0x3826 <LCD_displayCharacter+0x89a>
    382a:	9c 83       	std	Y+4, r25	; 0x04
    382c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    382e:	8d 81       	ldd	r24, Y+5	; 0x05
    3830:	9e 81       	ldd	r25, Y+6	; 0x06
    3832:	01 97       	sbiw	r24, 0x01	; 1
    3834:	9e 83       	std	Y+6, r25	; 0x06
    3836:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3838:	8d 81       	ldd	r24, Y+5	; 0x05
    383a:	9e 81       	ldd	r25, Y+6	; 0x06
    383c:	00 97       	sbiw	r24, 0x00	; 0
    383e:	69 f7       	brne	.-38     	; 0x381a <LCD_displayCharacter+0x88e>
    3840:	14 c0       	rjmp	.+40     	; 0x386a <LCD_displayCharacter+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3842:	6f 81       	ldd	r22, Y+7	; 0x07
    3844:	78 85       	ldd	r23, Y+8	; 0x08
    3846:	89 85       	ldd	r24, Y+9	; 0x09
    3848:	9a 85       	ldd	r25, Y+10	; 0x0a
    384a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    384e:	dc 01       	movw	r26, r24
    3850:	cb 01       	movw	r24, r22
    3852:	9e 83       	std	Y+6, r25	; 0x06
    3854:	8d 83       	std	Y+5, r24	; 0x05
    3856:	8d 81       	ldd	r24, Y+5	; 0x05
    3858:	9e 81       	ldd	r25, Y+6	; 0x06
    385a:	9a 83       	std	Y+2, r25	; 0x02
    385c:	89 83       	std	Y+1, r24	; 0x01
    385e:	89 81       	ldd	r24, Y+1	; 0x01
    3860:	9a 81       	ldd	r25, Y+2	; 0x02
    3862:	01 97       	sbiw	r24, 0x01	; 1
    3864:	f1 f7       	brne	.-4      	; 0x3862 <LCD_displayCharacter+0x8d6>
    3866:	9a 83       	std	Y+2, r25	; 0x02
    3868:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    386a:	cd 59       	subi	r28, 0x9D	; 157
    386c:	df 4f       	sbci	r29, 0xFF	; 255
    386e:	0f b6       	in	r0, 0x3f	; 63
    3870:	f8 94       	cli
    3872:	de bf       	out	0x3e, r29	; 62
    3874:	0f be       	out	0x3f, r0	; 63
    3876:	cd bf       	out	0x3d, r28	; 61
    3878:	cf 91       	pop	r28
    387a:	df 91       	pop	r29
    387c:	1f 91       	pop	r17
    387e:	0f 91       	pop	r16
    3880:	08 95       	ret

00003882 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    3882:	df 93       	push	r29
    3884:	cf 93       	push	r28
    3886:	00 d0       	rcall	.+0      	; 0x3888 <LCD_displayString+0x6>
    3888:	0f 92       	push	r0
    388a:	cd b7       	in	r28, 0x3d	; 61
    388c:	de b7       	in	r29, 0x3e	; 62
    388e:	9b 83       	std	Y+3, r25	; 0x03
    3890:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3892:	19 82       	std	Y+1, r1	; 0x01
    3894:	0e c0       	rjmp	.+28     	; 0x38b2 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    3896:	89 81       	ldd	r24, Y+1	; 0x01
    3898:	28 2f       	mov	r18, r24
    389a:	30 e0       	ldi	r19, 0x00	; 0
    389c:	8a 81       	ldd	r24, Y+2	; 0x02
    389e:	9b 81       	ldd	r25, Y+3	; 0x03
    38a0:	fc 01       	movw	r30, r24
    38a2:	e2 0f       	add	r30, r18
    38a4:	f3 1f       	adc	r31, r19
    38a6:	80 81       	ld	r24, Z
    38a8:	0e 94 c6 17 	call	0x2f8c	; 0x2f8c <LCD_displayCharacter>
		i++;
    38ac:	89 81       	ldd	r24, Y+1	; 0x01
    38ae:	8f 5f       	subi	r24, 0xFF	; 255
    38b0:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    38b2:	89 81       	ldd	r24, Y+1	; 0x01
    38b4:	28 2f       	mov	r18, r24
    38b6:	30 e0       	ldi	r19, 0x00	; 0
    38b8:	8a 81       	ldd	r24, Y+2	; 0x02
    38ba:	9b 81       	ldd	r25, Y+3	; 0x03
    38bc:	fc 01       	movw	r30, r24
    38be:	e2 0f       	add	r30, r18
    38c0:	f3 1f       	adc	r31, r19
    38c2:	80 81       	ld	r24, Z
    38c4:	88 23       	and	r24, r24
    38c6:	39 f7       	brne	.-50     	; 0x3896 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    38c8:	0f 90       	pop	r0
    38ca:	0f 90       	pop	r0
    38cc:	0f 90       	pop	r0
    38ce:	cf 91       	pop	r28
    38d0:	df 91       	pop	r29
    38d2:	08 95       	ret

000038d4 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    38d4:	df 93       	push	r29
    38d6:	cf 93       	push	r28
    38d8:	00 d0       	rcall	.+0      	; 0x38da <LCD_moveCursor+0x6>
    38da:	00 d0       	rcall	.+0      	; 0x38dc <LCD_moveCursor+0x8>
    38dc:	0f 92       	push	r0
    38de:	cd b7       	in	r28, 0x3d	; 61
    38e0:	de b7       	in	r29, 0x3e	; 62
    38e2:	8a 83       	std	Y+2, r24	; 0x02
    38e4:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    38e6:	8a 81       	ldd	r24, Y+2	; 0x02
    38e8:	28 2f       	mov	r18, r24
    38ea:	30 e0       	ldi	r19, 0x00	; 0
    38ec:	3d 83       	std	Y+5, r19	; 0x05
    38ee:	2c 83       	std	Y+4, r18	; 0x04
    38f0:	8c 81       	ldd	r24, Y+4	; 0x04
    38f2:	9d 81       	ldd	r25, Y+5	; 0x05
    38f4:	81 30       	cpi	r24, 0x01	; 1
    38f6:	91 05       	cpc	r25, r1
    38f8:	c1 f0       	breq	.+48     	; 0x392a <LCD_moveCursor+0x56>
    38fa:	2c 81       	ldd	r18, Y+4	; 0x04
    38fc:	3d 81       	ldd	r19, Y+5	; 0x05
    38fe:	22 30       	cpi	r18, 0x02	; 2
    3900:	31 05       	cpc	r19, r1
    3902:	2c f4       	brge	.+10     	; 0x390e <LCD_moveCursor+0x3a>
    3904:	8c 81       	ldd	r24, Y+4	; 0x04
    3906:	9d 81       	ldd	r25, Y+5	; 0x05
    3908:	00 97       	sbiw	r24, 0x00	; 0
    390a:	61 f0       	breq	.+24     	; 0x3924 <LCD_moveCursor+0x50>
    390c:	19 c0       	rjmp	.+50     	; 0x3940 <LCD_moveCursor+0x6c>
    390e:	2c 81       	ldd	r18, Y+4	; 0x04
    3910:	3d 81       	ldd	r19, Y+5	; 0x05
    3912:	22 30       	cpi	r18, 0x02	; 2
    3914:	31 05       	cpc	r19, r1
    3916:	69 f0       	breq	.+26     	; 0x3932 <LCD_moveCursor+0x5e>
    3918:	8c 81       	ldd	r24, Y+4	; 0x04
    391a:	9d 81       	ldd	r25, Y+5	; 0x05
    391c:	83 30       	cpi	r24, 0x03	; 3
    391e:	91 05       	cpc	r25, r1
    3920:	61 f0       	breq	.+24     	; 0x393a <LCD_moveCursor+0x66>
    3922:	0e c0       	rjmp	.+28     	; 0x3940 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    3924:	8b 81       	ldd	r24, Y+3	; 0x03
    3926:	89 83       	std	Y+1, r24	; 0x01
    3928:	0b c0       	rjmp	.+22     	; 0x3940 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    392a:	8b 81       	ldd	r24, Y+3	; 0x03
    392c:	80 5c       	subi	r24, 0xC0	; 192
    392e:	89 83       	std	Y+1, r24	; 0x01
    3930:	07 c0       	rjmp	.+14     	; 0x3940 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    3932:	8b 81       	ldd	r24, Y+3	; 0x03
    3934:	80 5f       	subi	r24, 0xF0	; 240
    3936:	89 83       	std	Y+1, r24	; 0x01
    3938:	03 c0       	rjmp	.+6      	; 0x3940 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    393a:	8b 81       	ldd	r24, Y+3	; 0x03
    393c:	80 5b       	subi	r24, 0xB0	; 176
    393e:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    3940:	89 81       	ldd	r24, Y+1	; 0x01
    3942:	80 68       	ori	r24, 0x80	; 128
    3944:	0e 94 4b 13 	call	0x2696	; 0x2696 <LCD_sendCommand>
}
    3948:	0f 90       	pop	r0
    394a:	0f 90       	pop	r0
    394c:	0f 90       	pop	r0
    394e:	0f 90       	pop	r0
    3950:	0f 90       	pop	r0
    3952:	cf 91       	pop	r28
    3954:	df 91       	pop	r29
    3956:	08 95       	ret

00003958 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    3958:	df 93       	push	r29
    395a:	cf 93       	push	r28
    395c:	00 d0       	rcall	.+0      	; 0x395e <LCD_displayStringRowColumn+0x6>
    395e:	00 d0       	rcall	.+0      	; 0x3960 <LCD_displayStringRowColumn+0x8>
    3960:	cd b7       	in	r28, 0x3d	; 61
    3962:	de b7       	in	r29, 0x3e	; 62
    3964:	89 83       	std	Y+1, r24	; 0x01
    3966:	6a 83       	std	Y+2, r22	; 0x02
    3968:	5c 83       	std	Y+4, r21	; 0x04
    396a:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    396c:	89 81       	ldd	r24, Y+1	; 0x01
    396e:	6a 81       	ldd	r22, Y+2	; 0x02
    3970:	0e 94 6a 1c 	call	0x38d4	; 0x38d4 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    3974:	8b 81       	ldd	r24, Y+3	; 0x03
    3976:	9c 81       	ldd	r25, Y+4	; 0x04
    3978:	0e 94 41 1c 	call	0x3882	; 0x3882 <LCD_displayString>
}
    397c:	0f 90       	pop	r0
    397e:	0f 90       	pop	r0
    3980:	0f 90       	pop	r0
    3982:	0f 90       	pop	r0
    3984:	cf 91       	pop	r28
    3986:	df 91       	pop	r29
    3988:	08 95       	ret

0000398a <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    398a:	df 93       	push	r29
    398c:	cf 93       	push	r28
    398e:	cd b7       	in	r28, 0x3d	; 61
    3990:	de b7       	in	r29, 0x3e	; 62
    3992:	62 97       	sbiw	r28, 0x12	; 18
    3994:	0f b6       	in	r0, 0x3f	; 63
    3996:	f8 94       	cli
    3998:	de bf       	out	0x3e, r29	; 62
    399a:	0f be       	out	0x3f, r0	; 63
    399c:	cd bf       	out	0x3d, r28	; 61
    399e:	9a 8b       	std	Y+18, r25	; 0x12
    39a0:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    39a2:	89 89       	ldd	r24, Y+17	; 0x11
    39a4:	9a 89       	ldd	r25, Y+18	; 0x12
    39a6:	9e 01       	movw	r18, r28
    39a8:	2f 5f       	subi	r18, 0xFF	; 255
    39aa:	3f 4f       	sbci	r19, 0xFF	; 255
    39ac:	b9 01       	movw	r22, r18
    39ae:	4a e0       	ldi	r20, 0x0A	; 10
    39b0:	50 e0       	ldi	r21, 0x00	; 0
    39b2:	0e 94 52 1d 	call	0x3aa4	; 0x3aa4 <itoa>
   LCD_displayString(buff); /* Display the string */
    39b6:	ce 01       	movw	r24, r28
    39b8:	01 96       	adiw	r24, 0x01	; 1
    39ba:	0e 94 41 1c 	call	0x3882	; 0x3882 <LCD_displayString>
}
    39be:	62 96       	adiw	r28, 0x12	; 18
    39c0:	0f b6       	in	r0, 0x3f	; 63
    39c2:	f8 94       	cli
    39c4:	de bf       	out	0x3e, r29	; 62
    39c6:	0f be       	out	0x3f, r0	; 63
    39c8:	cd bf       	out	0x3d, r28	; 61
    39ca:	cf 91       	pop	r28
    39cc:	df 91       	pop	r29
    39ce:	08 95       	ret

000039d0 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    39d0:	df 93       	push	r29
    39d2:	cf 93       	push	r28
    39d4:	cd b7       	in	r28, 0x3d	; 61
    39d6:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    39d8:	81 e0       	ldi	r24, 0x01	; 1
    39da:	0e 94 4b 13 	call	0x2696	; 0x2696 <LCD_sendCommand>
}
    39de:	cf 91       	pop	r28
    39e0:	df 91       	pop	r29
    39e2:	08 95       	ret

000039e4 <Led_init>:
 */
#include <util/delay.h> /* For the delay functions */
#include "led.h"
#include "gpio.h"
void Led_init(void)
{
    39e4:	df 93       	push	r29
    39e6:	cf 93       	push	r28
    39e8:	cd b7       	in	r28, 0x3d	; 61
    39ea:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(LED_PORT_ID,LED_PIN_ID,PIN_OUTPUT);
    39ec:	82 e0       	ldi	r24, 0x02	; 2
    39ee:	60 e0       	ldi	r22, 0x00	; 0
    39f0:	41 e0       	ldi	r20, 0x01	; 1
    39f2:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <GPIO_setupPinDirection>
	GPIO_writePin( LED_PORT_ID, LED_PIN_ID , LOGIC_LOW);
    39f6:	82 e0       	ldi	r24, 0x02	; 2
    39f8:	60 e0       	ldi	r22, 0x00	; 0
    39fa:	40 e0       	ldi	r20, 0x00	; 0
    39fc:	0e 94 46 10 	call	0x208c	; 0x208c <GPIO_writePin>
}
    3a00:	cf 91       	pop	r28
    3a02:	df 91       	pop	r29
    3a04:	08 95       	ret

00003a06 <Led_on>:
void Led_on(void)
{
    3a06:	df 93       	push	r29
    3a08:	cf 93       	push	r28
    3a0a:	cd b7       	in	r28, 0x3d	; 61
    3a0c:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin( LED_PORT_ID, LED_PIN_ID , LOGIC_HIGH);
    3a0e:	82 e0       	ldi	r24, 0x02	; 2
    3a10:	60 e0       	ldi	r22, 0x00	; 0
    3a12:	41 e0       	ldi	r20, 0x01	; 1
    3a14:	0e 94 46 10 	call	0x208c	; 0x208c <GPIO_writePin>
}
    3a18:	cf 91       	pop	r28
    3a1a:	df 91       	pop	r29
    3a1c:	08 95       	ret

00003a1e <Led_off>:
void Led_off(void)
{
    3a1e:	df 93       	push	r29
    3a20:	cf 93       	push	r28
    3a22:	cd b7       	in	r28, 0x3d	; 61
    3a24:	de b7       	in	r29, 0x3e	; 62

	GPIO_writePin( LED_PORT_ID, LED_PIN_ID , LOGIC_LOW);
    3a26:	82 e0       	ldi	r24, 0x02	; 2
    3a28:	60 e0       	ldi	r22, 0x00	; 0
    3a2a:	40 e0       	ldi	r20, 0x00	; 0
    3a2c:	0e 94 46 10 	call	0x208c	; 0x208c <GPIO_writePin>

}
    3a30:	cf 91       	pop	r28
    3a32:	df 91       	pop	r29
    3a34:	08 95       	ret

00003a36 <__prologue_saves__>:
    3a36:	2f 92       	push	r2
    3a38:	3f 92       	push	r3
    3a3a:	4f 92       	push	r4
    3a3c:	5f 92       	push	r5
    3a3e:	6f 92       	push	r6
    3a40:	7f 92       	push	r7
    3a42:	8f 92       	push	r8
    3a44:	9f 92       	push	r9
    3a46:	af 92       	push	r10
    3a48:	bf 92       	push	r11
    3a4a:	cf 92       	push	r12
    3a4c:	df 92       	push	r13
    3a4e:	ef 92       	push	r14
    3a50:	ff 92       	push	r15
    3a52:	0f 93       	push	r16
    3a54:	1f 93       	push	r17
    3a56:	cf 93       	push	r28
    3a58:	df 93       	push	r29
    3a5a:	cd b7       	in	r28, 0x3d	; 61
    3a5c:	de b7       	in	r29, 0x3e	; 62
    3a5e:	ca 1b       	sub	r28, r26
    3a60:	db 0b       	sbc	r29, r27
    3a62:	0f b6       	in	r0, 0x3f	; 63
    3a64:	f8 94       	cli
    3a66:	de bf       	out	0x3e, r29	; 62
    3a68:	0f be       	out	0x3f, r0	; 63
    3a6a:	cd bf       	out	0x3d, r28	; 61
    3a6c:	09 94       	ijmp

00003a6e <__epilogue_restores__>:
    3a6e:	2a 88       	ldd	r2, Y+18	; 0x12
    3a70:	39 88       	ldd	r3, Y+17	; 0x11
    3a72:	48 88       	ldd	r4, Y+16	; 0x10
    3a74:	5f 84       	ldd	r5, Y+15	; 0x0f
    3a76:	6e 84       	ldd	r6, Y+14	; 0x0e
    3a78:	7d 84       	ldd	r7, Y+13	; 0x0d
    3a7a:	8c 84       	ldd	r8, Y+12	; 0x0c
    3a7c:	9b 84       	ldd	r9, Y+11	; 0x0b
    3a7e:	aa 84       	ldd	r10, Y+10	; 0x0a
    3a80:	b9 84       	ldd	r11, Y+9	; 0x09
    3a82:	c8 84       	ldd	r12, Y+8	; 0x08
    3a84:	df 80       	ldd	r13, Y+7	; 0x07
    3a86:	ee 80       	ldd	r14, Y+6	; 0x06
    3a88:	fd 80       	ldd	r15, Y+5	; 0x05
    3a8a:	0c 81       	ldd	r16, Y+4	; 0x04
    3a8c:	1b 81       	ldd	r17, Y+3	; 0x03
    3a8e:	aa 81       	ldd	r26, Y+2	; 0x02
    3a90:	b9 81       	ldd	r27, Y+1	; 0x01
    3a92:	ce 0f       	add	r28, r30
    3a94:	d1 1d       	adc	r29, r1
    3a96:	0f b6       	in	r0, 0x3f	; 63
    3a98:	f8 94       	cli
    3a9a:	de bf       	out	0x3e, r29	; 62
    3a9c:	0f be       	out	0x3f, r0	; 63
    3a9e:	cd bf       	out	0x3d, r28	; 61
    3aa0:	ed 01       	movw	r28, r26
    3aa2:	08 95       	ret

00003aa4 <itoa>:
    3aa4:	fb 01       	movw	r30, r22
    3aa6:	9f 01       	movw	r18, r30
    3aa8:	e8 94       	clt
    3aaa:	42 30       	cpi	r20, 0x02	; 2
    3aac:	c4 f0       	brlt	.+48     	; 0x3ade <itoa+0x3a>
    3aae:	45 32       	cpi	r20, 0x25	; 37
    3ab0:	b4 f4       	brge	.+44     	; 0x3ade <itoa+0x3a>
    3ab2:	4a 30       	cpi	r20, 0x0A	; 10
    3ab4:	29 f4       	brne	.+10     	; 0x3ac0 <itoa+0x1c>
    3ab6:	97 fb       	bst	r25, 7
    3ab8:	1e f4       	brtc	.+6      	; 0x3ac0 <itoa+0x1c>
    3aba:	90 95       	com	r25
    3abc:	81 95       	neg	r24
    3abe:	9f 4f       	sbci	r25, 0xFF	; 255
    3ac0:	64 2f       	mov	r22, r20
    3ac2:	77 27       	eor	r23, r23
    3ac4:	0e 94 83 1d 	call	0x3b06	; 0x3b06 <__udivmodhi4>
    3ac8:	80 5d       	subi	r24, 0xD0	; 208
    3aca:	8a 33       	cpi	r24, 0x3A	; 58
    3acc:	0c f0       	brlt	.+2      	; 0x3ad0 <itoa+0x2c>
    3ace:	89 5d       	subi	r24, 0xD9	; 217
    3ad0:	81 93       	st	Z+, r24
    3ad2:	cb 01       	movw	r24, r22
    3ad4:	00 97       	sbiw	r24, 0x00	; 0
    3ad6:	a1 f7       	brne	.-24     	; 0x3ac0 <itoa+0x1c>
    3ad8:	16 f4       	brtc	.+4      	; 0x3ade <itoa+0x3a>
    3ada:	5d e2       	ldi	r21, 0x2D	; 45
    3adc:	51 93       	st	Z+, r21
    3ade:	10 82       	st	Z, r1
    3ae0:	c9 01       	movw	r24, r18
    3ae2:	0c 94 73 1d 	jmp	0x3ae6	; 0x3ae6 <strrev>

00003ae6 <strrev>:
    3ae6:	dc 01       	movw	r26, r24
    3ae8:	fc 01       	movw	r30, r24
    3aea:	67 2f       	mov	r22, r23
    3aec:	71 91       	ld	r23, Z+
    3aee:	77 23       	and	r23, r23
    3af0:	e1 f7       	brne	.-8      	; 0x3aea <strrev+0x4>
    3af2:	32 97       	sbiw	r30, 0x02	; 2
    3af4:	04 c0       	rjmp	.+8      	; 0x3afe <strrev+0x18>
    3af6:	7c 91       	ld	r23, X
    3af8:	6d 93       	st	X+, r22
    3afa:	70 83       	st	Z, r23
    3afc:	62 91       	ld	r22, -Z
    3afe:	ae 17       	cp	r26, r30
    3b00:	bf 07       	cpc	r27, r31
    3b02:	c8 f3       	brcs	.-14     	; 0x3af6 <strrev+0x10>
    3b04:	08 95       	ret

00003b06 <__udivmodhi4>:
    3b06:	aa 1b       	sub	r26, r26
    3b08:	bb 1b       	sub	r27, r27
    3b0a:	51 e1       	ldi	r21, 0x11	; 17
    3b0c:	07 c0       	rjmp	.+14     	; 0x3b1c <__udivmodhi4_ep>

00003b0e <__udivmodhi4_loop>:
    3b0e:	aa 1f       	adc	r26, r26
    3b10:	bb 1f       	adc	r27, r27
    3b12:	a6 17       	cp	r26, r22
    3b14:	b7 07       	cpc	r27, r23
    3b16:	10 f0       	brcs	.+4      	; 0x3b1c <__udivmodhi4_ep>
    3b18:	a6 1b       	sub	r26, r22
    3b1a:	b7 0b       	sbc	r27, r23

00003b1c <__udivmodhi4_ep>:
    3b1c:	88 1f       	adc	r24, r24
    3b1e:	99 1f       	adc	r25, r25
    3b20:	5a 95       	dec	r21
    3b22:	a9 f7       	brne	.-22     	; 0x3b0e <__udivmodhi4_loop>
    3b24:	80 95       	com	r24
    3b26:	90 95       	com	r25
    3b28:	bc 01       	movw	r22, r24
    3b2a:	cd 01       	movw	r24, r26
    3b2c:	08 95       	ret

00003b2e <_exit>:
    3b2e:	f8 94       	cli

00003b30 <__stop_program>:
    3b30:	ff cf       	rjmp	.-2      	; 0x3b30 <__stop_program>
